options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(TioReader2)package com.thalesgroup.rtrtcoverage.tioreader2;import com.thalesgroup.rtrtcoverage.tioreader2.TestSuiteTrace;import com.thalesgroup.rtrtcoverage.tioreader2.TestTrace;import com.thalesgroup.rtrtcoverage.tioreader2.FileTrace;import com.thalesgroup.rtrtcoverage.tioreader2.BranchTrace;import com.thalesgroup.rtrtcoverage.tioreader2.BranchTraceType;
public class TioReader2{  public TestSuiteTrace readTio() throws TioException  {    TestSuiteTrace testSuiteTrace = null;		try	{		testSuiteTrace =  StartFile();	}	catch (Throwable e)	{		throw new TioException(e.getMessage());	}	finally	{		return testSuiteTrace;	}  }
  }PARSER_END(TioReader2)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN :{  < NUM : ([ "0"-"9", "a"-"f" ])+ >|   < VAR : "\"" ([ "a"-"z", "A"-"Z", "-", "_", ",", ":", "/", " ", "0"-"9" ])+ "\"" >}TOKEN :{  < NT : "NT" >|   < DT : "DT" >|   < FT : "FT" >|   < DC : "DC" >|   < TP : "TP" >|   < TA : "TA" >|   < TE : "TE" >|   < TB : "TB" >}TestSuiteTrace StartFile() :{	TestSuiteTrace testSuiteTrace = new TestSuiteTrace();}{	(			{			TestTrace testTrace = new TestTrace();			testSuiteTrace.addTestTrace(testTrace);			String testName;		}		testName = NT()		{			testTrace.setName(testName);		}		DT()		(			{				FileTrace fileTrace = new FileTrace();				testTrace.addFileTrace(fileTrace);				String key;				String crc;			}			key = FT()			crc = DC()			{				fileTrace.setKey(key);				fileTrace.setCrc(crc);			}			(			   {			   		BranchTrace trace = null;			   }			   trace = TRACE()			   {					fileTrace.addTrace(trace);			   }			)*		)*	)+	<EOF>	{	  return testSuiteTrace;	}}String NT() :{	String nameTest;	Token  name;}{	< NT >	name = < VAR >	< NUM > [ < NUM > ]	{	  nameTest = name.image;	  int lastIndex = nameTest.lastIndexOf('/');	  lastIndex++;	  nameTest = nameTest.substring(lastIndex).replace("\"","");	  return nameTest;	}}void DT() :{}{  < DT >  < VAR >}String FT() :{  Token address;}{	< FT >	address = < NUM >  {    return new StringBuffer(address.image).reverse().toString();  }}String DC():{	Token address;}{	< DC >	address = < NUM >  {    return new StringBuffer(address.image).reverse().toString();  }}BranchTrace TRACE() :{  BranchTrace trace = null;}{  	trace = TP()	{	   return trace;	}	 |	trace = TA()	{	   return trace;	}	 | 	trace = TB() 	{	   return trace;	}	 |	trace = TE()	{	   return trace;	}}BranchTrace TP() :{  BranchTrace trace = new BranchTrace();  Token number;}{  < TP >  number = < NUM >  {    trace.setType(BranchTraceType.PROC);    trace.setId(new StringBuffer(number.image).reverse().toString());    return trace;  }}BranchTrace TA() :{  BranchTrace trace = new BranchTrace();  Token number;}{  < TA >  number = < NUM >  {    trace.setType(BranchTraceType.CALL);    trace.setId(new StringBuffer(number.image).reverse().toString());    return trace;  }}BranchTrace TB() :{  BranchTrace trace = new BranchTrace();  Token number;}{  < TB >  number = < NUM >  {    trace.setType(BranchTraceType.BLOCK_OR_LOOP);    trace.setId(new StringBuffer(number.image).reverse().toString());    return trace;  }}BranchTrace TE() :{  BranchTrace trace = new BranchTrace();  Token number;}{  < TE >  number = < NUM >  {    trace.setType(BranchTraceType.TODO_TE);    trace.setId(new StringBuffer(number.image).reverse().toString());    return trace;  }}    