VE 3.0d CCOV CMCDC #i3
FC "LBFL_MAIN.C" "D:\\VIEWSNAP\\IC_CDS_A400M\\CDS_A400M_DEV\\COMMON\\LBFL\\SRC\\"
FD 1285925333
TC AP BS BT BI BL CO CC
CE 0 "lbfl_main" "e_lbfl_failure_init_status = ..." 136 136
CE 2 "lbfl_main" "loc_r_lbfl_write_arg. ..." 141 141
BL 0 simple "lbfl_main" /then/then 142 145
AP 0 "lbfl_main" "lbfl_mng_lbfl_internal_error" 150 151
BL 1 simple "lbfl_main" /then/else 148 155
CE 4 "lbfl_main" "loc_b_lbfl_main_fail == 0UL" 159 159
CE 6 "lbfl_main" "loc_ul_error_mng_level_id <  ..." 162 162
CE 8 "lbfl_main" "* ..." 170 170
CE 10 "lbfl_main" "tr_lbfl_global_error_mng[ ..." 171 171
CC 12 2 8 10 3 TXFTFF 2
CE 15 "lbfl_main" "loc_r_lbfl_write_arg. ..." 174 174
CE 17 "lbfl_main" "*loc_pul_fsc_error_detection ..." 182 182
CE 19 "lbfl_main" "loc_b_current_cycle_detectio ..." 200 200
CE 21 "lbfl_main" "loc_puc_tab_cycle[* ..." 201 201
CC 23 2 19 21 3 TXFTFF 2
CE 26 "lbfl_main" "loc_ul_nb_cycl_max > 31" 208 208
CE 28 "lbfl_main" "loc_ul_nb_cycl_max <= 0" 209 209
CE 30 "lbfl_main" "loc_ul_occ_min_nb >  ..." 210 210
CE 32 "lbfl_main" "loc_ul_occ_min_nb <= 0" 211 211
CC 34 4 26 28 30 32 5 TXXXFTXXFFTXFFFTFFFF 4
AP 1 "lbfl_main" "lbfl_mng_lbfl_internal_error" 217 218
BL 2 simple "lbfl_main" /then/then/for/then/for/then/do/then/then 212 222
BL 3 simple "lbfl_main" /then/then/for/then/for/then/do/then/else 225 227
BL 4 simple "lbfl_main" /then/then/for/then/for/then/do/then 202 229
BL 5 simple "lbfl_main" /then/then/for/then/for/then/do/else 232 234
CE 39 "lbfl_main" "loc_b_lbfl_main_fail == 0UL" 238 238
CE 41 "lbfl_main" "*loc_pul_occ_index == 0" 241 241
CE 43 "lbfl_main" "loc_b_current_cycle_detectio ..." 244 244
CE 45 "lbfl_main" "loc_ul_nb_cycl_max == 1" 248 248
AP 2 "lbfl_main" "store_new_occurence" 251 251
BL 6 simple "lbfl_main" /then/then/for/then/for/then/do/then/then/then/then 249 252
AP 3 "lbfl_main" "store_new_occurence" 264 264
BL 7 simple "lbfl_main" /then/then/for/then/for/then/do/then/then/then/else 255 265
BL 8 simple "lbfl_main" /then/then/for/then/for/then/do/then/then/then 245 267
BL 9 simple "lbfl_main" /then/then/for/then/for/then/do/then/then/else 270 272
BL 10 simple "lbfl_main" /then/then/for/then/for/then/do/then/then 242 274
CE 47 "lbfl_main" "loc_puc_tab_cycle[* ..." 277 277
CE 49 "lbfl_main" "loc_b_current_cycle_detectio ..." 280 280
BL 11 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/then/then 281 287
AP 4 "lbfl_main" "send_disappeared_queuing_message" 296 298
BL 12 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/then/else 290 302
BL 13 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/then 278 304
CE 51 "lbfl_main" "loc_puc_tab_cycle[* ..." 313 313
CE 53 "lbfl_main" "loc_b_current_cycle_detectio ..." 316 316
AP 5 "lbfl_main" "store_new_occurence" 318 318
CE 55 "lbfl_main" "loc_b_lbfl_main_fail == 0UL" 323 323
AP 6 "lbfl_main" "shift_tab_cycle" 325 325
BL 14 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/then/then 324 326
BL 15 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/then/else 329 332
BL 16 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/then 317 334
CE 57 "lbfl_main" "*loc_pul_occ_index == 1" 341 341
AP 7 "lbfl_main" "send_disappeared_queuing_message" 347 349
BL 17 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/else/then 342 351
AP 8 "lbfl_main" "shift_tab_cycle" 359 359
CE 59 "lbfl_main" "loc_b_lbfl_main_fail == 0UL" 363 363
AP 9 "lbfl_main" "send_disappeared_queuing_message" 365 367
BL 18 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/else/else/then 364 368
BL 19 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/else/else/else 371 374
BL 20 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/else/else 354 376
BL 21 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then/else 337 378
BL 22 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/then 314 380
CE 61 "lbfl_main" "loc_b_current_cycle_detectio ..." 385 385
AP 10 "lbfl_main" "store_new_occurence" 391 391
BL 23 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/else/then 386 392
BL 24 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/else/else 395 398
BL 25 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else/else 383 400
BL 26 simple "lbfl_main" /then/then/for/then/for/then/do/then/else/else 308 402
BL 27 simple "lbfl_main" /then/then/for/then/for/then/do/then/else 277 402
BL 28 simple "lbfl_main" /then/then/for/then/for/then/do/then 239 404
BL 29 simple "lbfl_main" /then/then/for/then/for/then/do/else 407 410
CE 63 "lbfl_main" "loc_b_lbfl_main_fail == 0UL" 414 414
BL 30 simple "lbfl_main" /then/then/for/then/for/then/do/then 415 417
BL 31 simple "lbfl_main" /then/then/for/then/for/then/do/else 420 422
BL 32 simple "lbfl_main" /then/then/for/then/for/then/do 186 427
CE 65 "lbfl_main" "loc_r_lbfl_write_arg. ..." 427 427
CE 67 "lbfl_main" "loc_ul_error_nb_already_foun ..." 428 428
CC 69 2 65 67 3 TTTFFX 1
BL 33 logical "lbfl_main" /then/then/for/then/for/then/do/1 185 428
BL 34 logical "lbfl_main" /then/then/for/then/for/then/do/2+ 185 428
BL 35 simple "lbfl_main" /then/then/for/then/for/then 183 429
BL 36 simple "lbfl_main" /then/then/for/then/for/else 432 435
BL 37 simple "lbfl_main" /then/then/for/then/for 175 440
BL 38 logical "lbfl_main" /then/then/for/then/for/0 174 440
BL 39 logical "lbfl_main" /then/then/for/then/for/1 174 440
BL 40 logical "lbfl_main" /then/then/for/then/for/2+ 174 440
BL 41 simple "lbfl_main" /then/then/for/then 172 442
BL 42 simple "lbfl_main" /then/then/for/else 445 448
BL 43 simple "lbfl_main" /then/then/for 163 451
BL 44 logical "lbfl_main" /then/then/for/0 162 451
BL 45 logical "lbfl_main" /then/then/for/1 162 451
BL 46 logical "lbfl_main" /then/then/for/2+ 162 451
BL 47 simple "lbfl_main" /then/then 160 453
BL 48 simple "lbfl_main" /then/else 456 459
BL 49 simple "lbfl_main" /then 137 461
BL 50 simple "lbfl_main" /else 464 467
BL 51 simple "lbfl_main" / 100 472
CE 72 "store_new_occurence" "par_pr_error_confirm-> ..." 508 508
AP 11 "store_new_occurence" "lbfl_mng_lbfl_internal_error" 513 514
BL 52 simple "store_new_occurence" /then 509 518
BL 53 simple "store_new_occurence" /else 521 525
BL 54 simple "store_new_occurence" / 499 529
CE 74 "shift_tab_cycle" "par_pr_error_confirm-> ..." 569 569
CE 76 "shift_tab_cycle" "loc_ul_occ_index <  ..." 578 578
BL 55 simple "shift_tab_cycle" /then/for 579 581
BL 56 logical "shift_tab_cycle" /then/for/0 578 581
BL 57 logical "shift_tab_cycle" /then/for/1 578 581
BL 58 logical "shift_tab_cycle" /then/for/2+ 578 581
BL 59 simple "shift_tab_cycle" /then 570 588
AP 12 "shift_tab_cycle" "lbfl_mng_lbfl_internal_error" 596 597
BL 60 simple "shift_tab_cycle" /else 591 601
BL 61 simple "shift_tab_cycle" / 561 604
CE 78 "send_disappeared_queuing_message" "par_pr_error_confirm-> ..." 636 636
CE 80 "send_disappeared_queuing_message" "par_pr_error_confirm-> ..." 637 637
CC 82 2 78 80 3 TTTFFX 1
CE 85 "send_disappeared_queuing_message" "par_pr_lbfl_write_arg-> ..." 646 646
AP 13 "send_disappeared_queuing_message" "lbfl_get_failure_report_id" 655 655
AP 14 "send_disappeared_queuing_message" "SEND_QUEUING_MESSAGE" 655 659
CE 87 "send_disappeared_queuing_message" "loc_e_return_code != NO_ERROR" 662 662
AP 15 "send_disappeared_queuing_message" "lbfl_mng_lbfl_internal_error" 665 666
BL 62 simple "send_disappeared_queuing_message" /then/then/then 663 668
AP 16 "send_disappeared_queuing_message" "lbfl_write_debug" 674 674
BL 63 simple "send_disappeared_queuing_message" /then/then/else 671 675
BL 64 simple "send_disappeared_queuing_message" /then/then 647 677
BL 65 simple "send_disappeared_queuing_message" /then/else 680 682
BL 66 simple "send_disappeared_queuing_message" /then 639 684
BL 67 simple "send_disappeared_queuing_message" /else 687 689
BL 68 simple "send_disappeared_queuing_message" / 632 693
DC 274707200
@RIK
  TOKEN="CCOV CMCDC"
  SRC="LBFL_MAIN.C"
  DIR="D:\VIEWSNAP\IC_CDS_A400M\CDS_A400M_DEV\COMMON\LBFL\SRC\"
  DATE=1285925333
  CHECKSUM=274707200
  SUMS
   ("&Functions",
    "-&Exits",
    "Functions and exits"),
   ("&Calls"=10),
   ("Statement &blocks"=20,
    "-&Implicit blocks"=21,
    "Decisions"=20+21,
    "&Loops"=22),
   ("Basic &conditions"=30,
    "&Modified conditions"=31,
    "M&ultiple conditions"=32)
  ERRORS
    32="a source object was not linked with the right runtime object (check instrumentation mode)",
    49="a composition of conditions evaluates in an unexpected result, contact your vendor",
    50="a composition of conditions reached with an unexpected input vector, contact your vendor"
NODE TYPE=FILE NAME="LBFL_MAIN.C"@@COMMENT@/******************************************************************************
 **
 **                                   ==============
 **                                   IDENTIFICATION
 **                                   ==============
 **
 **
 **
 **  Filename            : lbfl_main.c
 **
 **  Author/ Company     : B.Palomino / T.A.V.
 **
 **  Creation date       : 15/04/2003
 **
 **  Copyright statement : Copyright (C); 2003
 **                        THALES Avionics
 **
 **  Module description  : To cyclically update the failure management resources
 **				
 **
 *****************************************************************************/@/COMMENT@


@COMMENT@/******************************************************************************
 **                           Project specific includes
 *****************************************************************************/@/COMMENT@

@COMMENT@/* MACS TYPES */@/COMMENT@
@COMMENT@#include "COD_A653_API_COMMON.h"@/COMMENT@


@COMMENT@/* SA TYPES */@/COMMENT@
@COMMENT@#include "apsw_basic_types_c.h"@/COMMENT@

@COMMENT@/* PLATFROM TYPES */@/COMMENT@


@COMMENT@/* CALLED CSU TYPES */@/COMMENT@
@COMMENT@#include "lbfl_init.h"@/COMMENT@
@COMMENT@#include "lbfl_failure_report_ifc.h"@/COMMENT@
@COMMENT@#include "lbfl_fsc_error_ifc.h"@/COMMENT@
@COMMENT@#include "lbfl_component_id_ifc.h"@/COMMENT@
@COMMENT@#include "lbfl_fsc_error_desc_config.h"@/COMMENT@
@COMMENT@#include "lbfl_partition_error_desc_config.h"@/COMMENT@


@COMMENT@/* CALLED CSU PROTOTYPES */@/COMMENT@
@COMMENT@#include "lbfl_get_failure_report_id.p"@/COMMENT@
@COMMENT@#include "lbfl_write.p"@/COMMENT@
@COMMENT@#include "lbfl_write_debug.p"@/COMMENT@
@COMMENT@#include "lbfl_mng_lbfl_internal_error.p"@/COMMENT@



@COMMENT@/******************************************************************************
 **                           Module specific includes
 *****************************************************************************/@/COMMENT@
@COMMENT@#include "lbfl_main.p"@/COMMENT@

@COMMENT@/******************************************************************************
 **                           Local file declarations
 *****************************************************************************/@/COMMENT@

static T_boolean store_new_occurence (	T_lbfl_r_error_confirm		*par_pr_error_confirm,
								 	T_lbfl_r_lbfl_write_arg		*par_pr_lbfl_main_fail_write_arg,
									T_lbfl_r_lbfl_write_arg		*par_pr_lbfl_write_arg);

static T_boolean shift_tab_cycle (T_lbfl_r_error_confirm		*par_pr_error_confirm,
							 T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_main_fail_write_arg,
							 T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg,
							 T_uint32					par_line);

static void send_disappeared_queuing_message (	T_lbfl_r_error_confirm		*par_pr_error_confirm,
												T_lbfl_r_lbfl_write_arg		*par_pr_lbfl_write_arg,
												T_lbfl_r_lbfl_write_arg		*par_pr_lbfl_main_fail_write_arg );




@COMMENT@/*When a first occurence occurs, the cycle 1 is written at the index : index_occ = 0 */@/COMMENT@
@COMMENT@/*1 is added to the index_occ => K_FIRST_OCCURENCE_FOUND = 1 */@/COMMENT@
@COMMENT@/*The index_occ point to the free index in order to store the current cycle 
  until the coming of a new occurence.*/@/COMMENT@
@COMMENT@#define K_FIRST_OCCURENCE_FOUND  1@/COMMENT@
@COMMENT@#define K_MAX_CYCLE_NB_EQUAL_TO_ONE  0x31@/COMMENT@


@COMMENT@/******************************************************************************
 ***** 
 ***** void lbfl_main	
 ***** 
 ***** Description : manage cyclically the errors mng arrays
 ***** 
 ***** Input : None
 ***** 
 ***** Output : None
 ***** 
 *****************************************************************************/@/COMMENT@
void @NODE TYPE=FUNCTION NAME="lbfl_main"@@LINK NAME="lbfl_main"@lbfl_main	(void)						
@BRANCH MARK=TB ID=51 SUM=20@{
	T_lbfl_r_lbfl_write_arg				loc_r_lbfl_write_arg = {K_LBFL_E_WRITE_BITE, K_LBFL_E_PARTITION_LEVEL, K_NULL_PTR, K_NULL_PTR, 0, 0, 0, K_LBFL_E_LBFL_MAIN_CPT_ID, 0, 0, 0, 0, 0, 0};	
	T_uint32							loc_ul_current_process_id;
	T_uint32							loc_ul_error_number;
	T_uint32							loc_ul_component_number;
	T_uint32							*loc_pul_level_error_detection_nb;
	T_uint32							*loc_pul_fsc_error_detection_nb;
	T_uint32							*loc_pul_occ_index;
	T_uchar								*loc_puc_tab_cycle;
	T_boolean							loc_b_current_cycle_detection;
	T_uint32							loc_ul_nb_cycl_max;
	T_uint32							loc_ul_occ_min_nb;
	T_lbfl_e_error_mng_level			loc_ul_error_mng_level_id;
	T_lbfl_pr_error_confirm				loc_pr_error_confirm;
	T_lbfl_r_lbfl_write_arg				loc_r_lbfl_main_fail_write_arg = {K_LBFL_E_WRITE_DEBUG_OS, K_LBFL_E_PARTITION_LEVEL, K_NULL_PTR, K_NULL_PTR, K_LBFL_E_LBFL_FSC_ID, K_LBFL_E_LBFL_FSC_ID, 0, K_LBFL_E_LBFL_MAIN_CPT_ID, 0, 0, 0, 0, 0, 0};
	T_uchar								loc_tuc_ctxt_area[MAX_ENGINEERING_DATA_SIZE];
	T_uint32							loc_ul_error_nb_already_found;
	T_boolean							loc_b_lbfl_main_fail = K_BOOL_FALSE;
	
	@COMMENT@/* TAKE INTO ACCOUNT THE CURENT PROCESS_ID DATA, THIS DATA IS UPDATED BY THE CALLING PROCESS */@/COMMENT@
	loc_ul_current_process_id			= *r_lbfl_partition_error_config.pr_process_config->pl_process_id;

	@COMMENT@/* INITIALIZE THE PROCESS_ID / PR_ERROR_MNG / PR_ERROR_CONFIG FIELDS, PART OF THE WRITE ARG RECORD */@/COMMENT@
	@COMMENT@/* IN CASE OF INTERNAL ERROR IN LBFL_MAIN */@/COMMENT@
	loc_r_lbfl_main_fail_write_arg.ul_process_id		= loc_ul_current_process_id;
	loc_r_lbfl_main_fail_write_arg.pr_error_mng			= pr_lbfl_error_mng;
	loc_r_lbfl_main_fail_write_arg.pr_error_config		= ((T_lbfl_r_error_config	*) TR_LBFL_FSC_ERR_CONFIG);
	loc_r_lbfl_main_fail_write_arg.puc_ctxt_data_area	= loc_tuc_ctxt_area;
	loc_r_lbfl_main_fail_write_arg.ul_error_config_table_fsc_id =	(loc_ul_current_process_id << 5) + K_LBFL_E_LBFL_FSC_ID;
	loc_r_lbfl_main_fail_write_arg.ul_error_localisation_fsc_id =	(loc_ul_current_process_id << 5) + K_LBFL_E_LBFL_FSC_ID;

	loc_r_lbfl_write_arg.puc_ctxt_data_area	= loc_tuc_ctxt_area;
    loc_r_lbfl_write_arg.pr_error_config = ((T_lbfl_r_error_config	*) TR_LBFL_FSC_ERR_CONFIG) + K_LBFL_E_FSC_WARNING_ERR_NONE;


@COMMENT@/*	IF FAILURE PROCESSING INITIALIZATION IS PERFORMED */@/COMMENT@
    @DECISION SUM=20+21 ID=49|50@if (@POPUP@e_lbfl_failure_init_status == K_LBFL_E_INIT_ENDED@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=0 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=1 SUM=30@False@/BRANCH@@/POPUP@)
    @BRANCH MARK=TB ID=49 SUM=20@{
		loc_r_lbfl_write_arg.ul_process_id = tr_lbfl_global_error_mng[loc_ul_current_process_id][K_LBFL_E_PARTITION_LEVEL].ul_process_id;

@COMMENT@/*		IF process_id uncorrect => uncorrect load during the init phase */@/COMMENT@							
		@DECISION SUM=20+21 ID=0|1@if (@POPUP@loc_r_lbfl_write_arg.ul_process_id == loc_ul_current_process_id@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=2 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=3 SUM=30@False@/BRANCH@@/POPUP@)
		@BRANCH MARK=TB ID=0 SUM=20@{
@COMMENT@/*			NOTHING TO DO */@/COMMENT@
			;
		}@/BRANCH@
@COMMENT@/*		ELSE */@/COMMENT@
		@BRANCH MARK=TB ID=1 SUM=20@else
		{
			@COMMENT@/* PROCESS AN INTERNAL ERROR */@/COMMENT@
			@BRANCH MARK=TA ID=0 SUM=10@@JUMP NAME="lbfl_mng_lbfl_internal_error"@lbfl_mng_lbfl_internal_error@/JUMP@  
				(K_LBFL_E_FSC_WARNING_ERR_PROCESS_ID, __LINE__, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg, K_BOOL_TRUE)@/BRANCH@;
			
			@COMMENT@/* SET BYPASS */@/COMMENT@
			loc_b_lbfl_main_fail = K_BOOL_TRUE;
		}@/BRANCH@@/DECISION@
		@COMMENT@/* ENDIF */@/COMMENT@
		
		@COMMENT@/* TEST IF THE BYPASS LBFL_MAIN FLAG ISN'T SET  */@/COMMENT@
		@DECISION SUM=20+21 ID=47|48@if (@POPUP@loc_b_lbfl_main_fail == @ALT@K_BOOL_FALSE@-ALT@0UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=4 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=5 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
		@BRANCH MARK=TB ID=47 SUM=20@{
@COMMENT@/*		DO FOR ALL LEVELS OF ERROR MNG ARRAYS */@/COMMENT@
		@POPUP@for@-POPUP@loop branches :
@BRANCH MARK=TB ID=44 SUM=22@  0 loop@/BRANCH@
@BRANCH MARK=TB ID=45 SUM=22@  1 loop@/BRANCH@
@BRANCH MARK=TB ID=46 SUM=22@  2 loops or more@/BRANCH@@/POPUP@ (loc_ul_error_mng_level_id = 0; @POPUP@loc_ul_error_mng_level_id < K_LBFL_E_ERROR_MNG_LEVEL_MAX_NB@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=6 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=7 SUM=30@False@/BRANCH@@/POPUP@; loc_ul_error_mng_level_id++ )
		@BRANCH MARK=TB ID=43 SUM=20@{
			loc_ul_error_number =				tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][loc_ul_error_mng_level_id].ul_error_number;
			loc_ul_component_number =			tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][loc_ul_error_mng_level_id].ul_component_number;
			loc_pul_level_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][loc_ul_error_mng_level_id].ul_level_error_detection_nb;
			loc_pul_fsc_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][loc_ul_error_mng_level_id].tul_fsc_error_detection_nb[0];

@COMMENT@/*			IF THERE IS AN ERROR AT THIS LEVEL WAITING FOR CONFIRMATION MANAGEMENT  */@/COMMENT@
				@DECISION SUM=20+21 ID=41|42@if (@POPUP@(@POPUP@*loc_pul_level_error_detection_nb > 0@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=8 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=9 SUM=30@False@/BRANCH@@/POPUP@) ||
					(@POPUP@tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][loc_ul_error_mng_level_id].b_current_cycle_error_detection@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=10 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=11 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions :
  @BRANCH MARK=TE ID=12&14 SUM=31@*loc_pul_level_error_detection_nb > 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=12 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=14 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=13&14 SUM=31@tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id] ...@/BRANCH@ needs
      @BRANCH MARK=TE ID=13 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=14 SUM=32@FF@/BRANCH@=F@/POPUP@ )
			@BRANCH MARK=TB ID=41 SUM=20@{			
@COMMENT@/*				DO FOR ALL COMPONENTS OF THIS ERROR MNG ARRAY */@/COMMENT@
				@POPUP@for@-POPUP@loop branches :
@BRANCH MARK=TB ID=38 SUM=22@  0 loop@/BRANCH@
@BRANCH MARK=TB ID=39 SUM=22@  1 loop@/BRANCH@
@BRANCH MARK=TB ID=40 SUM=22@  2 loops or more@/BRANCH@@/POPUP@ ( loc_r_lbfl_write_arg.ul_error_localisation_fsc_id = 0; @POPUP@loc_r_lbfl_write_arg.ul_error_localisation_fsc_id <loc_ul_component_number@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=15 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=16 SUM=30@False@/BRANCH@@/POPUP@; loc_r_lbfl_write_arg.ul_error_localisation_fsc_id++ )
				@BRANCH MARK=TB ID=37 SUM=20@{
						@COMMENT@/* Reset the current counter of nb of errors present in the part of scan of */@/COMMENT@
						@COMMENT@/* FSC CONFIRMATION MANAGEMENT ARRAY already performed */@/COMMENT@
					loc_ul_error_nb_already_found = 0;
					loc_r_lbfl_write_arg.ul_fsc_error_id = 0;

					@COMMENT@/*	IF THERE IS AT LEAST ONE ERROR IN THIS FSC CONFIRMATION MANAGEMENT ARRAY */@/COMMENT@
					@DECISION SUM=20+21 ID=35|36@if (@POPUP@*loc_pul_fsc_error_detection_nb != 0@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=17 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=18 SUM=30@False@/BRANCH@@/POPUP@)
					@BRANCH MARK=TB ID=35 SUM=20@{
	@COMMENT@/*					DO FOR ALL ERROR ID OF THIS COMPONENT */@/COMMENT@
						@POPUP@do@-POPUP@loop branches :
@BRANCH MARK=TB ID=33 SUM=22@  1 loop@/BRANCH@
@BRANCH MARK=TB ID=34 SUM=22@  2 loops or more@/BRANCH@@/POPUP@ 
						@BRANCH MARK=TB ID=32 SUM=20@{
	@COMMENT@/*						INITIALIZE local variables */@/COMMENT@
                                loc_r_lbfl_write_arg.pr_error_mng = 
                                    (tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][loc_ul_error_mng_level_id].pr_error_mng +
                                    loc_r_lbfl_write_arg.ul_error_localisation_fsc_id * loc_ul_error_number) + 
                                    loc_r_lbfl_write_arg.ul_fsc_error_id;
							loc_pr_error_confirm = &loc_r_lbfl_write_arg.pr_error_mng->r_error_confirm;
							loc_pul_occ_index = &loc_pr_error_confirm->ul_occ_index;
							loc_puc_tab_cycle = loc_pr_error_confirm->tuc_tab_cycle;
							loc_b_current_cycle_detection = loc_pr_error_confirm->b_current_cycle_detection;
							loc_ul_nb_cycl_max = loc_pr_error_confirm->ul_nb_cycl_max;
							loc_ul_occ_min_nb = loc_pr_error_confirm->ul_occ_min_nb;

							@COMMENT@/* An error has been detected by LBFL_MNG or is already in management */@/COMMENT@
                                @DECISION SUM=20+21 ID=4|5@if (@POPUP@(@POPUP@loc_b_current_cycle_detection == @ALT@K_BOOL_TRUE@-ALT@1UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=19 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=20 SUM=30@False@/BRANCH@@/POPUP@@/ALT@) ||
                                    (@POPUP@loc_puc_tab_cycle [*loc_pul_occ_index] > 0@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=21 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=22 SUM=30@False@/BRANCH@@/POPUP@	)@-POPUP@modified and multiple conditions :
  @BRANCH MARK=TE ID=23&25 SUM=31@loc_b_current_cycle_detection == 1UL@/BRANCH@ needs
      @BRANCH MARK=TE ID=23 SUM=32@TX@/BRANCH@=T,@BRANCH MARK=TE ID=25 SUM=32@FF@/BRANCH@=F
  @BRANCH MARK=TE ID=24&25 SUM=31@loc_puc_tab_cycle[*loc_pul_occ_index] > 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=24 SUM=32@FT@/BRANCH@=T,@BRANCH MARK=TE ID=25 SUM=32@FF@/BRANCH@=F@/POPUP@) 
							@BRANCH MARK=TB ID=4 SUM=20@{
								@COMMENT@/* Update the current counter of errors detected 
								/* in the part of scan, already performed of FSC CONFIRMATION MANAGEMENT ARRAY */@/COMMENT@
								loc_ul_error_nb_already_found++;

								@COMMENT@/*	Control on boundaries	*/@/COMMENT@
                                    @DECISION SUM=20+21 ID=2|3@if	(@POPUP@(@POPUP@loc_ul_nb_cycl_max > @ALT@K_LBFL_MAX_CYCLE_NB_FOR_ERR_CONFIRM@-ALT@31@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=26 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=27 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)	||
										(@POPUP@loc_ul_nb_cycl_max <= 0@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=28 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=29 SUM=30@False@/BRANCH@@/POPUP@)									||
										(@POPUP@loc_ul_occ_min_nb > loc_ul_nb_cycl_max@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=30 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=31 SUM=30@False@/BRANCH@@/POPUP@)					||
                                        (@POPUP@loc_ul_occ_min_nb <= 0@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=32 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=33 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions :
  @BRANCH MARK=TE ID=34&38 SUM=31@loc_ul_nb_cycl_max > 31@/BRANCH@ needs
      @BRANCH MARK=TE ID=34 SUM=32@TXXX@/BRANCH@=T,@BRANCH MARK=TE ID=38 SUM=32@FFFF@/BRANCH@=F
  @BRANCH MARK=TE ID=35&38 SUM=31@loc_ul_nb_cycl_max <= 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=35 SUM=32@FTXX@/BRANCH@=T,@BRANCH MARK=TE ID=38 SUM=32@FFFF@/BRANCH@=F
  @BRANCH MARK=TE ID=36&38 SUM=31@loc_ul_occ_min_nb > loc_ul_nb_cycl_max@/BRANCH@ needs
      @BRANCH MARK=TE ID=36 SUM=32@FFTX@/BRANCH@=T,@BRANCH MARK=TE ID=38 SUM=32@FFFF@/BRANCH@=F
  @BRANCH MARK=TE ID=37&38 SUM=31@loc_ul_occ_min_nb <= 0@/BRANCH@ needs
      @BRANCH MARK=TE ID=37 SUM=32@FFFT@/BRANCH@=T,@BRANCH MARK=TE ID=38 SUM=32@FFFF@/BRANCH@=F@/POPUP@)
								@BRANCH MARK=TB ID=2 SUM=20@{
									loc_r_lbfl_main_fail_write_arg.ul_ctxt_data_1 =  loc_ul_nb_cycl_max;
									loc_r_lbfl_main_fail_write_arg.ul_ctxt_data_2 =  loc_ul_occ_min_nb;

                                        @COMMENT@/* MANAGE LBFL_MNG INTERNAL ERROR */@/COMMENT@
									@BRANCH MARK=TA ID=1 SUM=10@@JUMP NAME="lbfl_mng_lbfl_internal_error"@lbfl_mng_lbfl_internal_error@/JUMP@  
                                            (K_LBFL_E_FSC_OUT_OF_BOUNDARY, __LINE__, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg, K_BOOL_TRUE)@/BRANCH@;
                                        
                                        @COMMENT@/* SET BYPASS */@/COMMENT@
                                        loc_b_lbfl_main_fail = K_BOOL_TRUE;
								}@/BRANCH@
								@COMMENT@/* ELSE */@/COMMENT@
								@BRANCH MARK=TB ID=3 SUM=20@else
								{
									@COMMENT@/* Nothing to do */@/COMMENT@
								}@/BRANCH@@/DECISION@
								@COMMENT@/* ENDIF */@/COMMENT@
							}@/BRANCH@
							@COMMENT@/* ELSE */@/COMMENT@
							@BRANCH MARK=TB ID=5 SUM=20@else
							{
								@COMMENT@/* Nothing to do */@/COMMENT@
							}@/BRANCH@@/DECISION@
							@COMMENT@/*ENDIF*/@/COMMENT@

                                @COMMENT@/* TEST IF THE BYPASS LBFL_MAIN FLAG ISN'T SET  */@/COMMENT@
                                @DECISION SUM=20+21 ID=28|29@if (@POPUP@loc_b_lbfl_main_fail == @ALT@K_BOOL_FALSE@-ALT@0UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=39 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=40 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
                                @BRANCH MARK=TB ID=28 SUM=20@{
	@COMMENT@/*						IF this error is not, already, in confirmation management*/@/COMMENT@
							@DECISION SUM=20+21 ID=10|27@if	(@POPUP@*loc_pul_occ_index == 0@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=41 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=42 SUM=30@False@/BRANCH@@/POPUP@)
							@BRANCH MARK=TB ID=10 SUM=20@{
                                        @COMMENT@/* An error has been detected during this current cycle by LBFL_MNG */@/COMMENT@
								@DECISION SUM=20+21 ID=8|9@if (@POPUP@loc_b_current_cycle_detection == @ALT@K_BOOL_TRUE@-ALT@1UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=43 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=44 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
								@BRANCH MARK=TB ID=8 SUM=20@{
									@COMMENT@/* confirmation in one cycle : this case requires a specific treatment 
									/* incompatible with the normal tab_cycle management */@/COMMENT@
									@DECISION SUM=20+21 ID=6|7@if	(@POPUP@loc_ul_nb_cycl_max == 1@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=45 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=46 SUM=30@False@/BRANCH@@/POPUP@)
									@BRANCH MARK=TB ID=6 SUM=20@{
										loc_puc_tab_cycle [*loc_pul_occ_index] = K_MAX_CYCLE_NB_EQUAL_TO_ONE;
                                                loc_b_lbfl_main_fail = @BRANCH MARK=TA ID=2 SUM=10@@JUMP NAME="store_new_occurence"@store_new_occurence@/JUMP@ (loc_pr_error_confirm, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg)@/BRANCH@;
									}@/BRANCH@
	@COMMENT@/*								ELSE */@/COMMENT@
									@BRANCH MARK=TB ID=7 SUM=20@else
									{
	@COMMENT@/*									The value of the cycle for this occurence is memorized,*/@/COMMENT@
	@COMMENT@/*									It represents the first cycle of a new confirmation management*/@/COMMENT@
	@COMMENT@/*									loc_tuc_tab_cycle[loc_ul_occ_index] = 1;*/@/COMMENT@
	@COMMENT@/*									When a new occurence is detected : */@/COMMENT@
	@COMMENT@/*									the counter cycle is fixed to the cycle value of this occurence */@/COMMENT@
	@COMMENT@/*									and the index is incremented to a new line to store the cycle number */@/COMMENT@
	@COMMENT@/*									and this until a new occurence */@/COMMENT@
										loc_puc_tab_cycle [*loc_pul_occ_index] = 1;
                                                loc_b_lbfl_main_fail = @BRANCH MARK=TA ID=3 SUM=10@@JUMP NAME="store_new_occurence"@store_new_occurence@/JUMP@ (loc_pr_error_confirm, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg)@/BRANCH@;
									}@/BRANCH@@/DECISION@
                                            @COMMENT@/* ENDIF */@/COMMENT@
								}@/BRANCH@
	@COMMENT@/*							ELSE */@/COMMENT@
								@BRANCH MARK=TB ID=9 SUM=20@else
								{
									@COMMENT@/* Nothing to do */@/COMMENT@
								}@/BRANCH@@/DECISION@
                                        @COMMENT@/* ENDIF */@/COMMENT@
							}@/BRANCH@
	@COMMENT@/*						Specific case : confirmation in one cycle : nb_cycle_max = 1 */@/COMMENT@
	@COMMENT@/*						ELSE IF */@/COMMENT@
							@BRANCH MARK=TB ID=27 SUM=20@else @DECISION SUM=20+21 ID=13|26@if (@POPUP@loc_puc_tab_cycle [*loc_pul_occ_index] == @ALT@K_MAX_CYCLE_NB_EQUAL_TO_ONE@-ALT@0x31@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=47 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=48 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
							@BRANCH MARK=TB ID=13 SUM=20@{
                                        @COMMENT@/* An error has been detected during this current cycle by LBFL_MNG */@/COMMENT@
								@DECISION SUM=20+21 ID=11|12@if (@POPUP@loc_b_current_cycle_detection == @ALT@K_BOOL_TRUE@-ALT@1UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=49 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=50 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
								@BRANCH MARK=TB ID=11 SUM=20@{
									@COMMENT@/* NOTHING TO DO */@/COMMENT@
                                            @COMMENT@/* THE ERROR IS STILL PRESENT */@/COMMENT@
									@COMMENT@/* CONFIRMATION STATUS IS MANAGED BY LBFL_MNG THROUGH LBFL_FILT CALL */@/COMMENT@
									;
	@COMMENT@/*							The DISAPPEARANCE of this error (nb cycle max = 1) shall be sent to CMS as soon as the error is no more transmitted to LBFL */@/COMMENT@
								}@/BRANCH@
	@COMMENT@/*							ELSE */@/COMMENT@
								@BRANCH MARK=TB ID=12 SUM=20@else
								{
									*loc_pul_occ_index = 0;
									loc_puc_tab_cycle [*loc_pul_occ_index] = 0;
									(*loc_pul_level_error_detection_nb) --;
									(*loc_pul_fsc_error_detection_nb) --;
                                            
									@BRANCH MARK=TA ID=4 SUM=10@@JUMP NAME="send_disappeared_queuing_message"@send_disappeared_queuing_message@/JUMP@ (	loc_pr_error_confirm,
																		&loc_r_lbfl_write_arg,
																		&loc_r_lbfl_main_fail_write_arg )@/BRANCH@;

		
									loc_pr_error_confirm->e_error_state = K_LBFL_E_NOT_APPEARED;
								}@/BRANCH@@/DECISION@
	@COMMENT@/*							ENDIF*/@/COMMENT@
							}@/BRANCH@
	@COMMENT@/*						ELSE */@/COMMENT@
							@COMMENT@/* An error is in confirmation process and its nb of cycle max is greater to one */@/COMMENT@
							@BRANCH MARK=TB ID=26 SUM=20@else
							{
								@COMMENT@/*	update the counter of cycle */@/COMMENT@
								loc_puc_tab_cycle [*loc_pul_occ_index]++;

	@COMMENT@/*							IF we overstep the bounds of the max of cycle  = nb cycl max + 1 */@/COMMENT@
								@DECISION SUM=20+21 ID=22|25@if (@POPUP@loc_puc_tab_cycle [*loc_pul_occ_index] > loc_ul_nb_cycl_max@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=51 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=52 SUM=30@False@/BRANCH@@/POPUP@)
								@BRANCH MARK=TB ID=22 SUM=20@{
                                            @COMMENT@/* An error has been detected during this current cycle by LBFL_MNG */@/COMMENT@
									@DECISION SUM=20+21 ID=16|21@if (@POPUP@loc_b_current_cycle_detection == @ALT@K_BOOL_TRUE@-ALT@1UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=53 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=54 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
									@BRANCH MARK=TB ID=16 SUM=20@{
                                                loc_b_lbfl_main_fail = @BRANCH MARK=TA ID=5 SUM=10@@JUMP NAME="store_new_occurence"@store_new_occurence@/JUMP@ (loc_pr_error_confirm, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg)@/BRANCH@;
                                                @COMMENT@/* The first occurence of error shall be taken out the list of error occurences */@/COMMENT@
                                                @COMMENT@/* the rest of the occurences shall be shifted */@/COMMENT@
                                                @COMMENT@/* the case :loc_ul_index_occ equal to 1 could not append in this case because */@/COMMENT@
                                                @COMMENT@/* at least, after preceeding store_new_occurence, the loc_ul_occ_index is at least equal to 2 */@/COMMENT@
                                                @DECISION SUM=20+21 ID=14|15@if (@POPUP@loc_b_lbfl_main_fail == @ALT@K_BOOL_FALSE@-ALT@0UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=55 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=56 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
                                                @BRANCH MARK=TB ID=14 SUM=20@{
                                                    loc_b_lbfl_main_fail = @BRANCH MARK=TA ID=6 SUM=10@@JUMP NAME="shift_tab_cycle"@shift_tab_cycle@/JUMP@ (loc_pr_error_confirm, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg, __LINE__)@/BRANCH@;
                                                }@/BRANCH@
                                                @COMMENT@/* ELSE */@/COMMENT@
                                                @BRANCH MARK=TB ID=15 SUM=20@else								
                                                {
                                                    @COMMENT@/* Nothing to do */@/COMMENT@
                                                    ;
                                                }@/BRANCH@@/DECISION@
                                                @COMMENT@/* ENDIF*/@/COMMENT@
									}@/BRANCH@
		@COMMENT@/*							ELSE */@/COMMENT@
									@BRANCH MARK=TB ID=21 SUM=20@else								
									{
	@COMMENT@/*									If only one error at the first cycle has been stored in nb_cycl_max */@/COMMENT@
	@COMMENT@/*									all confirmation management on this error could be suppressed 
	/*									and a waiting of a new confirmation shall be initialized */@/COMMENT@
										@DECISION SUM=20+21 ID=17|20@if (@POPUP@*loc_pul_occ_index == @ALT@K_FIRST_OCCURENCE_FOUND@-ALT@1@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=57 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=58 SUM=30@False@/BRANCH@@/POPUP@@/ALT@) 
										@BRANCH MARK=TB ID=17 SUM=20@{
											*loc_pul_occ_index = 0;
											loc_puc_tab_cycle [*loc_pul_occ_index] = 0;
											(*loc_pul_level_error_detection_nb) --;
											(*loc_pul_fsc_error_detection_nb) --;
											@BRANCH MARK=TA ID=7 SUM=10@@JUMP NAME="send_disappeared_queuing_message"@send_disappeared_queuing_message@/JUMP@ (	loc_pr_error_confirm,
																				&loc_r_lbfl_write_arg,
																				&loc_r_lbfl_main_fail_write_arg )@/BRANCH@;
											loc_pr_error_confirm->e_error_state = K_LBFL_E_NOT_APPEARED;
										}@/BRANCH@
										@COMMENT@/*$ ELSE */@/COMMENT@
										@BRANCH MARK=TB ID=20 SUM=20@else
										{
		@COMMENT@/*									The first occurence of error shall be taken out the list of error occurences*/@/COMMENT@
		@COMMENT@/*									the rest of the occurences shall be shifted */@/COMMENT@
		@COMMENT@/*									constraint of shift_tab_cycle use : */@/COMMENT@
		@COMMENT@/*									at least, the loc_ul_index_occ is at least equal to 2	*/@/COMMENT@
                                                    loc_b_lbfl_main_fail = @BRANCH MARK=TA ID=8 SUM=10@@JUMP NAME="shift_tab_cycle"@shift_tab_cycle@/JUMP@ (loc_pr_error_confirm, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg, __LINE__)@/BRANCH@;

		@COMMENT@/*									IF the number of occurence is inferior to the number min of occurence */@/COMMENT@
		@COMMENT@/*									to be considered as a confirmed error => send disappear message */@/COMMENT@
                                                    @DECISION SUM=20+21 ID=18|19@if (@POPUP@loc_b_lbfl_main_fail == @ALT@K_BOOL_FALSE@-ALT@0UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=59 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=60 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
                                                    @BRANCH MARK=TB ID=18 SUM=20@{
											@BRANCH MARK=TA ID=9 SUM=10@@JUMP NAME="send_disappeared_queuing_message"@send_disappeared_queuing_message@/JUMP@ (	loc_pr_error_confirm,
																				&loc_r_lbfl_write_arg,
																				&loc_r_lbfl_main_fail_write_arg )@/BRANCH@;
										}@/BRANCH@
                                                    @COMMENT@/*ELSE */@/COMMENT@
                                                    @BRANCH MARK=TB ID=19 SUM=20@else								
                                                    {
                                                        @COMMENT@/* Nothing to do */@/COMMENT@
                                                        ;
                                                    }@/BRANCH@@/DECISION@
                                                    @COMMENT@/* ENDIF*/@/COMMENT@
                                                }@/BRANCH@@/DECISION@
		@COMMENT@/*								ENDIF*/@/COMMENT@
									}@/BRANCH@@/DECISION@
		@COMMENT@/*							ENDIF*/@/COMMENT@
								}@/BRANCH@
		@COMMENT@/*						ELSE */@/COMMENT@
								@BRANCH MARK=TB ID=25 SUM=20@else
								{
									@COMMENT@/* an error has been detected during this current cycle by LBFL_MNG */@/COMMENT@
									@DECISION SUM=20+21 ID=23|24@if (@POPUP@loc_b_current_cycle_detection == @ALT@K_BOOL_TRUE@-ALT@1UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=61 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=62 SUM=30@False@/BRANCH@@/POPUP@@/ALT@) 
									@BRANCH MARK=TB ID=23 SUM=20@{
                                                @COMMENT@/* When a new occurence is detected : */@/COMMENT@
                                                @COMMENT@/* the counter cycle is fixed to the cycle value of this occurence */@/COMMENT@
                                                @COMMENT@/* and the index is incremented to a new line to continue to count the cycle number */@/COMMENT@
                                                @COMMENT@/* at least, after store_new_occurence, the loc_ul_occ_index is 2 */@/COMMENT@								
                                                loc_b_lbfl_main_fail = @BRANCH MARK=TA ID=10 SUM=10@@JUMP NAME="store_new_occurence"@store_new_occurence@/JUMP@ (loc_pr_error_confirm, &loc_r_lbfl_main_fail_write_arg, &loc_r_lbfl_write_arg)@/BRANCH@;
									}@/BRANCH@
		@COMMENT@/*							ELSE */@/COMMENT@
									@BRANCH MARK=TB ID=24 SUM=20@else
									{
		@COMMENT@/*								The cycle counter is, allready updated, nothing to do*/@/COMMENT@
										;
									}@/BRANCH@@/DECISION@
		@COMMENT@/*							ENDIF*/@/COMMENT@
								}@/BRANCH@@/DECISION@
		@COMMENT@/*						ENDIF*/@/COMMENT@
							}@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
		@COMMENT@/*					ENDIF*/@/COMMENT@
                                }@/BRANCH@
                                @COMMENT@/* ELSE */@/COMMENT@
                                @BRANCH MARK=TB ID=29 SUM=20@else
                                {
                                    @COMMENT@/* Nothing to do*/@/COMMENT@
                                    ;
                                }@/BRANCH@@/DECISION@
                                
                                @COMMENT@/* TEST IF THE BYPASS LBFL_MAIN FLAG ISN'T SET  */@/COMMENT@
                                @COMMENT@/* IF THIS ERROR CONTAINS WRONG ERROR CONF, IT SHOULD NOT BE COMPUTED AGAIN BY LBFL_MNG */@/COMMENT@
                                @DECISION SUM=20+21 ID=30|31@if (@POPUP@loc_b_lbfl_main_fail == @ALT@K_BOOL_FALSE@-ALT@0UL@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=63 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=64 SUM=30@False@/BRANCH@@/POPUP@@/ALT@)
                                @BRANCH MARK=TB ID=30 SUM=20@{
								loc_pr_error_confirm->b_current_cycle_detection = K_BOOL_FALSE;
                                }@/BRANCH@
                                @COMMENT@/* ELSE */@/COMMENT@
								@BRANCH MARK=TB ID=31 SUM=20@else
                                {
                                    @COMMENT@/* Nothing to do */@/COMMENT@
                                }@/BRANCH@@/DECISION@

							loc_r_lbfl_write_arg.ul_fsc_error_id++;

						@COMMENT@/*$ ENDO WHILE */@/COMMENT@
                            }@/BRANCH@ while (@POPUP@(@POPUP@loc_r_lbfl_write_arg.ul_fsc_error_id	< loc_ul_error_number@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=65 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=66 SUM=30@False@/BRANCH@@/POPUP@)	&& 
                                (@POPUP@loc_ul_error_nb_already_found < *loc_pul_fsc_error_detection_nb@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=67 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=68 SUM=30@False@/BRANCH@@/POPUP@)@-POPUP@modified and multiple conditions :
  @BRANCH MARK=TE ID=69&71 SUM=31@loc_r_lbfl_write_arg.ul_fsc_error_id < loc_ul_error_number@/BRANCH@ needs
      @BRANCH MARK=TE ID=69 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=71 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=69&70 SUM=31@loc_ul_error_nb_already_found < *loc_pul_fsc_error_detection_nb@/BRANCH@ needs
      @BRANCH MARK=TE ID=69 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=70 SUM=32@TF@/BRANCH@=F@/POPUP@);
					}@/BRANCH@
		@COMMENT@/*			ELSE */@/COMMENT@
					@BRANCH MARK=TB ID=36 SUM=20@else
					{
						@COMMENT@/* Nothing to do */@/COMMENT@
						;
					}@/BRANCH@@/DECISION@
						@COMMENT@/* ENDIF */@/COMMENT@
								
					@COMMENT@/*	POINT TO THE NB OF ERROR IN FSC CONFIRMATION MANAGEMENT ARRAY FOR THE NEXT FSC */@/COMMENT@
					loc_pul_fsc_error_detection_nb = loc_pul_fsc_error_detection_nb++;
				}@/BRANCH@
					@COMMENT@/* ENDO FOR ALL COMPONENTS OF THIS ERROR MNG ARRAY */@/COMMENT@  
			}@/BRANCH@
		@COMMENT@/*	ELSE */@/COMMENT@
			@BRANCH MARK=TB ID=42 SUM=20@else
			{
				@COMMENT@/* Nothing to do */@/COMMENT@
					;
			}@/BRANCH@@/DECISION@
		@COMMENT@/*	ENDIF*/@/COMMENT@
			tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][loc_ul_error_mng_level_id].b_current_cycle_error_detection = K_BOOL_FALSE;
		}@/BRANCH@
			@COMMENT@/* ENDO FOR ALL LEVELS OF ERROR MNG ARRAYS */@/COMMENT@
	}@/BRANCH@
		@COMMENT@/* ELSE BYPASS SET*/@/COMMENT@
    @BRANCH MARK=TB ID=48 SUM=20@else
    {
@COMMENT@/*		NOTHING TO DO */@/COMMENT@
		;
    }@/BRANCH@@/DECISION@
		
	}@/BRANCH@
	@COMMENT@/* ELSE FAILURE PROCESSING INITIALIZATION NOT PERFORMED*/@/COMMENT@
	@BRANCH MARK=TB ID=50 SUM=20@else
	{
		@COMMENT@/* NOTHING TO DO */@/COMMENT@
		;
	}@/BRANCH@@/DECISION@

@COMMENT@/*	RETURN */@/COMMENT@
    return;@SHORTCUT MARK=TB ID=51@
	
}@/BRANCH@@/NODE@


@COMMENT@/******************************************************************************
 ***** 
 ***** static void store_new_occurence
 ***** 
 ***** Description : 
 *****
 *****				Store new occurence
 ***** 
 ***** Input :
 ***** 
 *****              T_lbfl_pr_error_confirm	par_pr_error_confirm : 
 ***** 				T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_main_fail_write_arg
 ***** 
 ***** 
 ***** Output : 
 ***** 
 *****              T_lbfl_pr_error_confirm	par_pr_error_confirm :
 ***** 
 ***** 
 *****************************************************************************/@/COMMENT@
static T_boolean @NODE TYPE=FUNCTION NAME="store_new_occurence"@@LINK NAME="store_new_occurence"@store_new_occurence (T_lbfl_pr_error_confirm	par_pr_error_confirm,
								  T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_main_fail_write_arg,
								  T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg)

@BRANCH MARK=TB ID=54 SUM=20@{

	T_boolean	loc_b_bypass_fail;
	
	loc_b_bypass_fail = K_BOOL_FALSE;
	
@COMMENT@/*		index_occ is incremented each time a new occurence is found.*/@/COMMENT@
		par_pr_error_confirm->ul_occ_index ++;
@COMMENT@/*		Control on boundary	*/@/COMMENT@
		@DECISION SUM=20+21 ID=52|53@if (@POPUP@par_pr_error_confirm->ul_occ_index >= K_LBFL_MAX_CYCLE_NB_FOR_ERR_CONFIRM + 1@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=72 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=73 SUM=30@False@/BRANCH@@/POPUP@) 
		@BRANCH MARK=TB ID=52 SUM=20@{
			par_pr_lbfl_main_fail_write_arg->ul_ctxt_data_1 =  par_pr_error_confirm->ul_occ_index;

		@COMMENT@/* MANAGE NON FATAL LBFL_MNG INTERNAL ERROR*/@/COMMENT@
			@BRANCH MARK=TA ID=11 SUM=10@@JUMP NAME="lbfl_mng_lbfl_internal_error"@lbfl_mng_lbfl_internal_error@/JUMP@  
			(K_LBFL_E_FSC_OUT_OF_BOUNDARY, __LINE__, par_pr_lbfl_main_fail_write_arg, par_pr_lbfl_write_arg, K_BOOL_TRUE)@/BRANCH@;
		
		@COMMENT@/* SET BYPASS */@/COMMENT@
		loc_b_bypass_fail = K_BOOL_TRUE;
		}@/BRANCH@
@COMMENT@/*		ELSE */@/COMMENT@
		@BRANCH MARK=TB ID=53 SUM=20@else
		{
@COMMENT@/*			The value of the cycle of the occurence is memorized in the next step of occurence detection */@/COMMENT@
			par_pr_error_confirm->tuc_tab_cycle[par_pr_error_confirm->ul_occ_index] = 
			par_pr_error_confirm->tuc_tab_cycle[(par_pr_error_confirm->ul_occ_index) - 1];
		}@/BRANCH@@/DECISION@
	@COMMENT@/* ENDIF */@/COMMENT@
	
	return (loc_b_bypass_fail);@SHORTCUT MARK=TB ID=54@
}@/BRANCH@@/NODE@


@COMMENT@/******************************************************************************
 ***** 
 ***** static void shift_tab_cycle 
 ***** 
 ***** Description :
 *****
 *****				The first error occurence cycle  shall be sorted out of the list
 *****				of error occurence cycle array. The other error occurence cycle
 *****				shall be shifted and decrease with the occurence cycle value of
 *****				the second occurence.Constraint : this function could be used
 *****				only if, at least,two occurences are stored.
 *****	
 ***** Input :
 ***** 
 *****              T_lbfl_pr_error_confirm par_pr_error_confirm : 
 *****              T_lbfl_r_lbfl_write_arg *par_pr_lbfl_main_fail_write_arg :
 *****				T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg :
 *****              T_uint32				par_line : 
 ***** 
 ***** 
 ***** Output : 
 *****
 *****				void
 ***** 
 *****************************************************************************/@/COMMENT@
static T_boolean @NODE TYPE=FUNCTION NAME="shift_tab_cycle"@@LINK NAME="shift_tab_cycle"@shift_tab_cycle (T_lbfl_pr_error_confirm	par_pr_error_confirm,
							 T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_main_fail_write_arg,
							 T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg,
							 T_uint32					par_line)
@BRANCH MARK=TB ID=61 SUM=20@{
	T_uchar						loc_decrease_occ_cycle;
	T_uint32					loc_ul_occ_index;
	T_boolean					loc_b_bypass_fail;
	
	loc_b_bypass_fail = K_BOOL_FALSE;

@COMMENT@/*	Test if occurence index > 1, global shift */@/COMMENT@
	@DECISION SUM=20+21 ID=59|60@if (@POPUP@par_pr_error_confirm->ul_occ_index <= K_LBFL_MAX_CYCLE_NB_FOR_ERR_CONFIRM + 1@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=74 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=75 SUM=30@False@/BRANCH@@/POPUP@)
	@BRANCH MARK=TB ID=59 SUM=20@{
		@COMMENT@/* The second occurence stored in index_cycle 2 shall be shift in index_cycle 1 and */@/COMMENT@
		@COMMENT@/* shall be, so considered, now, as the first stored occurence. this cycle occurence shall be first cycle : 1 */@/COMMENT@
		loc_decrease_occ_cycle = par_pr_error_confirm->tuc_tab_cycle[K_FIRST_OCCURENCE_FOUND] - 1;

		@COMMENT@/*$ DO FOR ALL THE ELEMENTS of tab_cycle[] 
		/* shift all stored occurence cycle of one index and decrease all those items with loc_decrease_occ_cycle */@/COMMENT@
		@COMMENT@/* by this way, the oldest occurence (first one stored in index 2) is sorted out the file,*/@/COMMENT@
		@POPUP@for@-POPUP@loop branches :
@BRANCH MARK=TB ID=56 SUM=22@  0 loop@/BRANCH@
@BRANCH MARK=TB ID=57 SUM=22@  1 loop@/BRANCH@
@BRANCH MARK=TB ID=58 SUM=22@  2 loops or more@/BRANCH@@/POPUP@( loc_ul_occ_index = K_FIRST_OCCURENCE_FOUND; @POPUP@loc_ul_occ_index < par_pr_error_confirm->ul_occ_index@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=76 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=77 SUM=30@False@/BRANCH@@/POPUP@; loc_ul_occ_index++)
		@BRANCH MARK=TB ID=55 SUM=20@{
			par_pr_error_confirm->tuc_tab_cycle[loc_ul_occ_index] = par_pr_error_confirm->tuc_tab_cycle[loc_ul_occ_index + 1] - loc_decrease_occ_cycle;
		}@/BRANCH@
		@COMMENT@/*$ ENDO FOR */@/COMMENT@

		@COMMENT@/* All cycle occurences has been shifted, the index_occ, pointing to the first free line. */@/COMMENT@
		@COMMENT@/* shall be decrease of one */@/COMMENT@
		par_pr_error_confirm->ul_occ_index --;

	}@/BRANCH@
	@COMMENT@/* ELSE */@/COMMENT@
	@BRANCH MARK=TB ID=60 SUM=20@else
	{
		par_pr_lbfl_main_fail_write_arg->ul_fsc_component_line_number =  par_line;
		par_pr_lbfl_main_fail_write_arg->ul_ctxt_data_1 =  par_pr_error_confirm->ul_occ_index;
		
		@COMMENT@/*	MANAGE NON FATAL LBFL_MNG INTERNAL ERROR*/@/COMMENT@
		@BRANCH MARK=TA ID=12 SUM=10@@JUMP NAME="lbfl_mng_lbfl_internal_error"@lbfl_mng_lbfl_internal_error@/JUMP@  
			(K_LBFL_E_FSC_WARNING_ERR_SWDEFAULT_ERR_STATE, __LINE__, par_pr_lbfl_main_fail_write_arg, par_pr_lbfl_write_arg, K_BOOL_TRUE)@/BRANCH@;
		
		@COMMENT@/* SET BYPASS */@/COMMENT@
		loc_b_bypass_fail = K_BOOL_TRUE;
	}@/BRANCH@@/DECISION@ 
	
	return (loc_b_bypass_fail);@SHORTCUT MARK=TB ID=61@
}@/BRANCH@@/NODE@


@COMMENT@/******************************************************************************
 ***** 
 ***** static void send_disappeared_queuing_message 
 ***** 
 ***** Description :
 *****
 *****				If the confirmed error is typed appeared we have to
 *****				notify the disappearence to the bite
 *****	
 ***** Input :
 ***** 
 *****				T_lbfl_r_error_confirm	*par_pr_error_confirm :
 *****              T_lbfl_r_lbfl_write_arg *par_pr_lbfl_write_arg : 
 *****              T_lbfl_r_lbfl_write_arg *par_pr_lbfl_main_fail_write_arg : 
 ***** 
 ***** 
 ***** Output : 
 *****
 *****
 *****				void
 *****
 *****************************************************************************/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="send_disappeared_queuing_message"@@LINK NAME="send_disappeared_queuing_message"@send_disappeared_queuing_message (T_lbfl_r_error_confirm	*par_pr_error_confirm, 
											  T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg,
											  T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_main_fail_write_arg )
@BRANCH MARK=TB ID=68 SUM=20@{
	RETURN_CODE_TYPE					loc_e_return_code;

@COMMENT@/*	to be considered as a confirmed error */@/COMMENT@
	@DECISION SUM=20+21 ID=66|67@if (@POPUP@(	@POPUP@par_pr_error_confirm->ul_occ_index  < par_pr_error_confirm->ul_occ_min_nb@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=78 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=79 SUM=30@False@/BRANCH@@/POPUP@  ) &&
		(	@POPUP@par_pr_error_confirm->e_error_state == K_LBFL_E_CONFIRMED@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=80 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=81 SUM=30@False@/BRANCH@@/POPUP@	)@-POPUP@modified and multiple conditions :
  @BRANCH MARK=TE ID=82&84 SUM=31@par_pr_error_confirm->ul_occ_index < par_pr_error_confirm-> ...@/BRANCH@ needs
      @BRANCH MARK=TE ID=82 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=84 SUM=32@FX@/BRANCH@=F
  @BRANCH MARK=TE ID=82&83 SUM=31@par_pr_error_confirm->e_error_state == K_LBFL_E_CONFIRMED@/BRANCH@ needs
      @BRANCH MARK=TE ID=82 SUM=32@TT@/BRANCH@=T,@BRANCH MARK=TE ID=83 SUM=32@TF@/BRANCH@=F@/POPUP@	)
													
	@BRANCH MARK=TB ID=66 SUM=20@{
		@COMMENT@/* this affectation could be overseed after the use of send_disappeared_queuing_message */@/COMMENT@
		@COMMENT@/* according to the case */@/COMMENT@
		par_pr_error_confirm->e_error_state = K_LBFL_E_DETECTED;

	@COMMENT@/*	IF THE CONFIRMED ERROR is typed APPEARED */@/COMMENT@
	@COMMENT@/*	WE HAVE TO NOTIFY THE DISAPPEARENCE TO THE BITE */@/COMMENT@
		@DECISION SUM=20+21 ID=64|65@if ( @POPUP@par_pr_lbfl_write_arg->pr_error_mng->r_msg_BFM.BITE_EVENT_STATE == APPEARED@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=85 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=86 SUM=30@False@/BRANCH@@/POPUP@ )
		@BRANCH MARK=TB ID=64 SUM=20@{
			par_pr_lbfl_write_arg->pr_error_mng->r_msg_BFM.BITE_EVENT_STATE = DISAPPEARED;

			@COMMENT@/* USE THE ARINC 653 SERVICE SEND_QUEUING_MESSAGE TO SEND MESSAGE TO EBR WITH NO TIME-OUT  */@/COMMENT@
			@COMMENT@/* IT'S COULD NOT BE A FATAL ERROR (RESET IS ASKED AT THE FIRST CONFIRMATION),  */@/COMMENT@
			@COMMENT@/* SO, AT THIS STEP, WE, ONLY, MANAGE WARNING ERRORS. */@/COMMENT@
			@COMMENT@/* THEY HAVE TO BE SENT BY QUEUING PORT, USED FOR WARNING */@/COMMENT@
	@COMMENT@/*		Send the failure report */@/COMMENT@
			@BRANCH MARK=TA ID=14 SUM=10@@JUMP NAME="SEND_QUEUING_MESSAGE"@SEND_QUEUING_MESSAGE@/JUMP@	(@BRANCH MARK=TA ID=13 SUM=10@@JUMP NAME="lbfl_get_failure_report_id"@lbfl_get_failure_report_id@/JUMP@()@/BRANCH@,
									(MESSAGE_ADDR_TYPE)&par_pr_lbfl_write_arg->pr_error_mng->r_msg_BFM,
									(MESSAGE_SIZE_TYPE)sizeof(par_pr_lbfl_write_arg->pr_error_mng->r_msg_BFM),
									(SYSTEM_TIME_TYPE) 0,
									&loc_e_return_code )@/BRANCH@;

	@COMMENT@/*		IF error while writing data into the buffer */@/COMMENT@
			@DECISION SUM=20+21 ID=62|63@if (@POPUP@loc_e_return_code != NO_ERROR@-POPUP@basic boolean conditions :
  @BRANCH MARK=TE ID=87 SUM=30@True@/BRANCH@
  @BRANCH MARK=TE ID=88 SUM=30@False@/BRANCH@@/POPUP@)
			@BRANCH MARK=TB ID=62 SUM=20@{
				@COMMENT@/* MANAGE WARNING LBFL_MNG INTERNAL ERROR */@/COMMENT@
				@BRANCH MARK=TA ID=15 SUM=10@@JUMP NAME="lbfl_mng_lbfl_internal_error"@lbfl_mng_lbfl_internal_error@/JUMP@  
				(K_LBFL_E_FSC_SERV_QUEUING_PORT_SEND, __LINE__, par_pr_lbfl_main_fail_write_arg, par_pr_lbfl_write_arg, K_BOOL_TRUE)@/BRANCH@;
															
			}@/BRANCH@
			@COMMENT@/*	ELSE */@/COMMENT@
			@BRANCH MARK=TB ID=63 SUM=20@else
			{
				@COMMENT@/* Send the failure report to debug */@/COMMENT@
				par_pr_lbfl_write_arg->e_destination = K_LBFL_E_WRITE_DEBUG;
				@BRANCH MARK=TA ID=16 SUM=10@@JUMP NAME="lbfl_write_debug"@lbfl_write_debug@/JUMP@ (par_pr_lbfl_write_arg)@/BRANCH@;
			}@/BRANCH@@/DECISION@
			@COMMENT@/*	ENDIF*/@/COMMENT@
		}@/BRANCH@
		@COMMENT@/*	ELSE */@/COMMENT@
		@BRANCH MARK=TB ID=65 SUM=20@else
		{
		@COMMENT@/* Nothing to do */@/COMMENT@
		}@/BRANCH@@/DECISION@
		@COMMENT@/*	ENDIF*/@/COMMENT@
	}@/BRANCH@
@COMMENT@/*	ELSE */@/COMMENT@
	@BRANCH MARK=TB ID=67 SUM=20@else
	{
	@COMMENT@/* Nothing to do */@/COMMENT@
	}@/BRANCH@@/DECISION@
@COMMENT@/*	ENDIF*/@/COMMENT@

	return;@SHORTCUT MARK=TB ID=68@
}@/BRANCH@@/NODE@
@COMMENT@/*********************** End of file *******************************/@/COMMENT@@/NODE /RIK@
