VE 3.0d CCOV #i3
FC "LAME_UPDATE_CURSOR_REFERENCE.C" "D:\\VIEWSNAP\\IC_CDS_A400M\\CDS_A400M_DEV\\LA\\LAME\\SRC\\"
FD 1285925450
TC PR RE AP BS BT BI BL
AP 0 "lame_update_cursor_reference" "synchronize_ntd_cursor_reference" 121 123
BL 0 simple "lame_update_cursor_reference" /then 126 129
BL 1 simple "lame_update_cursor_reference" /else/then 134 137
BL 2 simple "lame_update_cursor_reference" /else/else/then/then 146 148
BL 3 simple "lame_update_cursor_reference" /else/else/then/else 150 152
BL 4 simple "lame_update_cursor_reference" /else/else/then 143 153
AP 1 "lame_update_cursor_reference" "lame_next_cursor_reference" 158 161
BL 5 simple "lame_update_cursor_reference" /else/else/else/then 155 162
AP 2 "lame_update_cursor_reference" "manage_ntd_mode_change" 165 167
BL 6 simple "lame_update_cursor_reference" /else/else/else/else 164 168
BL 7 simple "lame_update_cursor_reference" /else/else/else 154 168
AP 3 "lame_update_cursor_reference" "manage_abnormal_cursor_reference" 170 173
BL 8 simple "lame_update_cursor_reference" /else/else/then 176 178
BL 9 simple "lame_update_cursor_reference" /else/else/else 180 182
BL 10 simple "lame_update_cursor_reference" /else/else 139 183
BL 11 simple "lame_update_cursor_reference" /else 131 184
PR 0 return "lame_update_cursor_reference" 185 185
PR 1 proc "lame_update_cursor_reference" 118 186
BL 12 simple "lame_update_cursor_reference" / 118 186
BL 13 simple "manage_ntd_mode_change" /then 238 243
BL 14 simple "manage_ntd_mode_change" /else/then 262 268
BL 15 simple "manage_ntd_mode_change" /else/else/then 280 284
BL 16 simple "manage_ntd_mode_change" /else/else/else/then/case 295 295
BL 17 simple "manage_ntd_mode_change" /else/else/else/then/default 298 298
BL 18 simple "manage_ntd_mode_change" /else/else/else/then 287 302
BL 19 simple "manage_ntd_mode_change" /else/else/else/else 304 307
BL 20 simple "manage_ntd_mode_change" /else/else/else 285 307
BL 21 simple "manage_ntd_mode_change" /else/else 269 307
BL 22 simple "manage_ntd_mode_change" /else 244 307
PR 2 return "manage_ntd_mode_change" 308 308
PR 3 proc "manage_ntd_mode_change" 219 309
BL 23 simple "manage_ntd_mode_change" / 219 309
BL 24 simple "manage_abnormal_cursor_reference" /case 350 350
BL 25 simple "manage_abnormal_cursor_reference" /then 355 358
BL 26 simple "manage_abnormal_cursor_reference" /else 360 362
BL 27 simple "manage_abnormal_cursor_reference" /case 367 367
BL 28 simple "manage_abnormal_cursor_reference" /then 373 376
BL 29 simple "manage_abnormal_cursor_reference" /else 378 380
BL 30 simple "manage_abnormal_cursor_reference" /default 382 382
BL 31 simple "manage_abnormal_cursor_reference" /then 390 393
BL 32 simple "manage_abnormal_cursor_reference" /else 395 397
PR 4 return "manage_abnormal_cursor_reference" 399 399
PR 5 proc "manage_abnormal_cursor_reference" 339 400
BL 33 simple "manage_abnormal_cursor_reference" / 339 400
BL 34 simple "synchronize_ntd_cursor_reference" /then/then 443 448
BL 35 simple "synchronize_ntd_cursor_reference" /then/else/then 452 457
BL 36 simple "synchronize_ntd_cursor_reference" /then/else/else/then/case 467 467
BL 37 simple "synchronize_ntd_cursor_reference" /then/else/else/then/default 470 470
BL 38 simple "synchronize_ntd_cursor_reference" /then/else/else/then 461 474
BL 39 simple "synchronize_ntd_cursor_reference" /then/else/else/else/then/case 482 482
BL 40 simple "synchronize_ntd_cursor_reference" /then/else/else/else/then/default 485 485
BL 41 simple "synchronize_ntd_cursor_reference" /then/else/else/else/then 476 489
BL 42 simple "synchronize_ntd_cursor_reference" /then/else/else/else/else 491 494
BL 43 simple "synchronize_ntd_cursor_reference" /then/else/else/else 475 494
BL 44 simple "synchronize_ntd_cursor_reference" /then/else/else 460 494
BL 45 simple "synchronize_ntd_cursor_reference" /then/else 451 494
BL 46 simple "synchronize_ntd_cursor_reference" /then 438 495
BL 47 simple "synchronize_ntd_cursor_reference" /else/then 505 507
BL 48 simple "synchronize_ntd_cursor_reference" /else/else/then 512 514
BL 49 simple "synchronize_ntd_cursor_reference" /else/else/else 516 518
BL 50 simple "synchronize_ntd_cursor_reference" /else/else 510 518
BL 51 simple "synchronize_ntd_cursor_reference" /else/then 527 529
BL 52 simple "synchronize_ntd_cursor_reference" /else/else/then 534 536
BL 53 simple "synchronize_ntd_cursor_reference" /else/else/else 538 540
BL 54 simple "synchronize_ntd_cursor_reference" /else/else 532 540
BL 55 simple "synchronize_ntd_cursor_reference" /else 497 541
PR 6 return "synchronize_ntd_cursor_reference" 542 542
PR 7 proc "synchronize_ntd_cursor_reference" 434 543
BL 56 simple "synchronize_ntd_cursor_reference" / 434 543
DC 2131900501
@RIK
  TOKEN="CCOV"
  SRC="LAME_UPDATE_CURSOR_REFERENCE.C"
  DIR="D:\VIEWSNAP\IC_CDS_A400M\CDS_A400M_DEV\LA\LAME\SRC\"
  DATE=1285925450
  CHECKSUM=2131900501
  SUMS
   ("&Functions"=0,
    "-&Exits"=1,
    "Functions and exits"=0+1),
   ("&Calls"=10),
   ("Statement &blocks"=20,
    "-&Implicit blocks"=21,
    "Decisions"=20+21,
    "&Loops"=22),
   ("Basic &conditions",
    "&Modified conditions",
    "M&ultiple conditions")
  ERRORS
    32="a source object was not linked with the right runtime object (check instrumentation mode)",
    49="a composition of conditions evaluates in an unexpected result, contact your vendor",
    50="a composition of conditions reached with an unexpected input vector, contact your vendor"
NODE TYPE=FILE NAME="LAME_UPDATE_CURSOR_REFERENCE.C"@@COMMENT@/******************************************************************************
 **
 **                                   ==============
 **                                   IDENTIFICATION
 **                                   ==============
 **
 **
 **
 **  Filename            : lame_update_cursor_reference.c
 **
 **  Author/ Company     : N. Sceaux / THALES Services
 **
 **  Creation date       : 30/01/2007
 **
 **  Copyright statement : Copyright (C); 2006
 **                        THALES Avionics
 **
 **  Module description  : Media Behavior: cursor reference
 **                        ==> Compute next cursor reference to use
 **
 *****************************************************************************/@/COMMENT@


@COMMENT@/******************************************************************************
 **                           Project specific includes
 *****************************************************************************/@/COMMENT@
@COMMENT@/* MACS TYPES */@/COMMENT@


@COMMENT@/* SA TYPES */@/COMMENT@


@COMMENT@/* PLATFORM TYPES */@/COMMENT@


@COMMENT@/* CALLED CSU TYPES */@/COMMENT@


@COMMENT@/* CALLED CSU PROTOTYPES */@/COMMENT@



@COMMENT@/******************************************************************************
 **                           Module specific includes
 *****************************************************************************/@/COMMENT@
@COMMENT@#include "lame_types.h"@/COMMENT@
@COMMENT@#include "lame_next_cursor_reference.p"@/COMMENT@
@COMMENT@#include "lame_update_cursor_reference.p"@/COMMENT@

extern T_INT NTD1_MODE_SELECTED;
extern T_INT NTD2_MODE_SELECTED;

@COMMENT@/******************************************************************************
 **                           Local file declarations
 *****************************************************************************/@/COMMENT@
static T_lame_cursor_reference manage_ntd_mode_change (
            T_lame_cursor_configuration *par_ptr_cursor_conf,
            T_lame_display_configuration *par_ptr_display_conf);

static T_lame_cursor_reference manage_abnormal_cursor_reference (
            T_lame_cursor_reference par_ptr_cursor_ref,
            T_lame_cursor_configuration *par_ptr_cursor_conf,
            T_lame_display_configuration *par_ptr_display_conf);

static void synchronize_ntd_cursor_reference (
            T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref,
            T_lame_display_configuration *par_ptr_display_conf);

@COMMENT@/******************************************************************************
 ***** 
 ***** void lame_update_cursor_reference 
 ***** 
 ***** Description: Compute next cursor reference in par_ptr_cursor_conf,
 *****   based on the previous cursor reference, REF key press, displayed
 *****   format, cursor presence, and NTD mode change.
 ***** 
 ***** Input:
 ***** 
 *****  T_lame_display_configuration *par_ptr_display_conf: display configuration
 *****      Used slots:
 *****        format: displayed format (NTD1, NTD2 or something else)
 *****        format_prev: previously displayed format
 *****        ntd_mode: NTD mode (relevant if format is NTD1 or NTD2)
 *****        ntd_mode_prev: previous NTD mode
 ***** 
 *****  T_boolean par_b_ref_key_pressed: true if the REF KCCU has been pressed
 ***** 
 ***** Input/Output: 
 *****
 *****  T_lame_cursor_configuration *par_ptr_cursor_conf: cursor configuration
 *****      Input slots:
 *****        displayed:           is the cursor displayed?
 *****        displayed_prev:      was the cursor previously displayed?
 *****        ntd1_reference_prev: previous ntd1 cursor reference
 *****        ntd2_reference_prev: previous ntd2 cursor reference
 *****        be_activated:        is BE enabled?
 *****      Output slots:
 *****        reference:      next cursor reference
 ***** 
 *****  T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref: 
 *****      Input slots:
 *****        initialized:      true if the cursor reference as been initialized
 *****        DU1_validity:     true if DU 1 is valid
 *****        DU2_validity:     true if DU 2 is valid
 *****        ntd1_foreign_ref: ntd1 cursor references send by other DUs
 *****        ntd2_foreign_ref: ntd2 cursor references send by other DUs
 *****
 *****      Output slots:
 *****        ntd1_reference:   current ntd1 cursor reference
 *****        ntd2_reference:   current ntd2 cursor reference
 *****
 *****************************************************************************/@/COMMENT@
void
@NODE TYPE=FUNCTION NAME="lame_update_cursor_reference"@@BRANCH MARK=TP ID=1 SUM=0@@LINK NAME="lame_update_cursor_reference"@lame_update_cursor_reference@/BRANCH@ (T_lame_cursor_configuration *par_ptr_cursor_conf,
                              T_lame_display_configuration *par_ptr_display_conf,
                              T_boolean par_b_ref_key_pressed,
                              T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref)
@BRANCH MARK=TB ID=12 SUM=20@{
    T_lame_cursor_reference loc_new_reference;

    @BRANCH MARK=TA ID=0 SUM=10@@JUMP NAME="synchronize_ntd_cursor_reference"@synchronize_ntd_cursor_reference@/JUMP@(
                par_ptr_memorized_cursor_ref,
                par_ptr_display_conf)@/BRANCH@;

    @DECISION SUM=20+21 ID=0|11@if (par_ptr_cursor_conf->displayed == K_BOOL_FALSE)
    @BRANCH MARK=TB ID=0 SUM=20@{
        @COMMENT@/* When the cursor is not displayed, use NO_CURSOR reference */@/COMMENT@
        par_ptr_cursor_conf->reference = K_LAME_CURSOR_REF_NO_CURSOR;
    }@/BRANCH@
    @BRANCH MARK=TB ID=11 SUM=20@else
    {
        @COMMENT@/* the cursor is displayed */@/COMMENT@
        @DECISION SUM=20+21 ID=1|10@if (par_ptr_display_conf->format == K_LAME_FORMAT_NOT_NTD)
        @BRANCH MARK=TB ID=1 SUM=20@{
            @COMMENT@/* When format is not NTD1 nor NTD2, use SCREEN cursor reference */@/COMMENT@
            par_ptr_cursor_conf->reference = K_LAME_CURSOR_REF_SCREEN;
        }@/BRANCH@
        @BRANCH MARK=TB ID=10 SUM=20@else
        {
            @COMMENT@/* Format is NTD */@/COMMENT@
            @DECISION SUM=20+21 ID=4|7@if ((par_ptr_cursor_conf->displayed_prev == K_BOOL_FALSE)
                || (par_ptr_display_conf->format != par_ptr_display_conf->format_prev))
            @BRANCH MARK=TB ID=4 SUM=20@{
                @COMMENT@/* Cursor is affected to the DU */@/COMMENT@
                @DECISION SUM=20+21 ID=2|3@if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD1)
                @BRANCH MARK=TB ID=2 SUM=20@{
                    loc_new_reference = par_ptr_memorized_cursor_ref->ntd1_reference;
                }@/BRANCH@
                @BRANCH MARK=TB ID=3 SUM=20@else @COMMENT@/* par_ptr_display_conf->format == K_LAME_FORMAT_NTD2 */@/COMMENT@
                {
                    loc_new_reference = par_ptr_memorized_cursor_ref->ntd2_reference;
                }@/BRANCH@@/DECISION@
            }@/BRANCH@
            @BRANCH MARK=TB ID=7 SUM=20@else @DECISION SUM=20+21 ID=5|6@if (par_b_ref_key_pressed == K_BOOL_TRUE)
            @BRANCH MARK=TB ID=5 SUM=20@{
                @COMMENT@/* the REF KCCU key has been pressed
                 * ==> switch to next reference in reference cycle */@/COMMENT@
                loc_new_reference = @BRANCH MARK=TA ID=1 SUM=10@@JUMP NAME="lame_next_cursor_reference"@lame_next_cursor_reference@/JUMP@ (
                    par_ptr_cursor_conf->reference_prev,
                    par_ptr_display_conf->ntd_mode,
                    par_ptr_cursor_conf->be_activated)@/BRANCH@;
            }@/BRANCH@          
            @BRANCH MARK=TB ID=6 SUM=20@else
            {
                loc_new_reference = @BRANCH MARK=TA ID=2 SUM=10@@JUMP NAME="manage_ntd_mode_change"@manage_ntd_mode_change@/JUMP@ (
                    par_ptr_cursor_conf,
                    par_ptr_display_conf)@/BRANCH@;
            }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

            par_ptr_cursor_conf->reference = @BRANCH MARK=TA ID=3 SUM=10@@JUMP NAME="manage_abnormal_cursor_reference"@manage_abnormal_cursor_reference@/JUMP@ (
                    loc_new_reference,
                    par_ptr_cursor_conf,
                    par_ptr_display_conf)@/BRANCH@;

            @DECISION SUM=20+21 ID=8|9@if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD1)
            @BRANCH MARK=TB ID=8 SUM=20@{
                par_ptr_memorized_cursor_ref->ntd1_reference = par_ptr_cursor_conf->reference;
            }@/BRANCH@
            @BRANCH MARK=TB ID=9 SUM=20@else @COMMENT@/* par_ptr_display_conf->format == K_LAME_FORMAT_NTD2 */@/COMMENT@
            {
                par_ptr_memorized_cursor_ref->ntd2_reference = par_ptr_cursor_conf->reference;
            }@/BRANCH@@/DECISION@
        }@/BRANCH@@/DECISION@
    }@/BRANCH@@/DECISION@
    @BRANCH MARK=TP ID=0 SUM=1@return;@SHORTCUT MARK=TB ID=12@@/BRANCH@
}@/BRANCH@@/NODE@


@COMMENT@/******************************************************************************
 ***** 
 ***** static T_lame_cursor_reference manage_ntd_mode_change 
 ***** 
 ***** Description : Compute new cursor reference in case of NTD mode change
 ***** 
 *****  T_lame_cursor_configuration *par_ptr_cursor_conf: cursor configuration
 *****      Used slots:
 *****        displayed:      is the cursor displayed?
 *****        displayed_prev: was the cursor previously displayed?
 *****        reference_prev: previous cursor reference
 *****        be_activated:   is BE enabled?
 ***** 
 *****  T_lame_display_configuration *par_ptr_display_conf: display configuration
 *****      Used slots:
 *****        format: displayed format (NTD1, NTD2 or something else)
 *****        format_prev: previously displayed format
 *****        ntd_mode: NTD mode (relevant if format is NTD1 or NTD2)
 *****        ntd_mode_prev: previous NTD mode
 ***** 
 *****  T_boolean par_b_ref_key_pressed: true if the REF KCCU has been pressed
 ***** 
 ***** Output: 
 *****
 *****  Return value: the new cursor reference
 ***** 
 *****************************************************************************/@/COMMENT@
static T_lame_cursor_reference @NODE TYPE=FUNCTION NAME="manage_ntd_mode_change"@@BRANCH MARK=TP ID=3 SUM=0@@LINK NAME="manage_ntd_mode_change"@manage_ntd_mode_change@/BRANCH@ (
            T_lame_cursor_configuration *par_ptr_cursor_conf,
            T_lame_display_configuration *par_ptr_display_conf)
@BRANCH MARK=TB ID=23 SUM=20@{
    T_lame_cursor_reference loc_new_reference;

    @COMMENT@/* In case of NTD mode change, update the cursor reference */@/COMMENT@
    @DECISION SUM=20+21 ID=13|22@if ((par_ptr_display_conf->format == par_ptr_display_conf->format_prev)
        &&
        ((par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ROSE) ||
         (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ARC) ||
         (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VOR) ||
         (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VD))
        &&
        ((par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_SLEW) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_EXPAND) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_PLAN) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_SLAVE) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ROSE_FRZ) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ARC_FRZ)  ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VOR_FRZ)  ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VD_FRZ)))
    @BRANCH MARK=TB ID=13 SUM=20@{
        @COMMENT@/* NTDi mode change from {ROSE, ARC, VOR, VD}
         * to {SLEW, EXPAND, PLAN, SLAVE, ROSEFRZ, ARCFRZ, VORFRZ, VDFRZ}
         * ==> reference GROUND */@/COMMENT@
        loc_new_reference = K_LAME_CURSOR_REF_GND;
    }@/BRANCH@
    @BRANCH MARK=TB ID=22 SUM=20@else @DECISION SUM=20+21 ID=14|21@if ((par_ptr_display_conf->format == par_ptr_display_conf->format_prev)
             &&
             ((par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_SLEW) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_SLEW_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_PLAN) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_PLAN_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_EXPAND) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_EXPAND_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_SLAVE) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ROSE_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ARC_FRZ)  ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VOR_FRZ)  ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VD_FRZ))
             &&
             ((par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ROSE) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ARC) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VD) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VOR)))
    @BRANCH MARK=TB ID=14 SUM=20@{
        @COMMENT@/* NTDi mode change 
         * from {SLEW, SLEW_FRZ, PLAN, PLAN_FRZ, EXPAND, EXPAND_FRZ, SLAVE}
         * to {ROSE, ARC, VOR, VD}
         * ==> reference SCREEN */@/COMMENT@
        loc_new_reference = K_LAME_CURSOR_REF_SCREEN;
    }@/BRANCH@
    @BRANCH MARK=TB ID=21 SUM=20@else @DECISION SUM=20+21 ID=15|20@if ((par_ptr_display_conf->format == par_ptr_display_conf->format_prev)
             &&
             (par_ptr_cursor_conf->reference_prev == K_LAME_CURSOR_REF_BE)
             &&
             ((par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_EXPAND) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_EXPAND_FRZ) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_SLAVE) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ROSE_FRZ) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ARC_FRZ)  ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VOR_FRZ)  ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VD_FRZ)))
    @BRANCH MARK=TB ID=15 SUM=20@{
        @COMMENT@/* NTDi mode change to {EXPAND, EXPAND_FRZ, SLAVE} and reference is BE
         * ==> reference is GND */@/COMMENT@
        loc_new_reference = K_LAME_CURSOR_REF_GND;
    }@/BRANCH@
    @BRANCH MARK=TB ID=20 SUM=20@else @DECISION SUM=20+21 ID=18|19@if ((par_ptr_cursor_conf->reference_prev == K_LAME_CURSOR_REF_BE)
             && (par_ptr_cursor_conf->be_activated == K_BOOL_FALSE))
    @BRANCH MARK=TB ID=18 SUM=20@{
        @COMMENT@/* Reference is BE but BE is disabled 
         * ==> use default cursor reference */@/COMMENT@
        @DECISION SUM=20+21 ID=16|17@switch (par_ptr_display_conf->ntd_mode)
        {
        @BRANCH NO@case K_LAME_NTD_MODE_ROSE:@/BRANCH@
        @BRANCH NO@case K_LAME_NTD_MODE_ARC:@/BRANCH@
        @BRANCH NO@case K_LAME_NTD_MODE_VD:@/BRANCH@
        @BRANCH MARK=TB ID=16 SUM=20@@BRANCH NO@case K_LAME_NTD_MODE_VOR:@/BRANCH@
            loc_new_reference = K_LAME_CURSOR_REF_SCREEN;
            break;
        @BRANCH MARK=TB ID=17 SUM=20@@BRANCH NO@default:@/BRANCH@
            loc_new_reference = K_LAME_CURSOR_REF_GND;
            break;
        }@/BRANCH@@/BRANCH@@/DECISION@
    }@/BRANCH@
    @BRANCH MARK=TB ID=19 SUM=20@else
    {
        @COMMENT@/* Reference is unchanged */@/COMMENT@
        loc_new_reference = par_ptr_cursor_conf->reference_prev;
    }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
    @BRANCH MARK=TP ID=2 SUM=1@return loc_new_reference;@SHORTCUT MARK=TB ID=23@@/BRANCH@
}@/BRANCH@@/NODE@


@COMMENT@/******************************************************************************
 ***** 
 ***** static T_lame_cursor_reference manage_abnormal_cursor_reference 
 ***** 
 ***** Description : Compute new cursor reference in case of abnormal 
 *****               cursor reference value
 ***** 
 ***** Input:
 *****  T_lame_cursor_reference par_ptr_cursor_ref: the cursor reference
 *****        returned by default
 *****  T_lame_cursor_configuration *par_ptr_cursor_conf: cursor configuration
 *****      Used slots:
 *****        be_activated:      is BE enabled?
 ***** 
 *****  T_lame_display_configuration *par_ptr_display_conf: display configuration
 *****      Used slots:
 *****        ntd_mode: NTD mode (relevant if format is NTD1 or NTD2)
 ***** 
 ***** Output: 
 *****
 *****  Return value: the new cursor reference
 ***** 
 *****************************************************************************/@/COMMENT@
static T_lame_cursor_reference @NODE TYPE=FUNCTION NAME="manage_abnormal_cursor_reference"@@BRANCH MARK=TP ID=5 SUM=0@@LINK NAME="manage_abnormal_cursor_reference"@manage_abnormal_cursor_reference@/BRANCH@ (
            T_lame_cursor_reference        par_cursor_ref,
            T_lame_cursor_configuration    *par_ptr_cursor_conf,
            T_lame_display_configuration   *par_ptr_display_conf)
@BRANCH MARK=TB ID=33 SUM=20@{
    T_lame_cursor_reference loc_new_reference;

    loc_new_reference = par_cursor_ref;

    @COMMENT@/* Looking for abnormal Cursor Reference value */@/COMMENT@
    @DECISION SUM=20+21 ID=24|27|30@switch(par_ptr_display_conf->ntd_mode)
        {
        @BRANCH NO@case K_LAME_NTD_MODE_ROSE:@/BRANCH@
        @BRANCH NO@case K_LAME_NTD_MODE_ARC:@/BRANCH@
        @BRANCH NO@case K_LAME_NTD_MODE_VD:@/BRANCH@
        @BRANCH MARK=TB ID=24 SUM=20@@BRANCH NO@case K_LAME_NTD_MODE_VOR:@/BRANCH@
            @COMMENT@/* in case of invalid cursor reference */@/COMMENT@
            @DECISION SUM=20+21 ID=25|26@if ((loc_new_reference == K_LAME_CURSOR_REF_NO_CURSOR)
                || ((loc_new_reference == K_LAME_CURSOR_REF_BE)
                    && (par_ptr_cursor_conf->be_activated == K_BOOL_FALSE)))
            @BRANCH MARK=TB ID=25 SUM=20@{
                @COMMENT@/* set cursor reference to the default value */@/COMMENT@
                loc_new_reference = K_LAME_CURSOR_REF_SCREEN;
            }@/BRANCH@
            @BRANCH MARK=TB ID=26 SUM=20@else
            {
                @COMMENT@/* Nothing to do */@/COMMENT@
            }@/BRANCH@@/DECISION@
            break;
        @BRANCH NO@case K_LAME_NTD_MODE_SLEW:@/BRANCH@
        @BRANCH NO@case K_LAME_NTD_MODE_PLAN:@/BRANCH@
        @BRANCH NO@case K_LAME_NTD_MODE_SLEW_FRZ:@/BRANCH@
        @BRANCH MARK=TB ID=27 SUM=20@@BRANCH NO@case K_LAME_NTD_MODE_PLAN_FRZ:@/BRANCH@
            @COMMENT@/* in case of invalid cursor reference */@/COMMENT@
            @DECISION SUM=20+21 ID=28|29@if ((loc_new_reference == K_LAME_CURSOR_REF_NO_CURSOR)
                || (loc_new_reference == K_LAME_CURSOR_REF_SCREEN)
                || ((loc_new_reference == K_LAME_CURSOR_REF_BE)
                    && (par_ptr_cursor_conf->be_activated == K_BOOL_FALSE)))
            @BRANCH MARK=TB ID=28 SUM=20@{
                @COMMENT@/* set cursor reference to the default value */@/COMMENT@
                loc_new_reference = K_LAME_CURSOR_REF_GND;
            }@/BRANCH@
            @BRANCH MARK=TB ID=29 SUM=20@else
            {
                @COMMENT@/* Nothing to do */@/COMMENT@
            }@/BRANCH@@/DECISION@
            break;
        @BRANCH MARK=TB ID=30 SUM=20@@BRANCH NO@default:@/BRANCH@ @COMMENT@/* K_LAME_NTD_MODE_EXPAND || K_LAME_NTD_MODE_EXPAND_FRZ 
                    || K_LAME_NTD_MODE_SLAVE || K_LAME_NTD_MODE_ROSE_FRZ 
                    || K_LAME_NTD_MODE_ARC_FRZ || K_LAME_NTD_MODE_VOR_FRZ 
                    || K_LAME_NTD_MODE_VD_FRZ                              */@/COMMENT@
            @COMMENT@/* in case of invalid cursor reference */@/COMMENT@
            @DECISION SUM=20+21 ID=31|32@if ((loc_new_reference == K_LAME_CURSOR_REF_NO_CURSOR)
                || (loc_new_reference == K_LAME_CURSOR_REF_SCREEN)
                || (loc_new_reference == K_LAME_CURSOR_REF_BE))
            @BRANCH MARK=TB ID=31 SUM=20@{
                @COMMENT@/* set cursor reference to the default value */@/COMMENT@
                loc_new_reference = K_LAME_CURSOR_REF_GND;
            }@/BRANCH@
            @BRANCH MARK=TB ID=32 SUM=20@else
            {
                @COMMENT@/* Nothing to do */@/COMMENT@
            }@/BRANCH@@/DECISION@
    }@/BRANCH@@/BRANCH@@/BRANCH@@/DECISION@
    @BRANCH MARK=TP ID=4 SUM=1@return loc_new_reference;@SHORTCUT MARK=TB ID=33@@/BRANCH@
}@/BRANCH@@/NODE@


@COMMENT@/******************************************************************************
 ***** 
 ***** static void synchronize_ntd_cursor_reference
 ***** 
 ***** Description : compute the memorized cursor reference with the cursor
 *****            reference from other DU and the current display configuration
 ***** 
 ***** Input:
 ***** 
 *****  T_lame_display_configuration *par_ptr_display_conf: display configuration
 *****      Used slots:
 *****        ntd_mode: NTD mode (relevant if format is NTD1 or NTD2)
 ***** 
 ***** Input/Output: 
 *****
 *****  T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref: 
 *****      Input slots:
 *****        initialized:      true if the cursor reference as been initialized
 *****        DU1_validity:     true if DU 1 is valid
 *****        DU2_validity:     true if DU 2 is valid
 *****        ntd1_foreign_ref: ntd1 cursor references send by other DUs
 *****        ntd2_foreign_ref: ntd2 cursor references send by other DUs
 *****
 *****      Output slots:
 *****        ntd1_reference:   new ntd1 cursor reference
 *****        ntd2_reference:   new ntd2 cursor reference
 ***** 
 *****************************************************************************/@/COMMENT@
static void @NODE TYPE=FUNCTION NAME="synchronize_ntd_cursor_reference"@@BRANCH MARK=TP ID=7 SUM=0@@LINK NAME="synchronize_ntd_cursor_reference"@synchronize_ntd_cursor_reference@/BRANCH@ (
            T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref,
            T_lame_display_configuration *par_ptr_display_conf)
@BRANCH MARK=TB ID=56 SUM=20@{
    T_lame_ntdi_foreign_cursor_reference loc_ntdi_cursor_ref;

    @DECISION SUM=20+21 ID=46|55@if (par_ptr_memorized_cursor_ref->initialized == K_BOOL_FALSE)
    @BRANCH MARK=TB ID=46 SUM=20@{
        par_ptr_memorized_cursor_ref->initialized = K_BOOL_TRUE;
        @COMMENT@/* if DU1 is valid
         * => synchronize ntd cursor ref with DU1 ntd cursor reference */@/COMMENT@
        @DECISION SUM=20+21 ID=34|45@if (par_ptr_memorized_cursor_ref->DU1_validity == K_BOOL_TRUE)
        @BRANCH MARK=TB ID=34 SUM=20@{
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd1_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd2_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
        }@/BRANCH@
        @COMMENT@/* else if DU2 is valid
         * => synchronize ntd cursor ref with DU2 ntd cursor reference */@/COMMENT@
        @BRANCH MARK=TB ID=45 SUM=20@else @DECISION SUM=20+21 ID=35|44@if (par_ptr_memorized_cursor_ref->DU2_validity == K_BOOL_TRUE)
        @BRANCH MARK=TB ID=35 SUM=20@{
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd1_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd2_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
        }@/BRANCH@
        @COMMENT@/* unable to synchronize cursor ref with another DU 
         * => use default values */@/COMMENT@
        @BRANCH MARK=TB ID=44 SUM=20@else @DECISION SUM=20+21 ID=38|43@if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD1)
        @BRANCH MARK=TB ID=38 SUM=20@{
            @DECISION SUM=20+21 ID=36|37@switch (par_ptr_display_conf->ntd_mode)
                {
                @BRANCH NO@case K_LAME_NTD_MODE_ROSE:@/BRANCH@
                @BRANCH NO@case K_LAME_NTD_MODE_ARC:@/BRANCH@
                @BRANCH NO@case K_LAME_NTD_MODE_VOR:@/BRANCH@
                @BRANCH MARK=TB ID=36 SUM=20@@BRANCH NO@case K_LAME_NTD_MODE_VD:@/BRANCH@
                    par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_SCREEN;
                    break;
                @BRANCH MARK=TB ID=37 SUM=20@@BRANCH NO@default:@/BRANCH@
                    par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_GND;
                }@/BRANCH@@/BRANCH@@/DECISION@
            par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_NO_CURSOR;
        }@/BRANCH@
        @BRANCH MARK=TB ID=43 SUM=20@else @DECISION SUM=20+21 ID=41|42@if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD2)
        @BRANCH MARK=TB ID=41 SUM=20@{
            @DECISION SUM=20+21 ID=39|40@switch (par_ptr_display_conf->ntd_mode)
                {
                @BRANCH NO@case K_LAME_NTD_MODE_ROSE:@/BRANCH@
                @BRANCH NO@case K_LAME_NTD_MODE_ARC:@/BRANCH@
                @BRANCH NO@case K_LAME_NTD_MODE_VOR:@/BRANCH@
                @BRANCH MARK=TB ID=39 SUM=20@@BRANCH NO@case K_LAME_NTD_MODE_VD:@/BRANCH@
                    par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_SCREEN;
                    break;
                @BRANCH MARK=TB ID=40 SUM=20@@BRANCH NO@default:@/BRANCH@
                    par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_GND;
                }@/BRANCH@@/BRANCH@@/DECISION@
            par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_NO_CURSOR;
        }@/BRANCH@
        @BRANCH MARK=TB ID=42 SUM=20@else
        {
            par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_NO_CURSOR;
            par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_NO_CURSOR;
        }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
    }@/BRANCH@
    @BRANCH MARK=TB ID=55 SUM=20@else
    {
        @COMMENT@/* synchronization of ntd1 cursor reference */@/COMMENT@
        loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd1_foreign_ref;

        @COMMENT@/* if DU1 is valid and displays ntd1 
         * => synchronize ntd1 cursor ref with DU1 ntd1 cursor reference */@/COMMENT@
        @DECISION SUM=20+21 ID=47|50@if ((par_ptr_memorized_cursor_ref->DU1_validity == K_BOOL_TRUE)
            && (loc_ntdi_cursor_ref.DU1_display_ntdi == K_BOOL_TRUE))
        @BRANCH MARK=TB ID=47 SUM=20@{
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
        }@/BRANCH@
        @COMMENT@/* else if DU2 is valid and displays ntd1 
         * => synchronize ntd1 cursor ref with DU2 ntd1 cursor reference */@/COMMENT@
        @BRANCH MARK=TB ID=50 SUM=20@else @DECISION SUM=20+21 ID=48|49@if ((par_ptr_memorized_cursor_ref->DU2_validity == K_BOOL_TRUE)
            && (loc_ntdi_cursor_ref.DU2_display_ntdi == K_BOOL_TRUE))
        @BRANCH MARK=TB ID=48 SUM=20@{
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
        }@/BRANCH@
        @BRANCH MARK=TB ID=49 SUM=20@else
        {
            @COMMENT@/* Nothing to do */@/COMMENT@
        }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@

        @COMMENT@/* synchronization of ntd2 cursor reference */@/COMMENT@
        loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd2_foreign_ref;

        @COMMENT@/* if DU1 is valid and displays ntd2 
         * => synchronize ntd2 cursor ref with DU1 ntd2 cursor reference */@/COMMENT@
        @DECISION SUM=20+21 ID=51|54@if ((par_ptr_memorized_cursor_ref->DU1_validity == K_BOOL_TRUE)
            && (loc_ntdi_cursor_ref.DU1_display_ntdi == K_BOOL_TRUE))
        @BRANCH MARK=TB ID=51 SUM=20@{
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
        }@/BRANCH@
        @COMMENT@/* else if DU2 is valid and displays ntd2 
         * => synchronize ntd2 cursor ref with DU2 ntd2 cursor reference */@/COMMENT@
        @BRANCH MARK=TB ID=54 SUM=20@else @DECISION SUM=20+21 ID=52|53@if ((par_ptr_memorized_cursor_ref->DU2_validity == K_BOOL_TRUE)
            && (loc_ntdi_cursor_ref.DU2_display_ntdi == K_BOOL_TRUE))
        @BRANCH MARK=TB ID=52 SUM=20@{
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
        }@/BRANCH@
        @BRANCH MARK=TB ID=53 SUM=20@else
        {
            @COMMENT@/* Nothing to do */@/COMMENT@
        }@/BRANCH@@/DECISION@@/BRANCH@@/DECISION@
    }@/BRANCH@@/DECISION@
    @BRANCH MARK=TP ID=6 SUM=1@return;@SHORTCUT MARK=TB ID=56@@/BRANCH@
}@/BRANCH@@/NODE@
@/NODE /RIK@
