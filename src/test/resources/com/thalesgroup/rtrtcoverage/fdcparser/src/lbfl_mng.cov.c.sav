/* Rational Test RealTime C Instrumentor 2002.05.21.468.004 */
/* Build Number: 282.001*/
/* Copyright(C) 2002 Rational Software Corporation. All rights reserved. */
/*   Date : 09-Oct-02 19:21 */
/*     OS : ms-dos */

#define ATL_C_INSTRUMENTOR

#define USE_ATC 1

#define ATC_INFORMATION 0

#include "D:\Viewsnap\IC_CDS_A400M\CDS_A400M_DEV\..\build_tools_cds_a400m_L3.1\DESK_CompilationChain/TDP/GNU\lib\TP.h"

#ifndef _ATC_COND_END_1
 #error "Incompatible release of atc.h, please re-save your TDP using the TDP Editor"
#endif

_ATC_INIT_CONST_COMPOUND_DECLARE
#define _ATC_INIT_CONST_COMPOUND_STUFF _ATC_INIT_CONST_COMPOUND_STUFF_OK

_ATC_DECLARE_COND_CONST(0,4,3)
_ATC_DECLARE_COND_CONST(1,5,4)
_ATC_DECLARE_COND_CONST(2,3,2)
_ATC_DECLARE_COND_CONST(3,4,3)
_ATC_DECLARE_COND_CONST(4,16,6)
_ATC_DECLARE_COND_CONST(5,4,3)
_ATC_DECLARE_COND_CONST(6,3,2)
_ATC_DECLARE_COND_CONST(7,3,2)
_ATC_DECLARE_COND_CONST(8,3,2)
_ATC_DECLARE_COND_CONST(9,4,3)
_ATC_DECLARE_COND_CONST(10,3,2)
_ATC_DECLARE_COND_CONST(11,3,2)

_ATC_START_COND_CONST
  _ATC_SET_COND_CONST_FIRST1(0,4,3,0x0002)
  _ATC_SET_COND_CONST_MIDDLE1(0,4,3,1,0x0029)
  _ATC_SET_COND_CONST_MIDDLE1(0,4,3,2,0x0019)
  _ATC_SET_COND_CONST_MIDDLE1(0,4,3,3,0x0005)
  _ATC_SET_COND_CONST_LAST(0,4)
  _ATC_SET_COND_CONST_FIRST1(1,5,4,0x00aa)
  _ATC_SET_COND_CONST_MIDDLE1(1,5,4,1,0x006a)
  _ATC_SET_COND_CONST_MIDDLE1(1,5,4,2,0x001a)
  _ATC_SET_COND_CONST_MIDDLE1(1,5,4,3,0x0006)
  _ATC_SET_COND_CONST_MIDDLE1(1,5,4,4,0x0001)
  _ATC_SET_COND_CONST_LAST(1,5)
  _ATC_SET_COND_CONST_FIRST1(2,3,2,0x0002)
  _ATC_SET_COND_CONST_MIDDLE1(2,3,2,1,0x0009)
  _ATC_SET_COND_CONST_MIDDLE1(2,3,2,2,0x0005)
  _ATC_SET_COND_CONST_LAST(2,3)
  _ATC_SET_COND_CONST_FIRST1(3,4,3,0x002a)
  _ATC_SET_COND_CONST_MIDDLE1(3,4,3,1,0x001a)
  _ATC_SET_COND_CONST_MIDDLE1(3,4,3,2,0x0006)
  _ATC_SET_COND_CONST_MIDDLE1(3,4,3,3,0x0001)
  _ATC_SET_COND_CONST_LAST(3,4)
  _ATC_SET_COND_CONST_FIRST1(4,16,6,0x002a)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,1,0x089a)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,2,0x0a5a)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,3,0x0886)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,4,0x0a46)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,5,0x0881)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,6,0x0a41)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,7,0x049a)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,8,0x065a)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,9,0x015a)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,10,0x0486)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,11,0x0646)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,12,0x0146)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,13,0x0481)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,14,0x0641)
  _ATC_SET_COND_CONST_MIDDLE1(4,16,6,15,0x0141)
  _ATC_SET_COND_CONST_LAST(4,16)
  _ATC_SET_COND_CONST_FIRST1(5,4,3,0x002a)
  _ATC_SET_COND_CONST_MIDDLE1(5,4,3,1,0x001a)
  _ATC_SET_COND_CONST_MIDDLE1(5,4,3,2,0x0006)
  _ATC_SET_COND_CONST_MIDDLE1(5,4,3,3,0x0001)
  _ATC_SET_COND_CONST_LAST(5,4)
  _ATC_SET_COND_CONST_FIRST1(6,3,2,0x000a)
  _ATC_SET_COND_CONST_MIDDLE1(6,3,2,1,0x0006)
  _ATC_SET_COND_CONST_MIDDLE1(6,3,2,2,0x0001)
  _ATC_SET_COND_CONST_LAST(6,3)
  _ATC_SET_COND_CONST_FIRST1(7,3,2,0x0002)
  _ATC_SET_COND_CONST_MIDDLE1(7,3,2,1,0x0009)
  _ATC_SET_COND_CONST_MIDDLE1(7,3,2,2,0x0005)
  _ATC_SET_COND_CONST_LAST(7,3)
  _ATC_SET_COND_CONST_FIRST1(8,3,2,0x000a)
  _ATC_SET_COND_CONST_MIDDLE1(8,3,2,1,0x0006)
  _ATC_SET_COND_CONST_MIDDLE1(8,3,2,2,0x0001)
  _ATC_SET_COND_CONST_LAST(8,3)
  _ATC_SET_COND_CONST_FIRST1(9,4,3,0x0002)
  _ATC_SET_COND_CONST_MIDDLE1(9,4,3,1,0x0029)
  _ATC_SET_COND_CONST_MIDDLE1(9,4,3,2,0x0019)
  _ATC_SET_COND_CONST_MIDDLE1(9,4,3,3,0x0005)
  _ATC_SET_COND_CONST_LAST(9,4)
  _ATC_SET_COND_CONST_FIRST1(10,3,2,0x000a)
  _ATC_SET_COND_CONST_MIDDLE1(10,3,2,1,0x0006)
  _ATC_SET_COND_CONST_MIDDLE1(10,3,2,2,0x0001)
  _ATC_SET_COND_CONST_LAST(10,3)
  _ATC_SET_COND_CONST_FIRST1(11,3,2,0x000a)
  _ATC_SET_COND_CONST_MIDDLE1(11,3,2,1,0x0006)
  _ATC_SET_COND_CONST_MIDDLE1(11,3,2,2,0x0001)
  _ATC_SET_COND_CONST_LAST(11,3)
_ATC_END_COND_CONST

_ATC_DECLARE_CALL(1,35)
_ATC_DECLARE_BLOC(1,109)
_ATC_DECLARE_COND(1,199)
_ATC_DECLARE(1,0x1F5B585BUL,0x49381C29UL,0,0,35,_ATC_TAB_CALL(1),109,_ATC_TAB_BLOC(1),199,_ATC_TAB_COND(1))

# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"


























# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"




































































typedef  unsigned char   APEX_BYTE;     


typedef  long            APEX_INTEGER;  


typedef  unsigned long   APEX_UNSIGNED; 





typedef
   enum {
        
        NO_ERROR       = 0,
        
        NO_ACTION      = 1,
        
        NOT_AVAILABLE  = 2,
        
        INVALID_PARAM  = 3,
        
        INVALID_CONFIG = 4,
        
        INVALID_MODE   = 5,
        
        TIMED_OUT      = 6
   } RETURN_CODE_TYPE;



typedef  char            NAME_TYPE[30];    

typedef  void            (* SYSTEM_ADDRESS_TYPE);       

typedef  APEX_BYTE *     MESSAGE_ADDR_TYPE;             

typedef  APEX_INTEGER    MESSAGE_SIZE_TYPE;             

typedef  APEX_INTEGER    MESSAGE_RANGE_TYPE;            

typedef  enum { SOURCE = 0, DESTINATION = 1 } PORT_DIRECTION_TYPE;

typedef  enum { FIFO = 0, PRIORITY = 1 } QUEUING_DISCIPLINE_TYPE;


typedef  APEX_UNSIGNED   SYSTEM_TIME_TYPE;      

typedef
   
   struct {
      
      APEX_UNSIGNED   MSB_TIME;         
      
      APEX_UNSIGNED   LSB_TIME;         
   } TIME_TYPE;







# 134 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"










extern void TIMED_WAIT (
        SYSTEM_TIME_TYPE         DELAY_TIME,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void PERIODIC_WAIT (
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_TIME (
        TIME_TYPE                *TIME,          
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void REPLENISH_APERIODIC (
        SYSTEM_TIME_TYPE         BUDGET_TIME,    
        RETURN_CODE_TYPE         *RETURN_CODE ); 

# 160 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"




















typedef  NAME_TYPE            PROCESS_NAME_TYPE;        

typedef  APEX_INTEGER         PROCESS_ID_TYPE;          

typedef  APEX_INTEGER         LOCK_LEVEL_TYPE;          

typedef  APEX_UNSIGNED        STACK_SIZE_TYPE;          

typedef  APEX_INTEGER         WAITING_RANGE_TYPE;       

typedef  APEX_INTEGER         PRIORITY_TYPE;            

typedef
   enum {
        DORMANT  = 0,
        READY    = 1,
        RUNNING  = 2,
        WAITING  = 3
   } PROCESS_STATE_TYPE;

typedef  enum { SOFT = 0, HARD = 1 } DEADLINE_TYPE;

typedef
   struct {
      PROCESS_NAME_TYPE     NAME;               
      SYSTEM_ADDRESS_TYPE   ENTRY_POINT;        
      STACK_SIZE_TYPE       STACK_SIZE;         
      PRIORITY_TYPE         BASE_PRIORITY;      
      SYSTEM_TIME_TYPE      PERIOD;             
      SYSTEM_TIME_TYPE      TIME_CAPACITY;      
      DEADLINE_TYPE         DEADLINE;           
   } PROCESS_ATTRIBUTE_TYPE;

typedef
   struct {
      PROCESS_ATTRIBUTE_TYPE  ATTRIBUTES;       
      PRIORITY_TYPE           CURRENT_PRIORITY; 
      TIME_TYPE               DEADLINE_TIME;    
      PROCESS_STATE_TYPE      PROCESS_STATE;    
   } PROCESS_STATUS_TYPE;



extern void CREATE_PROCESS (
        PROCESS_ATTRIBUTE_TYPE   *ATTRIBUTES,    
        PROCESS_ID_TYPE          *PROCESS_ID,    
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void SET_PRIORITY (
        PROCESS_ID_TYPE          PROCESS_ID,     
        PRIORITY_TYPE            PRIORITY,       
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void SUSPEND_SELF (
        SYSTEM_TIME_TYPE         TIME_OUT,       
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void SUSPEND (
        PROCESS_ID_TYPE          PROCESS_ID,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void RESUME (
        PROCESS_ID_TYPE          PROCESS_ID,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void STOP_SELF (void);

extern void STOP (
        PROCESS_ID_TYPE          PROCESS_ID,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void START (
        PROCESS_ID_TYPE          PROCESS_ID,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void DELAYED_START (
        PROCESS_ID_TYPE          PROCESS_ID,     
        SYSTEM_TIME_TYPE         DELAY_TIME,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void LOCK_PREEMPTION (
        LOCK_LEVEL_TYPE          *LOCK_LEVEL,    
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void UNLOCK_PREEMPTION (
        LOCK_LEVEL_TYPE          *LOCK_LEVEL,    
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_MY_ID (
        PROCESS_ID_TYPE          *PROCESS_ID,    
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_PROCESS_ID (
        PROCESS_NAME_TYPE        PROCESS_NAME,   
        PROCESS_ID_TYPE          *PROCESS_ID,    
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_PROCESS_STATUS (
        PROCESS_ID_TYPE          PROCESS_ID,             
        PROCESS_STATUS_TYPE      *PROCESS_STATUS,        
        RETURN_CODE_TYPE         *RETURN_CODE );         

# 283 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"













typedef
   enum {
        IDLE       = 0,
        COLD_START = 1,
        WARM_START = 2,
        NORMAL     = 3
   } OPERATING_MODE_TYPE;

typedef  APEX_INTEGER    PARTITION_ID_TYPE;     

typedef
   struct {
      PARTITION_ID_TYPE    IDENTIFIER;          
      SYSTEM_TIME_TYPE     PERIOD;              
      SYSTEM_TIME_TYPE     DURATION;            
      LOCK_LEVEL_TYPE      LOCK_LEVEL;          
      OPERATING_MODE_TYPE  OPERATING_MODE;      
   } PARTITION_STATUS_TYPE;

typedef
   enum {
        NORMAL_START         = 0,
        PARTITION_RESTART    = 1,
        HM_MODULE_RESTART    = 2,
        HM_PARTITION_RESTART = 3
   } START_CONDITION_TYPE;



extern void GET_PARTITION_STATUS (
        PARTITION_STATUS_TYPE    *PARTITION_STATUS,      
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void SET_PARTITION_MODE (
        OPERATING_MODE_TYPE      OPERATING_MODE,         
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void GET_PARTITION_START_CONDITION (
        START_CONDITION_TYPE     *START_CONDITION,       
        RETURN_CODE_TYPE         *RETURN_CODE );         

# 338 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"












typedef  NAME_TYPE                LOGBOOK_NAME_TYPE;    

typedef  APEX_INTEGER             LOGBOOK_ID_TYPE;      

typedef  enum { ABORTED = 0, IN_PROGRESS = 1, COMPLETE = 2 } WRITE_STATUS_TYPE;

typedef
   struct {
      
      MESSAGE_SIZE_TYPE         MAX_MESSAGE_SIZE;               
      
      MESSAGE_RANGE_TYPE        MAX_NB_LOGGED_MESSAGE;          
      
      MESSAGE_RANGE_TYPE        MAX_NB_IN_PROGRESS_MESSAGE;     
      
      MESSAGE_RANGE_TYPE        NB_LOGGED_MESSAGE;              
      
      MESSAGE_RANGE_TYPE        NB_IN_PROGRESS_MESSAGE;         
      
      MESSAGE_RANGE_TYPE        NB_ABORTED_MESSAGE;             
   } LOGBOOK_STATUS_TYPE;



extern void CREATE_LOGBOOK (
        LOGBOOK_NAME_TYPE        LOGBOOK_NAME,                   
        MESSAGE_SIZE_TYPE        MAX_MESSAGE_SIZE,               
        MESSAGE_RANGE_TYPE       MAX_NB_LOGGED_MESSAGE,          
        MESSAGE_RANGE_TYPE       MAX_NB_IN_PROGRESS_MESSAGE,     
        LOGBOOK_ID_TYPE          *LOGBOOK_ID,                    
        RETURN_CODE_TYPE         *RETURN_CODE );                 

extern void READ_LOGBOOK (
         LOGBOOK_ID_TYPE         LOGBOOK_ID,     
         MESSAGE_RANGE_TYPE      LOGBOOK_ENTRY,  
         MESSAGE_ADDR_TYPE       MESSAGE_ADDR,   
         MESSAGE_SIZE_TYPE       *LENGTH,        
         WRITE_STATUS_TYPE       *WRITE_STATUS,  
         RETURN_CODE_TYPE        *RETURN_CODE ); 

extern void WRITE_LOGBOOK (
         LOGBOOK_ID_TYPE         LOGBOOK_ID,     
       
         MESSAGE_ADDR_TYPE       MESSAGE_ADDR,   
         MESSAGE_SIZE_TYPE       LENGTH,         
         RETURN_CODE_TYPE        *RETURN_CODE ); 

extern void CLEAR_LOGBOOK (
        LOGBOOK_ID_TYPE          LOGBOOK_ID,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_LOGBOOK_ID (
        LOGBOOK_NAME_TYPE        LOGBOOK_NAME,   
        LOGBOOK_ID_TYPE          *LOGBOOK_ID,    
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_LOGBOOK_STATUS (
        LOGBOOK_ID_TYPE          LOGBOOK_ID,             
        LOGBOOK_STATUS_TYPE      *LOGBOOK_STATUS,        
        RETURN_CODE_TYPE         *RETURN_CODE );         

# 412 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"












typedef  NAME_TYPE       SAMPLING_PORT_NAME_TYPE;       

typedef  APEX_INTEGER    SAMPLING_PORT_ID_TYPE;         

typedef  enum { INVALID = 0, VALID = 1 } VALIDITY_TYPE;

typedef
   struct {
      MESSAGE_SIZE_TYPE        MAX_MESSAGE_SIZE;        
      PORT_DIRECTION_TYPE      PORT_DIRECTION;          
      SYSTEM_TIME_TYPE         REFRESH_PERIOD;          
      VALIDITY_TYPE            LAST_MSG_VALIDITY;       
   } SAMPLING_PORT_STATUS_TYPE;



extern void CREATE_SAMPLING_PORT (
        SAMPLING_PORT_NAME_TYPE    SAMPLING_PORT_NAME,   
        MESSAGE_SIZE_TYPE          MAX_MESSAGE_SIZE,     
        PORT_DIRECTION_TYPE        PORT_DIRECTION,       
        SYSTEM_TIME_TYPE           REFRESH_PERIOD,       
        SAMPLING_PORT_ID_TYPE      *SAMPLING_PORT_ID,    
        RETURN_CODE_TYPE           *RETURN_CODE );       

extern void WRITE_SAMPLING_MESSAGE (
        SAMPLING_PORT_ID_TYPE      SAMPLING_PORT_ID,     
       
        MESSAGE_ADDR_TYPE          MESSAGE_ADDR,         
        MESSAGE_SIZE_TYPE          LENGTH,               
        RETURN_CODE_TYPE           *RETURN_CODE );       

extern void READ_SAMPLING_MESSAGE (
        SAMPLING_PORT_ID_TYPE      SAMPLING_PORT_ID,     
        MESSAGE_ADDR_TYPE          MESSAGE_ADDR,         
        MESSAGE_SIZE_TYPE          *LENGTH,              
        VALIDITY_TYPE              *VALIDITY,            
        RETURN_CODE_TYPE           *RETURN_CODE );       

extern void GET_SAMPLING_PORT_ID (
        SAMPLING_PORT_NAME_TYPE    SAMPLING_PORT_NAME,   
        SAMPLING_PORT_ID_TYPE      *SAMPLING_PORT_ID,    
        RETURN_CODE_TYPE           *RETURN_CODE );       

extern void GET_SAMPLING_PORT_STATUS (
        SAMPLING_PORT_ID_TYPE      SAMPLING_PORT_ID,             
        SAMPLING_PORT_STATUS_TYPE  *SAMPLING_PORT_STATUS,        
        RETURN_CODE_TYPE           *RETURN_CODE );               

# 473 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"












typedef  NAME_TYPE       QUEUING_PORT_NAME_TYPE;        

typedef  APEX_INTEGER    QUEUING_PORT_ID_TYPE;          

typedef
   struct {
      MESSAGE_RANGE_TYPE      NB_MESSAGE;               
      MESSAGE_RANGE_TYPE      MAX_NB_MESSAGE;           
      MESSAGE_SIZE_TYPE       MAX_MESSAGE_SIZE;         
      PORT_DIRECTION_TYPE     PORT_DIRECTION;           
      WAITING_RANGE_TYPE      WAITING_PROCESSES;        
   } QUEUING_PORT_STATUS_TYPE;

typedef APEX_INTEGER  UDP_PORT_TYPE;                    

typedef APEX_INTEGER  IP_ADDRESS_TYPE;                  

typedef
   struct {
      UDP_PORT_TYPE            UDP_PORT;                
      IP_ADDRESS_TYPE          IP_ADDRESS;              
   } QUEUING_ADDRESS_TYPE;

extern void CREATE_QUEUING_PORT (
        QUEUING_PORT_NAME_TYPE   QUEUING_PORT_NAME,      
        MESSAGE_SIZE_TYPE        MAX_MESSAGE_SIZE,       
        MESSAGE_RANGE_TYPE       MAX_NB_MESSAGE,         
        PORT_DIRECTION_TYPE      PORT_DIRECTION,         
        QUEUING_DISCIPLINE_TYPE  QUEUING_DISCIPLINE,     
        QUEUING_PORT_ID_TYPE     *QUEUING_PORT_ID,       
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void SEND_QUEUING_MESSAGE (
        QUEUING_PORT_ID_TYPE     QUEUING_PORT_ID,        
       
        MESSAGE_ADDR_TYPE        MESSAGE_ADDR,           
        MESSAGE_SIZE_TYPE        LENGTH,                 
        SYSTEM_TIME_TYPE         TIME_OUT,               
        RETURN_CODE_TYPE         *RETURN_CODE);          

extern void RECEIVE_QUEUING_MESSAGE (
        QUEUING_PORT_ID_TYPE     QUEUING_PORT_ID,        
        SYSTEM_TIME_TYPE         TIME_OUT,               
        MESSAGE_ADDR_TYPE        MESSAGE_ADDR,           
        MESSAGE_SIZE_TYPE        *LENGTH,                
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void GET_QUEUING_PORT_ID (
        QUEUING_PORT_NAME_TYPE   QUEUING_PORT_NAME,      
        QUEUING_PORT_ID_TYPE     *QUEUING_PORT_ID,       
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void GET_QUEUING_PORT_STATUS (
        QUEUING_PORT_ID_TYPE     QUEUING_PORT_ID,        
        QUEUING_PORT_STATUS_TYPE *QUEUING_PORT_STATUS,   
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void ENABLE_QUEUING_ADDRESSING (
        QUEUING_PORT_ID_TYPE QUEUING_PORT_ID,            
        RETURN_CODE_TYPE *RETURN_CODE);                  

extern void GET_QUEUING_SOURCE_ADDRESS (
        QUEUING_PORT_ID_TYPE QUEUING_PORT_ID,            
        QUEUING_ADDRESS_TYPE *SOURCE_ADDRESS,            
        RETURN_CODE_TYPE *RETURN_CODE );                 

extern void SET_QUEUING_DESTINATION_ADDRESS (
        QUEUING_PORT_ID_TYPE QUEUING_PORT_ID,            
        QUEUING_ADDRESS_TYPE *DESTINATION_ADDRESS,        
        RETURN_CODE_TYPE *RETURN_CODE );                 

# 557 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"












typedef  NAME_TYPE       BUFFER_NAME_TYPE;      

typedef  APEX_INTEGER    BUFFER_ID_TYPE;        

typedef
   struct {
      MESSAGE_RANGE_TYPE  NB_MESSAGE;           
      MESSAGE_RANGE_TYPE  MAX_NB_MESSAGE;       
      MESSAGE_SIZE_TYPE   MAX_MESSAGE_SIZE;     
      WAITING_RANGE_TYPE  WAITING_PROCESSES;    
   } BUFFER_STATUS_TYPE;



extern void CREATE_BUFFER (
        BUFFER_NAME_TYPE         BUFFER_NAME,            
        MESSAGE_SIZE_TYPE        MAX_MESSAGE_SIZE,       
        MESSAGE_RANGE_TYPE       MAX_NB_MESSAGE,         
        QUEUING_DISCIPLINE_TYPE  QUEUING_DISCIPLINE,     
        BUFFER_ID_TYPE           *BUFFER_ID,             
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void SEND_BUFFER (
        BUFFER_ID_TYPE           BUFFER_ID,      
       
        MESSAGE_ADDR_TYPE        MESSAGE_ADDR,   
        MESSAGE_SIZE_TYPE        LENGTH,         
        SYSTEM_TIME_TYPE         TIME_OUT,       
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void RECEIVE_BUFFER (
        BUFFER_ID_TYPE           BUFFER_ID,      
        SYSTEM_TIME_TYPE         TIME_OUT,       
        MESSAGE_ADDR_TYPE        MESSAGE_ADDR,   
        MESSAGE_SIZE_TYPE        *LENGTH,        
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_BUFFER_ID (
        BUFFER_NAME_TYPE         BUFFER_NAME,    
        BUFFER_ID_TYPE           *BUFFER_ID,     
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_BUFFER_STATUS (
        BUFFER_ID_TYPE           BUFFER_ID,      
        BUFFER_STATUS_TYPE       *BUFFER_STATUS, 
        RETURN_CODE_TYPE         *RETURN_CODE ); 

# 617 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"












typedef  NAME_TYPE       BLACKBOARD_NAME_TYPE;  

typedef  APEX_INTEGER    BLACKBOARD_ID_TYPE;    

typedef  enum { EMPTY = 0, OCCUPIED = 1 } EMPTY_INDICATOR_TYPE;

typedef
   struct {
      EMPTY_INDICATOR_TYPE  EMPTY_INDICATOR;    
      MESSAGE_SIZE_TYPE     MAX_MESSAGE_SIZE;   
      WAITING_RANGE_TYPE    WAITING_PROCESSES;  
   } BLACKBOARD_STATUS_TYPE;



extern void CREATE_BLACKBOARD (
        BLACKBOARD_NAME_TYPE     BLACKBOARD_NAME,        
        MESSAGE_SIZE_TYPE        MAX_MESSAGE_SIZE,       
        BLACKBOARD_ID_TYPE       *BLACKBOARD_ID,         
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void DISPLAY_BLACKBOARD (
        BLACKBOARD_ID_TYPE       BLACKBOARD_ID,          
       
        MESSAGE_ADDR_TYPE        MESSAGE_ADDR,           
        MESSAGE_SIZE_TYPE        LENGTH,                 
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void READ_BLACKBOARD (
        BLACKBOARD_ID_TYPE       BLACKBOARD_ID,          
        SYSTEM_TIME_TYPE         TIME_OUT,               
        MESSAGE_ADDR_TYPE        MESSAGE_ADDR,           
        MESSAGE_SIZE_TYPE        *LENGTH,                
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void CLEAR_BLACKBOARD (
        BLACKBOARD_ID_TYPE       BLACKBOARD_ID,          
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void GET_BLACKBOARD_ID (
        BLACKBOARD_NAME_TYPE     BLACKBOARD_NAME,        
        BLACKBOARD_ID_TYPE       *BLACKBOARD_ID,         
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void GET_BLACKBOARD_STATUS (
        BLACKBOARD_ID_TYPE       BLACKBOARD_ID,          
        BLACKBOARD_STATUS_TYPE   *BLACKBOARD_STATUS,     
        RETURN_CODE_TYPE         *RETURN_CODE );         

# 679 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"














typedef  NAME_TYPE       SEMAPHORE_NAME_TYPE;   

typedef  APEX_INTEGER    SEMAPHORE_ID_TYPE;     

typedef  APEX_INTEGER    SEMAPHORE_VALUE_TYPE;  

typedef
   struct {
      SEMAPHORE_VALUE_TYPE  CURRENT_VALUE;      
      SEMAPHORE_VALUE_TYPE  MAXIMUM_VALUE;      
      WAITING_RANGE_TYPE    WAITING_PROCESSES;  
   } SEMAPHORE_STATUS_TYPE;



extern void CREATE_SEMAPHORE (
        SEMAPHORE_NAME_TYPE      SEMAPHORE_NAME,         
        SEMAPHORE_VALUE_TYPE     CURRENT_VALUE,          
        SEMAPHORE_VALUE_TYPE     MAXIMUM_VALUE,          
        QUEUING_DISCIPLINE_TYPE  QUEUING_DISCIPLINE,     
        SEMAPHORE_ID_TYPE        *SEMAPHORE_ID,          
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void WAIT_SEMAPHORE (
        SEMAPHORE_ID_TYPE        SEMAPHORE_ID,           
        SYSTEM_TIME_TYPE         TIME_OUT,               
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void SIGNAL_SEMAPHORE (
        SEMAPHORE_ID_TYPE        SEMAPHORE_ID,           
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void GET_SEMAPHORE_ID (
        SEMAPHORE_NAME_TYPE      SEMAPHORE_NAME,         
        SEMAPHORE_ID_TYPE        *SEMAPHORE_ID,          
        RETURN_CODE_TYPE         *RETURN_CODE );         

extern void GET_SEMAPHORE_STATUS (
        SEMAPHORE_ID_TYPE        SEMAPHORE_ID,           
        SEMAPHORE_STATUS_TYPE    *SEMAPHORE_STATUS,      
        RETURN_CODE_TYPE         *RETURN_CODE );         

# 736 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"












typedef  NAME_TYPE       EVENT_NAME_TYPE;       

typedef  APEX_INTEGER    EVENT_ID_TYPE;         

typedef  enum { DOWN = 0, UP = 1 } EVENT_STATE_TYPE;

typedef
   struct {
      EVENT_STATE_TYPE    EVENT_STATE;          
      WAITING_RANGE_TYPE  WAITING_PROCESSES;    
   } EVENT_STATUS_TYPE;



extern void CREATE_EVENT (
        EVENT_NAME_TYPE          EVENT_NAME,     
        EVENT_ID_TYPE            *EVENT_ID,      
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void SET_EVENT (
        EVENT_ID_TYPE            EVENT_ID,       
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void RESET_EVENT (
        EVENT_ID_TYPE            EVENT_ID,       
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void WAIT_EVENT (
        EVENT_ID_TYPE            EVENT_ID,       
        SYSTEM_TIME_TYPE         TIME_OUT,       
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_EVENT_ID (
        EVENT_NAME_TYPE          EVENT_NAME,     
        EVENT_ID_TYPE            *EVENT_ID,      
        RETURN_CODE_TYPE         *RETURN_CODE ); 

extern void GET_EVENT_STATUS (
        EVENT_ID_TYPE            EVENT_ID,       
        EVENT_STATUS_TYPE        *EVENT_STATUS,  
        RETURN_CODE_TYPE         *RETURN_CODE ); 

# 791 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"












typedef  APEX_INTEGER   ERROR_MESSAGE_SIZE_TYPE;        

typedef  APEX_BYTE      ERROR_MESSAGE_TYPE[64];     

typedef
   enum {
        DEADLINE_MISSED   = 0,
        APPLICATION_ERROR = 1,
        NUMERIC_ERROR     = 2,
        ILLEGAL_REQUEST   = 3,
        STACK_OVERFLOW    = 4,
        MEMORY_VIOLATION  = 5,
        HARDWARE_FAULT    = 6,
        POWER_FAIL        = 7
   } ERROR_CODE_TYPE;

typedef
   struct {
      ERROR_CODE_TYPE         ERROR_CODE;               
      ERROR_MESSAGE_TYPE      ERROR_MESSAGE;            
      ERROR_MESSAGE_SIZE_TYPE LENGTH;                   
      PROCESS_ID_TYPE         FAILED_PROCESS_ID;        
      SYSTEM_ADDRESS_TYPE     FAILED_ADDRESS;           
   } ERROR_STATUS_TYPE;



extern void CREATE_ERROR_HANDLER (
          SYSTEM_ADDRESS_TYPE      ENTRY_POINT,          
          STACK_SIZE_TYPE          STACK_SIZE,           
          RETURN_CODE_TYPE         *RETURN_CODE );       

extern void GET_ERROR_STATUS (
          ERROR_STATUS_TYPE        *ERROR_STATUS,        
          RETURN_CODE_TYPE         *RETURN_CODE );       

extern void RAISE_APPLICATION_ERROR (
          ERROR_CODE_TYPE          ERROR_CODE,           
          MESSAGE_ADDR_TYPE        MESSAGE_ADDR,         
          ERROR_MESSAGE_SIZE_TYPE  LENGTH,               
          RETURN_CODE_TYPE         *RETURN_CODE );       

# 846 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"
# 28 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"


# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"
































typedef char				T_char;
# 35 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned char		T_uchar;
# 40 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"







typedef unsigned long		T_boolean;
# 49 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef char				T_int8;
# 55 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"


typedef short				T_int16;
# 59 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"


typedef long				T_int32;
# 63 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef unsigned char		T_uint8;
# 69 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned short		T_uint16;
# 74 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned long		T_uint32;
# 79 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"





typedef unsigned long		T_ubfield;
# 86 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef float				T_float32;
# 92 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef double				T_float64;
# 97 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef void				*T_ptr;
# 103 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned long		T_addr;
# 108 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"





# 114 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"
# 31 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"




# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_desc_config.h"





























# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_ifc.h"












































typedef enum
{
	
	K_LBFL_E_FSC_ERROR_CATEGORY_NOT_DEFINED,

	
	K_LBFL_E_FSC_ERROR_CATEGORY_SWDEFAULT_ERR_STATE,

	
	K_LBFL_E_FSC_ERROR_CATEGORY_INIT,

	
	K_LBFL_E_FSC_ERROR_CATEGORY_REENTRANCE,
	
	K_LBFL_E_FSC_ERROR_CATEGORY_LBFL_WRITE
	
} T_lbfl_e_fsc_error_category;



typedef enum
{
    


    K_LBFL_E_FSC_ERR_NONE,
        
        
        K_LBFL_E_FSC_ERR_INIT,
        
        
        K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE,
        
        
        K_LBFL_E_FSC_ERR_REENTRANCE,
        
        
        K_LBFL_E_FSC_ERR_LBFL_WRITE,
        
        
        K_LBFL_E_FSC_ERR_PROCESS_ID,
        
        
        K_LBFL_E_FSC_ERR_PTR_NULL,
        
        
        K_LBFL_E_FSC_SERV_REPORT_APPLICATION_MESSAGE,
        
        	
        K_LBFL_E_FSC_SERV_RAISE_APPLICATION_ERROR,
        
        	
        K_LBFL_E_FSC_SERV_QUEUING_PORT_SEND,
        
        	
        K_LBFL_E_FSC_OUT_OF_BOUNDARY,
        
        
        K_LBFL_E_FSC_ERR_CTXT_SIZE,
        
        
        K_LBFL_E_FSC_WARNING_ERR_CTXT_SIZE,
        
        

        K_LBFL_E_FSC_WARNING_ERR_NONE,
        
        
        K_LBFL_E_FSC_WARNING_ERR_PTR_NULL,
        
        
        K_LBFL_E_FSC_WARNING_ERR_PROCESS_ID,

        
        K_LBFL_E_FSC_WARNING_ERR_SWDEFAULT_ERR_STATE,
        
        
        K_LBFL_E_FSC_ERR_NB	
        
} T_lbfl_e_fsc_err_index;















# 141 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_ifc.h"
# 31 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_desc_config.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_desc_ifc.h"


























# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"

















































































































# 28 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_desc_ifc.h"



















typedef enum
{	
	K_LBFL_E_RETURN_NOT_CONFIRM,
	K_LBFL_E_RETURN_CONFIRM	
} T_lbfl_e_return_confirm;	


typedef enum
{
	K_LBFL_E_CRITICALITY_NOT_DEFINED,
	K_LBFL_E_WARNING,
	K_LBFL_E_FATAL
} T_lbfl_e_criticality;

typedef enum
{
	K_LBFL_E_FAIL_CLASS_NOT_DEFINED,
	K_LBFL_E_FAIL_CLASS_1,
	K_LBFL_E_FAIL_CLASS_2,
	K_LBFL_E_FAIL_CLASS_3,
	K_LBFL_E_FAIL_CLASS_4,
	K_LBFL_E_FAIL_CLASS_5,
	K_LBFL_E_FAIL_CLASS_6,
	K_LBFL_E_FAIL_CLASS_7,
	K_LBFL_E_FAIL_CLASS_8
} T_lbfl_e_fail_class;


typedef enum
{
	K_LBFL_E_FLEETING,
	K_LBFL_E_APP_DISAPP,
	K_LBFL_E_LATCHED
} T_lbfl_e_confirm_type;


typedef struct
{
	T_uint32				ul_nb_occ;
	T_uint32				ul_nb_cycl;
	T_lbfl_e_confirm_type	e_confirm_type;
} T_lbfl_r_confirmation;





typedef  struct
{
	T_lbfl_e_criticality		e_criticality;
	T_lbfl_e_fail_class			e_fail_class;
	T_lbfl_r_confirmation		r_confirmation; 
	T_uint32					ul_category;
	T_char						tuc_error_label[50];
	
} T_lbfl_r_error_config;


typedef const T_lbfl_r_error_config T_lbfl_r_cst_error_config;


typedef T_lbfl_r_cst_error_config *T_lbfl_pr_error_config;






typedef struct
{
	T_char						tuc_fsc_name[4];
	T_uint32					ul_nb_errors;
	T_lbfl_pr_error_config		pr_error_config;
	
} T_lbfl_r_fsc_error_config;

typedef const T_lbfl_r_fsc_error_config T_lbfl_r_cst_fsc_error_config;


typedef T_lbfl_r_cst_fsc_error_config *T_lbfl_pr_fsc_error_config;















# 143 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_desc_ifc.h"
# 32 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_desc_config.h"






































extern T_lbfl_r_cst_error_config		TR_LBFL_FSC_ERR_CONFIG[K_LBFL_E_FSC_ERR_NB];

extern T_lbfl_r_cst_fsc_error_config	R_LBFL_FSC_ERR_CONFIG;



# 77 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_desc_config.h"
# 36 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_init.h"




























# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_desc_ifc.h"














































































































































# 30 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_init.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_ifc.h"












































































































































# 31 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_init.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_mng_ifc.h"




























# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_desc_ifc.h"














































































































































# 30 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_mng_ifc.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































# 31 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_mng_ifc.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"



# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_OS_INTERFACE_TYPES.t"




# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_API_COMMON.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































# 6 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_OS_INTERFACE_TYPES.t"


# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_MODSPI_COMMON.h"








































typedef struct
{
   APEX_UNSIGNED  SPARE_MODE_STATUS_BITS :27;   
   APEX_UNSIGNED  ENABLE_GDB             :1;    
   APEX_UNSIGNED  SHOP_LOAD              :1;    
   APEX_UNSIGNED  SHOP_TEST              :1;    
   APEX_UNSIGNED  ON_BENCH               :1;    
   APEX_UNSIGNED  ON_GROUND              :1;    
} MODE_STATUS_REGISTER_TYPE;


typedef enum
{
   SHORT_POWER_CUT_RESET  = 0x00,
   LONG_POWER_CUT_RESET   = 0x01,
   WATCHDOG_RESET         = 0x02,
   AIRBUS_EXT_RESET       = 0x04,
   SOFTWARE_RESET         = 0x10
} RESET_SOURCE_TYPE;


typedef enum
{
   OPS        = 0,
   PASSIVE_DL = 1
} MODULE_MODE_TYPE;


typedef enum
{
   DEFAULT_REASON       =  0,
   EMPTY_DL             =  1,  
   HALT                 =  2,
   PASSIVE              =  3,
   DL                   =  4,
   DL_END               =  5,
   SAFETY_TEST          =  6,
   MODULE_TEST          =  7,
   FAILURE_RST          =  9,
   IM_SYNC              = 10,  
   MODULE_TEST_CMF      = 11,
   SAFETY_TEST_CMF      = 12
} RESET_REASON_TYPE;


typedef enum {
   NOT_ACTIVATED  = 0,
   ACTIVATED      = 1
} SAFETY_TEST_EXECUTION_TYPE;


typedef struct
{
   MODE_STATUS_REGISTER_TYPE  MODE_STATUS;              
   RESET_SOURCE_TYPE          RESET_SOURCE;             
   MODULE_MODE_TYPE           CURRENT_MODULE_MODE;      
   MODULE_MODE_TYPE           PREVIOUS_MODULE_MODE;     
   RESET_REASON_TYPE          RESET_REASON;             
   APEX_UNSIGNED              SELECT_CONFIG_INDEX;      
   SAFETY_TEST_EXECUTION_TYPE SAFETY_TEST_EXECUTION;    
} MODULE_STATUS_TYPE;


typedef enum
{
   INTERNAL_SYNCHRONIZATION = 0,
   EXTERNAL_SYNCHRONIZATION = 1
} MODULE_SYNCHRONIZATION_SOURCE_TYPE;







extern void FREEZE(void);

extern void UNFREEZE(void);

extern void SET_MODULE_MODE(
     MODULE_MODE_TYPE     MODULE_MODE,         
     RESET_REASON_TYPE    RESET_REASON,        
     APEX_UNSIGNED        SELECT_CONFIG_INDEX, 
     RETURN_CODE_TYPE    *RETURN_CODE);        

extern void SET_MODULE_MODE_CONDITIONALLY(
     MODULE_MODE_TYPE     MODULE_MODE,         
     RESET_REASON_TYPE    RESET_REASON,        
     APEX_UNSIGNED        SELECT_CONFIG_INDEX, 
     RETURN_CODE_TYPE    *RETURN_CODE);        

extern void GET_MODULE_STATUS(
     MODULE_STATUS_TYPE  *MODULE_STATUS,       
     RETURN_CODE_TYPE    *RETURN_CODE);        

extern void GET_MODULE_SYNCHRONIZATION_SOURCE(
     MODULE_SYNCHRONIZATION_SOURCE_TYPE *SYNCHRO_SOURCE,       
     RETURN_CODE_TYPE                   *RETURN_CODE);         

extern void GET_MODULE_TIME(
     TIME_TYPE        *MODULE_TIME,            
     RETURN_CODE_TYPE *RETURN_CODE);           



# 9 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_OS_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_ISSPI_COMMON.h"









































typedef struct
{
   APEX_UNSIGNED MSB;                   
   APEX_UNSIGNED LSB;                   
} ABSOLUTE_TIME_TYPE;


















extern void GET_IS_PROCESS_STATUS (
    PARTITION_ID_TYPE          PARTITION_ID,           
    PROCESS_ID_TYPE            PROCESS_ID,             
    PROCESS_NAME_TYPE         *PROCESS_NAME,           
    SYSTEM_ADDRESS_TYPE       *STACK_HEAD,             
    STACK_SIZE_TYPE           *STACK_SIZE,             
    SYSTEM_ADDRESS_TYPE       *CURRENT_STACK_TAIL,     
    RETURN_CODE_TYPE          *RETURN_CODE );          

extern void GET_PROCESS_STACK_EMPTY_MEMORY_ITEM (
    APEX_UNSIGNED             *EMPTY_MEMORY_ITEM,      
    RETURN_CODE_TYPE          *RETURN_CODE  );         














typedef struct
{
   SAMPLING_PORT_NAME_TYPE              SAMPLING_PORT_NAME;             
   PORT_DIRECTION_TYPE                  SAMPLING_PORT_DIRECTION;        
   MESSAGE_SIZE_TYPE                    MAX_MESSAGE_SIZE;               
   SYSTEM_TIME_TYPE                     REFRESH_PERIOD;                 
   RETURN_CODE_TYPE                     RETURN_CODE;                    
} SAMPLING_PORT_CREATION_RECORD_TYPE;





extern void READ_FAILED_SAMPLING_PORT_CREATION_RECORD (
    PARTITION_ID_TYPE                     PARTITION_ID,        
    APEX_UNSIGNED                        *NB_CREATION_FAILURE, 
    APEX_UNSIGNED                        *NB_LOGGED_FAILURE,   
    SAMPLING_PORT_CREATION_RECORD_TYPE  **FIRST_TRACE_RECORD,  
    RETURN_CODE_TYPE                     *RETURN_CODE );       


extern void GET_IS_SAMPLING_PORT_STATUS (
    PARTITION_ID_TYPE            PARTITION_ID,                 
    SAMPLING_PORT_ID_TYPE        SAMPLING_PORT_ID,             
    SAMPLING_PORT_NAME_TYPE     *SAMPLING_PORT_NAME,           
    MESSAGE_SIZE_TYPE           *MAX_MESSAGE_SIZE,             
    PORT_DIRECTION_TYPE         *SAMPLING_PORT_DIRECTION,      
    SYSTEM_TIME_TYPE            *REFRESH_PERIOD,               
    RETURN_CODE_TYPE            *RETURN_CODE );                















typedef struct
{
   QUEUING_PORT_NAME_TYPE               QUEUING_PORT_NAME;      
   PORT_DIRECTION_TYPE                  QUEUING_PORT_DIRECTION; 
   MESSAGE_SIZE_TYPE                    MAX_MESSAGE_SIZE;       
   MESSAGE_RANGE_TYPE                   MAX_NB_MESSAGE;         
   QUEUING_DISCIPLINE_TYPE              QUEUING_DISCIPLINE;     
   RETURN_CODE_TYPE                     RETURN_CODE;            
} QUEUING_PORT_CREATION_RECORD_TYPE;





extern void READ_FAILED_QUEUING_PORT_CREATION_RECORD (
    PARTITION_ID_TYPE                    PARTITION_ID,         
    APEX_UNSIGNED                       *NB_CREATION_FAILURE,  
    APEX_UNSIGNED                       *NB_LOGGED_FAILURE,    
    QUEUING_PORT_CREATION_RECORD_TYPE  **FIRST_TRACE_RECORD,   
    RETURN_CODE_TYPE                    *RETURN_CODE  );       

extern void GET_IS_QUEUING_PORT_STATUS (
    PARTITION_ID_TYPE            PARTITION_ID,                 
    QUEUING_PORT_ID_TYPE         QUEUING_PORT_ID,              
    QUEUING_PORT_NAME_TYPE      *QUEUING_PORT_NAME,            
    MESSAGE_RANGE_TYPE          *MAX_NB_MESSAGE,               
    MESSAGE_SIZE_TYPE           *MAX_MESSAGE_SIZE,             
    PORT_DIRECTION_TYPE         *QUEUING_PORT_DIRECTION,       
    QUEUING_DISCIPLINE_TYPE     *QUEUING_DISCIPLINE,           
    RETURN_CODE_TYPE            *RETURN_CODE );                

extern void GET_IS_QUEUING_PORT_LOAD (
    PARTITION_ID_TYPE            PARTITION_ID,                 
    QUEUING_PORT_ID_TYPE         QUEUING_PORT_ID,              
    MESSAGE_RANGE_TYPE          *MAX_NB_PENDING_MESSAGE,       
    MESSAGE_RANGE_TYPE          *CURRENT_NB_MESSAGE,           
    RETURN_CODE_TYPE            *RETURN_CODE );                














typedef enum
{
   IS_BOOLEAN_FALSE = 0,
   IS_BOOLEAN_TRUE  = 1
} IS_BOOLEAN_TYPE;

typedef struct
{
   MODULE_MODE_TYPE    MODULE_MODE;     
   IS_BOOLEAN_TYPE     GROUND_COND;     
   IS_BOOLEAN_TYPE     MEM_CUT_5S;      
   IS_BOOLEAN_TYPE     MODULE_RESET;    
   IS_BOOLEAN_TYPE     SHOP_DISCRETE;   
   IS_BOOLEAN_TYPE     MEM_PPP_KO;      
   IS_BOOLEAN_TYPE     MEM_POST_KO;     
   IS_BOOLEAN_TYPE     MEM_LOADS_KO;    
   IS_BOOLEAN_TYPE     PASSIVE_REQUEST; 
   IS_BOOLEAN_TYPE     DL_REQUEST;      
   IS_BOOLEAN_TYPE     MANUAL_RESET;    
} MODULE_STATUS_TRACE_TYPE;





extern void READ_MODULE_STATUS_TRACE (
    APEX_UNSIGNED                IN_NB_TRACE,          
    MODULE_STATUS_TRACE_TYPE    *MODULE_STATUS,        
    APEX_UNSIGNED               *OUT_NB_TRACE,         
    VALIDITY_TYPE               *TRACE_VALIDITY,       
    RETURN_CODE_TYPE            *RETURN_CODE );        













typedef enum
{
   NORMAL_REQUEST               = 0
} PARTITION_NORMAL_REASON_TYPE;

typedef enum
{
   IDLE_REQUEST                 = 0,
   HM_REQUEST                   = 1,
   APPLICATION_RESET_REQUEST    = 2
} PARTITION_IDLE_REASON_TYPE;

typedef struct
{
   OPERATING_MODE_TYPE          PARTITION_MODE; 
   START_CONDITION_TYPE         RESTART_REASON; 
   PARTITION_NORMAL_REASON_TYPE NORMAL_REASON;  
   PARTITION_IDLE_REASON_TYPE   IDLE_REASON;    
   ABSOLUTE_TIME_TYPE           DATE;           
} PARTITION_STATUS_TRACE_TYPE;





extern void READ_PARTITION_STATUS_TRACE (
    PARTITION_ID_TYPE             PARTITION_ID,        
    APEX_UNSIGNED                 IN_NB_TRACE,         
    PARTITION_STATUS_TRACE_TYPE  *PARTITION_STATUS,    
    APEX_UNSIGNED                *OUT_NB_TRACE,        
    VALIDITY_TYPE                *TRACE_VALIDITY,      
    RETURN_CODE_TYPE             *RETURN_CODE  );      





















 
















typedef struct
{
   APEX_BYTE            TRACE_TYPE;     
   APEX_BYTE            ACTIVITY_TYPE;  
   APEX_BYTE            PARTITION_ID;   
   APEX_BYTE            ITEM_ID;        
}  MODULE_ACTIVITY_INFO_TYPE;


typedef struct
{
   MODULE_ACTIVITY_INFO_TYPE    MODULE_ACTIVITY_INFO;   
   ABSOLUTE_TIME_TYPE           DATE;                   
} MODULE_ACTIVITY_TRACE_TYPE;





extern void READ_MODULE_ACTIVITY_TRACE (
    APEX_UNSIGNED                IN_NB_TRACE,                  
    MODULE_ACTIVITY_TRACE_TYPE  *MODULE_ACTIVITY_TRACE,        
    APEX_UNSIGNED               *OUT_NB_TRACE,                 
    VALIDITY_TYPE               *TRACE_VALIDITY,               
    RETURN_CODE_TYPE            *RETURN_CODE ) ;               

















extern void GET_USER_CFG_TABLE_ADDRESS  (
    SYSTEM_ADDRESS_TYPE        *P_USER_CFG_ADDR,       
    RETURN_CODE_TYPE           *RETURN_CODE );         


















extern void READ_IS_LOGBOOK (
    PARTITION_ID_TYPE       PARTITION_ID,      
    LOGBOOK_ID_TYPE         LOGBOOK_ID,        
    MESSAGE_RANGE_TYPE      LOGBOOK_ENTRY,     
    MESSAGE_ADDR_TYPE       MESSAGE_ADDR,      
    MESSAGE_SIZE_TYPE      *LENGTH,            
    WRITE_STATUS_TYPE      *WRITE_STATUS,      
    RETURN_CODE_TYPE       *RETURN_CODE);      

extern void GET_IS_LOGBOOK_STATUS (
    PARTITION_ID_TYPE       PARTITION_ID,      
    LOGBOOK_ID_TYPE         LOGBOOK_ID,        
    LOGBOOK_NAME_TYPE      *LOGBOOK_NAME,      
    LOGBOOK_STATUS_TYPE    *LOGBOOK_STATUS,    
    RETURN_CODE_TYPE       *RETURN_CODE);      


# 10 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_OS_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_RBSPI_COMMON.h"
















































typedef enum
{
   NO_SANCTION              = 0,
   ERROR_HANDLER_ACTIVATION = 1,
   PARTITION_RESTART_COLD   = 2,
   PARTITION_RESTART_WARM   = 3,
   PARTITION_STOP           = 4,
   MODULE_RESET_OPS         = 5,
   MODULE_RESET_PASSIVE_DL  = 6,
   MODULE_HALT              = 7
} SANCTION_TYPE;


typedef enum
{
   OS_EVENT              =  1,
   OS_ERROR              =  2,
   APP_EVENT             =  3,
   SAFETY_TEST_FAILURE   =  4,
   MODULE_TEST_FAILURE   =  5,
   CMON_FAILURE          =  6,
   PORT_FAILURE          =  7,
   LOGBOOK_FAILURE       =  8,
   APP_TEST              =  9,
   APP_MONITORING        = 10
} BITE_EVENT_TYPE_TYPE;


typedef enum
{
   FLEETING    = 0,
   APPEARED    = 1,
   DISAPPEARED = 2,
   LATCHED     = 3
} BITE_EVENT_STATE_TYPE;


typedef struct
{
   
   APEX_UNSIGNED                FUNCTIONAL_BLOCK_ID;                    
   
   APEX_UNSIGNED                VENDOR_ID;                              
   
   BITE_EVENT_TYPE_TYPE         BITE_EVENT_TYPE;                        
   
   APEX_UNSIGNED                BITE_EVENT_ID;                          
   
   APEX_UNSIGNED                INFO_1;                                 
   
   APEX_UNSIGNED                INFO_2;                                 
   
   APEX_UNSIGNED                INFO_3;                                 
   BITE_EVENT_STATE_TYPE        BITE_EVENT_STATE;                       
   SANCTION_TYPE                SANCTION;                               
   APEX_UNSIGNED                ENGINEERING_DATA_LENGTH;                
   APEX_BYTE              ENGINEERING_DATA[84];  
} BITE_MESSAGE_TYPE;


typedef APEX_INTEGER  REPORT_MESSAGE_SIZE_TYPE;                 





extern void REPORT_APPLICATION_MESSAGE (
      MESSAGE_ADDR_TYPE        *MESSAGE_ADDR,          
      REPORT_MESSAGE_SIZE_TYPE  LENGTH,                
      RETURN_CODE_TYPE         *RETURN_CODE);          

extern void GET_RB_DATABASE (
      APEX_UNSIGNED            *DATABASE_ADDRESS,      
      RETURN_CODE_TYPE         *RETURN_CODE);          


# 11 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_OS_INTERFACE_TYPES.t"

typedef APEX_BYTE					OS_APEX_CHAR ;
typedef	SAMPLING_PORT_NAME_TYPE 	OS_SAMPLING_PORT_NAME_TYPE ;
typedef MESSAGE_SIZE_TYPE			OS_SAMPLING_PORT_SIZE_TYPE ;
typedef QUEUING_PORT_NAME_TYPE		OS_QUEUING_PORT_NAME_TYPE ;
typedef EVENT_NAME_TYPE				OS_EVENT_NAME_TYPE ;
typedef OS_APEX_CHAR				OS_MESSAGE_AREA_TYPE ;








# 27 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_OS_INTERFACE_TYPES.t"
# 5 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_CMTY_INTERFACE_TYPES.t"



# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_CMTY_CS_COMMON.h"

































typedef char					T_CHAR;
typedef unsigned char				T_UCHAR;


typedef enum
{
    K_FALSE = 0,
    K_TRUE  = 1 
} T_BOOL;


typedef char					T_INT8;
typedef short					T_INT16;
typedef long					T_INT32;
typedef long long				T_INT64;


typedef unsigned char				T_UINT8;
typedef unsigned short				T_UINT16;
typedef unsigned long				T_UINT32;
typedef unsigned long long			T_UINT64;


typedef float					T_FLOAT32;
typedef double					T_FLOAT64;


typedef void *					T_PTR;
typedef unsigned long				T_ADDR;





# 69 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_CMTY_CS_COMMON.h"



# 5 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_CMTY_INTERFACE_TYPES.t"

# 7 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_CMTY_INTERFACE_TYPES.t"
# 6 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"

# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_DRV_COMMON.h"


















































typedef enum
{
   K_A653_DRV_NO_ERROR        = 0,
   K_A653_DRV_INTERNAL_ERROR  = 1,
   K_A653_DRV_INVALID_PARAM   = 2,
   K_A653_DRV_INVALID_CONFIG  = 3,
   K_A653_DRV_EMPTY           = 4,
   K_A653_DRV_FULL            = 5,
   K_A653_DRV_DISCARDED       = 6,
   K_A653_DRV_BUSY            = 7
} T_A653_DRV_RETURN_CODE;




typedef enum
{
   K_A653_DRV_MAF_START,
   K_A653_DRV_MIF_START,
   K_A653_DRV_SLICE_START
} T_A653_DRV_SLICE_EVENT;




typedef enum
{
   K_A653_DRV_SOURCE,
   K_A653_DRV_DESTINATION
} T_A653_DRV_PORT_DIRECTION;




typedef  T_A653_DRV_PORT_DIRECTION  T_A653_DRV_LANE_DIRECTION;  




typedef enum
{
   K_A653_DRV_ABORTED     = 0,
   K_A653_DRV_IN_PROGRESS = 1,
   K_A653_DRV_COMPLETE    = 2
} T_A653_DRV_WRITE_STATUS;




typedef enum
{
   K_A653_DRV_SAFETY_TESTS   = 0,
   K_A653_DRV_MODULE_TESTS   = 1
} T_A653_DRV_TEST_SELECTION;




typedef enum
{
   K_A653_SVC_NO_ERROR               = 0,
   K_A653_SVC_ILLEGAL_LEVEL1_SM_ID   = 1,
   K_A653_SVC_ILLEGAL_LEVEL2_SM_ID   = 2,
   K_A653_SVC_ILLEGAL_SERVICE_ID     = 3,
   K_A653_SVC_ILLEGAL_ACCESS         = 4,
   K_A653_SVC_PERMISSION_DENIED      = 5
} T_A653_SVC_STATUS;




typedef struct
{
   T_ADDR   P_DRV_CHECK_SAMPLING_LANE;                  
   T_ADDR   P_DRV_WRITE_SAMPLING_MESSAGE;               
   T_ADDR   P_DRV_READ_SAMPLING_MESSAGE;                
   T_ADDR   P_SPARE_3;                                  
   T_ADDR   P_DRV_FAILSAFE_SAMPLING_LANE;               
   T_ADDR   P_DRV_CHECK_QUEUING_LANE;                   
   T_ADDR   P_DRV_SEND_QUEUING_MESSAGE;                 
   T_ADDR   P_DRV_RECEIVE_QUEUING_MESSAGE;              
   T_ADDR   P_DRV_GET_QUEUING_LANE_STATUS;              
   T_ADDR   P_DRV_FAILSAFE_QUEUING_LANE;                
   T_ADDR   P_DRV_GET_IS_QUEUING_LANE_STATUS;           
   T_ADDR   P_DRV_ENABLE_QUEUING_ADDRESSING;            
   T_ADDR   P_DRV_GET_QUEUING_SOURCE_ADDRESS;           
   T_ADDR   P_DRV_SET_QUEUING_DESTINATION_ADDRESS;      
}T_A653_DRV_IO_ENTRY_TABLE;




typedef enum
{
   K_A653_DRV_NO_FAILURE           = 0,
   K_A653_DRV_OPS_ALLOWED          = 1,
   K_A653_DRV_CONFIRMATION_RESTART = 2, 
   K_A653_DRV_PDL_ALLOWED          = 3,
   K_A653_DRV_HALT_ALLOWED         = 4
} T_A653_DRV_FAILURE_LEVEL;




typedef enum
{
   K_A653_START_UP_SAFE_PAD_ID       = 0,
   K_A653_FAILURE_BACKUP_SAFE_PAD_ID = 1
} T_A653_DRV_SAFE_PAD_ID;




typedef struct
{
   T_UINT32                  I_CRC;                             
   T_UINT32                  I_PIN_PROG;                        
   T_BOOL                    B_PIN_PROG_PARITY;                 
   T_BOOL                    B_COMPATIBILITY_RESULT;            
   T_A653_DRV_FAILURE_LEVEL  E_SAFETY_TEST_RESULT;              
   T_UINT8                   A_DRIVER_STATUS_BACKUP[256]; 
} T_A653_DRV_START_UP_INFO;




typedef enum
{
   K_A653_DRV_NO_SANCTION               = 0,
   K_A653_DRV_ERROR_HANDLER_ACTIVATION  = 1,
   K_A653_DRV_PARTITION_RESTART_COLD    = 2,
   K_A653_DRV_PARTITION_RESTART_WARM    = 3,
   K_A653_DRV_PARTITION_STOP            = 4,
   K_A653_DRV_MODULE_RESET_OPS          = 5,
   K_A653_DRV_MODULE_RESET_PASSIVE_DL   = 6,
   K_A653_DRV_MODULE_HALT               = 7
} T_A653_DRV_SANCTION;




typedef enum
{
   K_A653_DRV_OS_EVENT             =  1,
   K_A653_DRV_OS_ERROR             =  2,
   K_A653_DRV_APP_EVENT            =  3,
   K_A653_DRV_SAFETY_TEST_FAILURE  =  4,
   K_A653_DRV_MODULE_TEST_FAILURE  =  5,
   K_A653_DRV_CMON_FAILURE         =  6,
   K_A653_DRV_PORT_FAILURE         =  7,
   K_A653_DRV_LOGBOOK_FAILURE      =  8,
   K_A653_DRV_APP_TEST             =  9,
   K_A653_DRV_APP_MONITORING       = 10
} T_A653_DRV_BITE_EVENT_TYPE;




typedef enum
{
   K_A653_DRV_FLEETING     = 0,
   K_A653_DRV_APPEARED     = 1,
   K_A653_DRV_DISAPPEARED  = 2,
   K_A653_DRV_LATCHED      = 3
} T_A653_DRV_BITE_EVENT_STATE;




typedef struct
{
   
   T_UINT32                     I_FUNCTIONAL_BLOCK_ID;          
   
   T_UINT32                     I_VENDOR_ID;                    
   
   T_A653_DRV_BITE_EVENT_TYPE   E_BITE_EVENT_TYPE;              
   
   T_UINT32                     I_BITE_EVENT_ID;                
   
   T_UINT32                     I_INFO_1;                       
   
   T_UINT32                     I_INFO_2;                       
   
   T_UINT32                     I_INFO_3;                       
   T_A653_DRV_BITE_EVENT_STATE  E_BITE_EVENT_STATE;             
   T_A653_DRV_SANCTION          E_SANCTION;                     
   T_UINT32                     I_ENGINEERING_DATA_LENGTH;      
   T_UINT8                      A_ENGINEERING_DATA[84]; 
} T_A653_DRV_BITE_MESSAGE;









# 251 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_DRV_COMMON.h"


# 8 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_HBOX_COMMON.h"











































































































typedef enum
{
   K_A653_4B_ALIGNED     = 4           - 1,
   K_A653_64B_ALIGNED    = 64          - 1,
   K_A653_1K_ALIGNED     = 1    * 1024 - 1,
   K_A653_2K_ALIGNED     = 2    * 1024 - 1,
   K_A653_4K_ALIGNED     = 4    * 1024 - 1,
   K_A653_8K_ALIGNED     = 8    * 1024 - 1,
   K_A653_16K_ALIGNED    = 16   * 1024 - 1,
   K_A653_32K_ALIGNED    = 32   * 1024 - 1,
   K_A653_64K_ALIGNED    = 64   * 1024 - 1,
   K_A653_128K_ALIGNED   = 128  * 1024 - 1,
   K_A653_256K_ALIGNED   = 256  * 1024 - 1,
   K_A653_512K_ALIGNED   = 512  * 1024 - 1,
   K_A653_1M_ALIGNED     = 1024 * 1024 - 1
} T_A653_ALIGNMENT;


typedef struct
{
   T_UINT32 I_MSW;                      
   T_UINT32 I_LSW;                      
} T_A653_ABSOLUTE_TIME;


typedef enum
{
   K_A653_READ_ACCESS =0,
   K_A653_READ_WRITE_ACCESS
} T_A653_ACCESS_TYPE;


typedef enum
{
   K_A653_OPS        = 0,
   K_A653_PASSIVE_DL = 1
} T_A653_MODULE_MODE;


typedef struct
{
   T_UINT32 I_RESERVED   :27;           
   T_UINT32 I_GDB_ENABLE :1;            
   T_UINT32 I_SHOP_LOAD  :1;            
   T_UINT32 I_SHOP_TEST  :1;            
   T_UINT32 I_ON_BENCH   :1;            
   T_UINT32 I_ON_GROUND  :1;            
} T_A653_MODE_STATUS;


typedef enum
{
   K_A653_SHORT_POWER_CUT_RESET = 0x00,
   K_A653_LONG_POWER_CUT_RESET  = 0x01,
   K_A653_WATCHDOG_RESET        = 0x02,
   K_A653_AIRBUS_EXT_RESET      = 0x04,
   K_A653_SOFTWARE_RESET        = 0x10
} T_A653_RESET_SOURCE;


typedef enum
{
   K_A653_DEFAULT_REASON       =  0,
   K_A653_EMPTY_DL             =  1,  
   K_A653_HALT                 =  2,
   K_A653_PASSIVE              =  3,
   K_A653_DL                   =  4,
   K_A653_DL_END               =  5,
   K_A653_SAFETY_TEST          =  6,
   K_A653_MODULE_TEST          =  7,
   K_A653_FAILURE_RST          =  9,
   K_A653_IM_SYNC              = 10,  
   K_A653_MODULE_TEST_CMF      = 11,
   K_A653_SAFETY_TEST_CMF      = 12
} T_A653_RESET_REASON;


typedef enum {
   K_A653_NOT_ACTIVATED  = 0,
   K_A653_ACTIVATED      = 1
} T_A653_SAFETY_TEST_EXECUTION;


typedef struct
{
   T_A653_MODE_STATUS           S_MODE_STATUS;                
   T_A653_RESET_SOURCE          E_RESET_SOURCE;               
   T_A653_MODULE_MODE           E_CURRENT_MODULE_MODE;        
   T_A653_MODULE_MODE           E_PREVIOUS_MODULE_MODE;       
   T_A653_RESET_REASON          E_RESET_REASON;               
   T_UINT32                     I_USER_CFG_INDEX;             
   T_A653_SAFETY_TEST_EXECUTION E_SAFETY_TEST_EXECUTION;      
} T_A653_MODULE_STATUS;


typedef void (*T_A653_HANDLER)(T_UINT32);       


typedef struct
{
   T_A653_HANDLER     P_HANDLER;        
   T_UINT32           I_PARAM;          
   T_UINT32           I_STATUS;         
} T_A653_HANDLER_DESCRIPTOR;


typedef enum
{
    K_A653_HBOX_NO_ERROR,
    K_A653_HBOX_INVALID_MODE,
    K_A653_HBOX_INVALID_PARAM
} T_A653_HBOX_RETURN_CODE;


typedef enum{
   K_A653_INIT_EDC_ONLY,
   K_A653_INIT_TO_VALUE
}T_A653_INIT_AREA_TYPE;


typedef struct {
    T_A653_INIT_AREA_TYPE  E_INIT_AREA_TYPE;    
    T_UINT32               I_INIT_VALUE;        
    T_ADDR                 P_AREA_BEGIN;        
    T_UINT32               I_AREA_SIZE;         
}T_A653_INIT_AREA;


typedef struct{
    T_UINT32          I_NB_INIT_AREA;           
    T_A653_INIT_AREA *P_INIT_AREA;              
}T_A653_INIT_AREA_LIST;


typedef enum
{
    K_A653_ONE_BYTE,
    K_A653_TWO_BYTE,
    K_A653_FOUR_BYTE
}T_A653_ACCESS_WIDTH;











extern T_UINT32 A653_HBOX_MANAGE_API_SERVICE(  
      T_UINT32 I_LEVEL1_SM_ID,      
      T_UINT32 I_LEVEL2_SM_ID,      
      T_UINT32 I_SERVICE_ID,        
      T_PTR    P_PARAM );           



extern T_ADDR A653_HBOX_ALLOC_MODULE_RAM(       
    T_UINT32                   I_RAM_SIZE,                     
    T_A653_ALIGNMENT           E_ALIGNMENT,                    
    T_UINT32                   I_MEMORY_ACCESS_ATTRIBUTES);    



extern T_A653_ABSOLUTE_TIME A653_HBOX_READ_TIME_BASE(void);             



extern T_UINT32 A653_HBOX_GET_PARTITION_ID(void);                       



extern T_BOOL A653_HBOX_IS_USER_ACCESS_AUTHORIZED(                      
    T_ADDR                     P_ADDRESS,                      
    T_UINT32                   I_SIZE,                         
    T_A653_ACCESS_TYPE         E_ACCESS_TYPE);                 



extern T_A653_HANDLER_DESCRIPTOR A653_HBOX_INSTALL_INTERRUPT_HANDLER(   
    T_UINT32                   I_EXCEPTION_NUMBER,             
    T_UINT32                   I_INTERRUPT_NUMBER,             
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
                                                                        
    T_A653_HANDLER_DESCRIPTOR  S_NEW_HANDLER_DESCRIPTOR);      




extern void A653_HBOX_RAISE_BITE_EVENT(
    T_A653_DRV_BITE_MESSAGE  *P_MESSAGE,                    
    T_UINT32                  I_LENGTH);                    



extern void A653_HBOX_PROCESS_PENDING_INTERRUPTS(void);



extern T_UINT32 A653_HBOX_GET_SLICE_OUT_DELAY(void);                    




extern T_UINT32 A653_HBOX_GET_DELAY_BEFORE_SLICE_END(void);             



extern T_UINT32 A653_HBOX_GET_PERMITTED_SERVICE_GROUPS(void);           



extern void A653_HBOX_SET_MODULE_MODE(
    T_UINT32                   I_MODULE_MODE,                  
    T_A653_RESET_REASON        E_RESET_REASON,                 
    T_BOOL                     B_RAM_VALIDITY,                 
    T_UINT32                   I_USER_CFG_INDEX);              



extern void A653_HBOX_RESTART_MODULE(void);



extern void A653_HBOX_GET_MODULE_MODE(
    T_UINT32                  *P_CURRENT_MODULE_MODE,          
    T_UINT32                  *P_PREVIOUS_MODULE_MODE,         
    T_A653_RESET_REASON       *P_RESET_REASON,                 
    T_BOOL                    *P_RAM_VALIDITY,                 
    T_UINT32                  *P_USER_CFG_INDEX);              



extern void A653_API_SYSTEM_CALL(
         T_UINT32        I_LEVEL1_SM_ID,                        
         T_UINT32        I_LEVEL2_SM_ID,                        
         T_UINT32        I_SERVICE_ID,                          
      T_PTR           P_SVC_PARAM);                          



extern T_A653_HBOX_RETURN_CODE  A653_HBOX_TIMED_WAIT(                   
     T_UINT32     I_DELAY);                                     



extern void A653_HBOX_FREEZE_TIME(void);



extern void A653_HBOX_UNFREEZE_TIME(void);



extern void A653_HBOX_CLEAR_MODULE_RESTART_COUNTER (void);



extern void A653_HBOX_CLEAR_ALL_PARTITION_RESTART_COUNTERS (void);



extern void A653_HBOX_ENABLE_WRITE_ACCESS (
    T_ADDR         P_ADDRESS,                                  
    T_UINT32       I_LENGTH);                                  



extern void A653_HBOX_DISABLE_WRITE_ACCESS (void);



extern void A653_HBOX_HALT_MODULE (void);



extern void A653_HBOX_HALT_MODULE_CDS (void);
extern void A653_HBOX_HALT_MODULE_IMA (void);
extern void A653_HBOX_HALT_MODULE_CETIA (void);



extern void A653_HBOX_GET_PPC_EXCEPTION_REGISTERS(
    T_UINT32 *P_SRR0,                     
    T_UINT32 *P_R1,                       
    T_UINT32 *P_LR,                       
    T_UINT32 *P_SRR1);                    


extern T_UINT32 A653_HBOX_GET_RESET_VALUE(void);  


extern void  A653_HBOX_SET_RESET_VALUE (
    T_UINT32         I_RESET_VALUE);       


extern T_A653_HBOX_RETURN_CODE  A653_HBOX_INIT_RESET_VALUE(  
    T_BOOL           B_LONG_POWER_CUT);              


extern T_UINT32 A653_HBOX_GET_IRQ_ID(    
      T_UINT32 I_IPR,          
      T_UINT32 I_IMR);         


extern T_UINT32 A653_HBOX_IS_SLICE_SWITCH_NEEDED(void);


extern void A653_HBOX_INIT_RAM(
     T_A653_INIT_AREA_LIST   *P_INIT_RAM_CFG); 


extern T_UINT32 A653_HBOX_FPCLASSIFYF ( 
        T_FLOAT32 F_X); 


extern void A653_HBOX_WRITE_TRACE_ITEM(
       T_UINT32                I_TRACE_TYPE,           
       T_UINT32                I_PROCESS_ID,           
       T_UINT32                I_EXCEPTION_EVENT,      
       T_UINT32                I_LEVEL1_SM_ID,         
       T_UINT32                I_LEVEL2_SM_ID,         
       T_UINT32                I_SERVICE_ID,           
       T_UINT32               *P_TRACE_ITEM);          


extern void A653_HBOX_MANAGE_CACHE (
       T_UINT32                I_CACHE_OPERATION_MASK); 


extern void A653_HBOX_INIT_HOOK ( void ) ;


extern void A653_HBOX_DELAY_MILLISECOND(
     T_UINT32 I_DELAY);                      


extern T_A653_ABSOLUTE_TIME A653_HBOX_CALC_TIMEOUT_MILLISECOND (   
    T_UINT32               I_DELAY);         


extern T_BOOL A653_HBOX_IS_TIMEOUT_MILLISECOND_ELAPSED( 
     T_A653_ABSOLUTE_TIME *P_REFERENCE_TIME, 
     T_UINT32              I_DELAY );        


extern T_BOOL A653_HBOX_IS_TIMEOUT_MICROSECOND_ELAPSED( 
     T_A653_ABSOLUTE_TIME *P_REFERENCE_TIME, 
     T_UINT32              I_DELAY );        


extern T_BOOL A653_HBOX_IS_TIMEOUT_ELAPSED(             
     T_A653_ABSOLUTE_TIME *P_REFERENCE_TIME);


extern void A653_HBOX_ACCURATE_DELAY(
     T_UINT32 I_DELAY ); 


extern T_UINT32 A653_HBOX_READ_WRITE_SYNCHRONIZE(
     T_UINT32 *P_ADDRESS,
     T_UINT32  I_MODIFY_MASK,
     T_UINT32  I_VALUE);


extern void A653_HBOX_WRITE_DATA (
    T_A653_ACCESS_WIDTH E_ACCESS_WIDTH,  
    T_UINT8 *           P_SRC,           
    T_UINT8 *           P_DEST,          
    T_UINT32            I_SIZE);         


extern T_UINT32  A653_HBOX_GET_PPC_BUS_FREQUENCY (void); 


extern T_UINT32  A653_HBOX_GET_RAM_SIZE (void);  



# 9 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_CFG_PARTITION_COMMON.h"










































typedef enum
{
   
   K_A653_INTERNAL_ERROR         =  1,
   K_A653_WATCHDOG_ERROR         =  2,
   K_A653_HARD_DEADLINE_MISSED   =  3,
   K_A653_SOFT_DEADLINE_MISSED   =  4,
   K_A653_APPLICATION_ERROR      =  5,
   K_A653_NUMERIC_ERROR          =  6,
   K_A653_PRIVILEGE_REQUEST      =  7,
   K_A653_MEMORY_VIOLATION       =  8,
   K_A653_HANDLER_ERROR          =  9,
   K_A653_SLICE_OUT              = 10,
   K_A653_VIOL_WRITE             = 11,
   K_A653_EDC_FAULT              = 12,
   K_A653_OUT_OF_MEMORY          = 13,
   K_A653_ILLEGAL_REQUEST        = 14,
   K_A653_SPATIAL_MONITOR_ERROR  = 15,
   K_A653_TEMPORAL_MONITOR_ERROR = 16,
   K_A653_PPC_ACCESS_ERROR       = 17,
   K_A653_PCI_SERR               = 18,
   K_A653_DMA_ERROR              = 19,
   K_A653_PARTITION_CONFIG_ERROR = 20,
   
   K_A653_OTHER_ERRORS           = (32 - 1)
} T_A653_ERROR_SOURCE;


typedef enum
{
   K_A653_ERR_DEADLINE_MISSED   = 0,
   K_A653_ERR_APPLICATION_ERROR = 1,
   K_A653_ERR_NUMERIC_ERROR     = 2,
   K_A653_ERR_ILLEGAL_REQUEST   = 3,
   K_A653_ERR_STACK_OVERFLOW    = 4,
   K_A653_ERR_MEMORY_VIOLATION  = 5,
   K_A653_ERR_HARDWARE_FAULT    = 6,
   K_A653_ERR_POWER_FAIL        = 7
} T_A653_ERROR_CODE;



typedef enum
{
   K_A653_STOP_PARTITION  = 0,
   K_A653_RESTART_COLD    = 1,
   K_A653_RESTART_WARM    = 2
} T_A653_PARTITION_ERROR_RECOVERY_ACTION;


typedef struct
{
   
   T_A653_PARTITION_ERROR_RECOVERY_ACTION  E_PARTITION_RECOVERY_ACTION;         
   
   T_BOOL                                  B_PROCESS_RECOVERY_ALLOWED;          
   
   T_A653_ERROR_CODE                       E_ERROR_CODE;                        
} T_A653_PARTITION_ERROR_RECOVERY;



typedef T_A653_PARTITION_ERROR_RECOVERY  T_A653_PARTITION_HM_ERROR_CFG[32]; 



typedef enum
{
   K_A653_PART_COPY_BACK     = 0,
   K_A653_PART_WRITE_THROUGH = 1
} T_A653_CACHE_MODE;



typedef struct
{
   
   T_UINT32                            I_FPSCR_VALUE;                   

   
   T_BOOL                              B_L1_ICACHE_ACTIVE;              

   
   T_BOOL                              B_L1_DCACHE_ACTIVE;              

   
   T_BOOL                              B_L2_CACHE_ACTIVE;               

   
   T_A653_CACHE_MODE                   E_L1_CACHE_MODE;                 

   
   T_A653_CACHE_MODE                   E_L2_CACHE_MODE;                 

   
   T_ADDR                              P_STARTER_ADDR;                  

   
   T_ADDR                              P_MAIN_ADDR;                     

   
   T_UINT32                            I_MAIN_STACK_SIZE;               

   
   T_UINT32                            I_MMU_PAGE_TABLE_SIZE;           

   
   T_UINT32                            I_STACK_AREA_SIZE;               

   
   T_UINT32                            I_OBJECT_AREA_SIZE;              

   
   T_UINT32                            I_NON_CACHEABLE_DATA_SIZE;       

   

   T_UINT32                            I_PARTITION_DEBUG_TRACE_SIZE;    

  
   T_A653_PARTITION_HM_ERROR_CFG      *P_PARTITION_HM_ERROR_CFG;        

   
   T_UINT32                            I_SPARE_1;                       
   T_UINT32                            I_SPARE_2;                       
   T_UINT32                            I_SPARE_3;                       
} T_A653_PARTITION_LOCAL_CFG;










extern void A653_API_CRT0( T_PTR  P_ADDRESS);   



# 10 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_CFG_MODULE_COMMON.h"






















































typedef struct
{
   
   T_ADDR                      I_LOG_ADDR;      
   
   T_UINT32                    I_SIZE;          
} T_A653_MEM_AREA_CFG;


typedef struct
{
   

   T_UINT32      I_PARTITION_INDEX;             

   

   T_UINT32      I_BEGIN_OFFSET;                

   
   T_UINT32      I_DURATION;                    
} T_A653_SLICE_CFG;


typedef struct
{
   
   T_UINT32                    I_NB_SLICES;     

   
   
   T_A653_SLICE_CFG           *P_SLICE_CFG;     
} T_A653_MIF_CFG;


typedef struct
{
   
   T_UINT32         I_SAMPLING_PORT_CREATION_TRACE_SIZE;        
   
   T_UINT32         I_QUEUING_PORT_CREATION_TRACE_SIZE;         
   
   T_UINT32         I_PARTITION_STATUS_EVOLUTION_TRACE_SIZE;    
} T_A653_PARTITION_IS_TRACE_CFG;


typedef struct
{
   T_UINT8                             A_PARTITION_NAME[30]; 

   
   
   
   
   T_UINT32                            I_APPLICATION_ID;                                

   
   T_UINT32                            I_NB_PARTITION_CODE_AREAS;                       

   
   T_A653_MEM_AREA_CFG                *P_PARTITION_CODE_AREA_CFG;                       

   
   T_UINT32                            I_NB_PARTITION_DATA_AREAS;                       

   
   T_A653_MEM_AREA_CFG                *P_PARTITION_DATA_AREA_CFG;                       

   
   T_A653_PARTITION_IS_TRACE_CFG      *P_PARTITION_TRACE_CFG;                           

   
   T_UINT32                            I_PARTITION_PERIOD;                              

   
   T_UINT32                            I_PARTITION_START_OFFSET;                        

   
   T_UINT32                            I_SERVICE_ACCESS_RIGHTS;                         

   
   T_BOOL                              B_READ_WORLD_ACTIVE;                             

   
   T_A653_PARTITION_LOCAL_CFG        **P_POSITION_LOCAL_CFG;                            

   

   T_UINT32                            I_ERROR_RECOVERY_MODE;                           

   
   T_UINT32                            I_SPARE_1;                                       
   T_UINT32                            I_SPARE_2;                                       
   T_UINT32                            I_SPARE_3;                                       
} T_A653_PARTITION_CFG;




typedef T_A653_PARTITION_CFG*  T_A653_PARTITION_ENTRY_CFG[32]; 



typedef enum
{
   K_A653_STOP_MODULE         = 0,
   K_A653_RESET_MODULE        = 1,
   K_A653_PARTITION_RECOVERY  = 2
} T_A653_MODULE_ERROR_RECOVERY_ACTION;



typedef T_A653_MODULE_ERROR_RECOVERY_ACTION  T_A653_MODULE_HM_ERROR_CFG[32]; 



typedef T_A653_MODULE_HM_ERROR_CFG* T_A653_HM_ERROR_ENTRY_CFG;                       



typedef struct
{
   T_UINT32      WAITING_TIME;          
   T_UINT32      MIN_TIME;              
   T_UINT32      MAX_TIME;              
} T_A653_EXTERNAL_MONITORED_CFG;



typedef struct
{
   T_UINT32     I_MODULE_ACTIVITY_TRACE_SIZE;   
} T_A653_MODULE_IS_TRACE_CFG;


typedef enum
{
   K_A653_INTERNAL_MIF,
   K_A653_EXTERNAL_MIF,
   K_A653_EXTERNAL_MONITORED_MIF
}T_A653_MIF_SOURCE;


typedef struct
{
   
   T_BOOL                              B_EDC_ACTIVE;                    

   
   T_BOOL                              B_L1_ICACHE_ACTIVE;              

   
   T_BOOL                              B_L1_DCACHE_ACTIVE;              

   
   T_BOOL                              B_L2_CACHE_ACTIVE;               

   
   T_BOOL                              B_MMU_SP_ACTIVE;                 

   
   T_BOOL                              B_HARD_SP_ACTIVE;                

   
   T_ADDR                              P_MODULE_RAM_BEGIN;              

   
   T_UINT32                            I_MODULE_RAM_SIZE;               

   
   T_UINT32                            I_NB_HM_ERROR_ENTRIES;           

   
   
   T_A653_HM_ERROR_ENTRY_CFG          *P_HM_ERROR_ENTRY_CFG;            

   

   T_UINT32                            I_POWERUP_DEBUG_TRACE_SIZE;      

   
   
   T_A653_PARTITION_ENTRY_CFG         *P_PARTITION_ENTRY_CFG;           

   
   T_UINT32                            I_MIF_PERIOD;                    

   
   T_UINT32                            I_NB_MIFS;                       

   
   T_A653_MIF_CFG                     *P_MIF_CFG;                       

   
   T_UINT32                            I_SLICE_OUT_DELAY;               

   
   T_A653_MIF_SOURCE                   E_MIF_SOURCE;                    

   
   T_A653_EXTERNAL_MONITORED_CFG      *P_EXTERNAL_MONITORED_CFG;        

   
   T_A653_MODULE_IS_TRACE_CFG         *P_MODULE_TRACE_CFG;              

   
   T_UINT32                            I_SPARE_1;                       
   T_UINT32                            I_SPARE_2;                       
   T_UINT32                            I_SPARE_3;                       
} T_A653_USER_CFG;




typedef T_ADDR  T_A653_USER_MASTER_CFG[8];              



typedef T_A653_USER_MASTER_CFG* T_A653_USER_MASTER_ENTRY[4];        


typedef struct
{
   
   
   
   T_ADDR                    P_USER_CFG_AREA_BEGIN;             

   
   T_UINT32                  I_USER_CFG_AREA_SIZE;              

   
   T_A653_USER_MASTER_ENTRY *P_USER_MODE_CFG;                   
} T_A653_USER_MODE_CFG;











# 11 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_CFG_HW_COMMON.h"


































typedef T_ADDR  T_A653_HW_MASTER_CFG[8];              



typedef enum {
   K_A653_NO_RECOVERY           = 0,
   K_A653_RESET_MODULE_NORMAL   = 1,
   K_A653_RESET_MODULE_PASSIVE  = 2,
   K_A653_HALT_MODULE           = 3,
   K_A653_RESET_DRIVERS         = 4
} T_A653_CMON_FAILURE_RECOVERY_ACTION;



typedef struct {
   
   T_UINT32                               I_FUNCTIONAL_BLOCK_ID;        

   
   T_UINT32                               I_CMON_TEST_NUMBER;           

   
   T_A653_CMON_FAILURE_RECOVERY_ACTION    E_CMON_RECOVERY_ACTION;       
} T_A653_CMON_FAILURE_RECOVERY_CFG;


typedef struct {
   
   T_UINT32                           I_NB_CMON_FAILURES;               

   
   T_A653_CMON_FAILURE_RECOVERY_CFG  *P_CMON_FAILURE_RECOVERY;          
} T_A653_CMON_FAILURE_CFG;




typedef T_A653_CMON_FAILURE_CFG  T_A653_CMON_FAILURE_ENTRY_CFG[2]; 



typedef struct {
   
   
   T_ADDR                          P_HW_CFG_AREA_BEGIN;                 

   
   T_UINT32                        I_HW_CFG_AREA_SIZE;                  

   
   T_ADDR                          P_HW_MODULE_CFG;                     

   
   T_A653_CMON_FAILURE_ENTRY_CFG  *P_CMON_FAILURE_ENTRY_CFG;            
} T_A653_HW_CFG;













# 12 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_CFG_CSW_COMMON.h"



















































typedef struct {
   T_UINT32             I_DBAT0_L;      
   T_UINT32             I_DBAT0_H;      
   T_UINT32             I_DBAT1_L;      
   T_UINT32             I_DBAT1_H;      
   T_UINT32             I_DBAT2_L;      
   T_UINT32             I_DBAT2_H;      
   T_UINT32             I_DBAT3_L;      
   T_UINT32             I_DBAT3_H;      
   T_UINT32             I_IBAT0_L;      
   T_UINT32             I_IBAT0_H;      
   T_UINT32             I_IBAT1_L;      
   T_UINT32             I_IBAT1_H;      
   T_UINT32             I_IBAT2_L;      
   T_UINT32             I_IBAT2_H;      
   T_UINT32             I_IBAT3_L;      
   T_UINT32             I_IBAT3_H;      
} T_A653_BAT_CFG;


typedef enum
{
   
   K_A653_TLB_SOFT,
   
   K_A653_TLB_HARD
} T_A653_TLB_MANAGEMENT;


typedef struct {
   
   
   
   T_UINT32             *P_BUS_FREQUENCY;              
   
   T_ADDR                P_FLUSH_L1_DCACHE_HANDLER;    
   
   T_ADDR                P_FLUSH_L1_DCACHE_AREA_BEGIN; 
   
   T_BOOL                B_L2_CACHE_PRESENCE;          
   
   T_UINT32              I_INIT_L2CR;                  
   
   T_A653_TLB_MANAGEMENT E_TLB_MANAGEMENT;             
   
   T_ADDR                P_INVALIDATE_TLB;             
} T_A653_CPU_CFG;


typedef struct {
   T_PTR               P_INIT_FUNCTION;
   T_PTR               P_START_FUNCTION;
   T_PTR               P_HALT_FUNCTION;
   T_PTR               P_MANAGE_SLICE_EVENT_FUNCTION;
   T_PTR               P_SERVICE_MANAGER_FUNCTION;
} T_A653_CSW_ITEM_DESCRIPTOR;




typedef T_A653_CSW_ITEM_DESCRIPTOR*         T_A653_CSW_ITEM_CFG[8]; 



typedef T_UINT32         T_A653_CSW_ITEM_SEQUENCE_TABLE[8];         



typedef struct {
   T_PTR                P_CHECK_LOGBOOK;            
   T_PTR                P_WRITE_LOGBOOK_MESSAGE;    
   T_PTR                P_READ_LOGBOOK_MESSAGE;     
   T_PTR                P_CLEAR_LOGBOOK;            
   T_PTR                P_GET_LOGBOOK_STATUS;       
   T_PTR                P_READ_IS_LOGBOOK_MESSAGE;  
   T_PTR                P_GET_IS_LOGBOOK_STATUS;    
} T_A653_LOGBOOK_CFG;


typedef enum{
    K_A653_BEFORE_MS_HOOK = 0,
    K_A653_AFTER_MS_HOOK = 1,
    K_A653_AFTER_POST_HOOK = 2
}T_A653_INIT_AREA_STEP;


typedef struct {
   
   T_ADDR                           P_POWER_UP_STACK_BEGIN;             
   
   T_UINT32                         I_POWER_UP_STACK_SIZE;              
   
   T_ADDR                           P_CSW_CODE_BEGIN;                   
   
   T_UINT32                         I_CSW_CODE_SIZE;                    
   
   T_ADDR                           P_CSW_DATA_BEGIN;                   
   
   T_UINT32                         I_CSW_DATA_SIZE;                    
   
   T_ADDR                           P_CSW_MODULE_PAGE_TABLE_BEGIN;      
   
   T_UINT32                         I_CSW_MODULE_PAGE_TABLE_SIZE;       
   
   T_UINT32                         I_RAM_SIZE;                         
   
   T_ADDR                           P_CSW_SPATIAL_AREA_BEGIN;           
   
   
   T_UINT32                         I_CSW_SPATIAL_AREA_SIZE;            
   
   
   T_ADDR                           P_CUSTOM_SPATIAL_AREA_BEGIN;        
   
   
   T_UINT32                         I_CUSTOM_SPATIAL_AREA_SIZE;         
   
   T_ADDR                           P_READ_APPRESET_SIGNAL;             
   
   T_ADDR                           P_INIT_HOOK;                        
   
   T_ADDR                           P_MODE_SELECTOR_HOOK;               
   
   T_ADDR                           P_POST_HOOK;                        
   
   T_ADDR                           P_SHUTDOWN_HOOK;                    
   
   T_ADDR                           P_INTERRUPT_HOOK;                   
   
   
   T_A653_BAT_CFG                  *P_BAT_SP_POWER_UP;                  
   
   
   T_A653_BAT_CFG                  *P_BAT_SP_OFF;                       
   
   
   T_A653_BAT_CFG                  *P_BAT_SP_ON;                        
   
   
   T_UINT32                         I_FPSCR_VALUE;                      
   
   T_A653_CPU_CFG                  *P_CPU_CFG;                          
   
   T_A653_CSW_ITEM_CFG             *P_CSW_ITEM_CFG;                     
   
   
   T_A653_CSW_ITEM_SEQUENCE_TABLE  *P_CSW_ITEM_INIT_CFG;                
   
   T_A653_CSW_ITEM_SEQUENCE_TABLE  *P_CSW_ITEM_START_CFG;               
   
   T_A653_CSW_ITEM_SEQUENCE_TABLE  *P_CSW_ITEM_HALT_CFG;                
   
   
   T_A653_CSW_ITEM_SEQUENCE_TABLE  *P_CSW_ITEM_SLICE_EVENT_MANAGER_CFG; 
   
   T_A653_LOGBOOK_CFG              *P_LOGBOOK_CFG;                      
   
   T_ADDR                           P_READ_SAFE_PAD;                    
   
   T_A653_MODULE_HM_ERROR_CFG      *P_DEFAULT_HM_ERROR_CFG;             
   
   T_UINT32                         I_MAX_NB_MODULE_RESTARTS;           
   
   T_UINT32                         I_MAX_NB_PARTITION_RESTARTS;        
   
   
   T_UINT32                         I_MAX_NB_DRIVERS_RESTARTS;          
   
   T_UINT32                         I_DEBUG_TRACE_ITEM_SIZE;            
   
   T_UINT32                         I_DEBUG_TRACE_TIME_SCALE;           
   
   T_ADDR                           P_DEBUG_TRACE_HANDLER;              
   
   T_A653_INIT_AREA_LIST            A_INIT_AREA_CFG[3]; 
   
   
   T_ADDR                           P_BOOT_PARAMETER_ADDRESS;           
   
   
   T_ADDR                           P_HARD_RESET_VALUE;                 
   
   T_ADDR                           P_HALT_MODULE_SERVICE;              
   
   
   
   
   T_UINT32                         I_ALLOWED_RESET_REASONS;            
   
   
   
   T_UINT32                        *P_RAM_SIZE;                         
   
   
   T_UINT32                         I_MAX_NUMBER_OF_LOGBOOK_MESSAGE;    
   
   
   T_UINT32                         I_MAX_NUMBER_OF_SAMPLING_PORTS;     
} T_A653_CSW_CFG;


typedef struct
{
   
   T_PTR                            P_A653_DBG_INIT_LINK;
   
   T_PTR                            P_A653_DBG_GET_CHAR;
   
   T_PTR                            P_A653_DBG_PUT_CHAR;
   
   T_PTR                            P_A653_DBG_FREEZE;
   
   T_PTR                            P_A653_DBG_UNFREEZE;
   
   T_PTR                            P_A653_DBG_KILL;
} T_A653_DBG_CFG;






extern T_A653_DBG_CFG * const P_A653_DBG_CONFIG;        


extern T_A653_CSW_CFG * const P_A653_CSW_CFG ;          








# 13 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_DBG_COMMON.h"















































extern void A653_DBG_INIT( void );



# 14 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_UKER_COMMON.h"



















































typedef enum
{
   
   K_A653_EXCEPTION_SRES = 0x00000100,
   
   K_A653_EXCEPTION_MCK  = 0x00000200,
   
   K_A653_EXCEPTION_DSI  = 0x00000300,
   
   K_A653_EXCEPTION_ISI  = 0x00000400,
   
   K_A653_EXCEPTION_INT  = 0x00000500,
   
   K_A653_EXCEPTION_ALG  = 0x00000600,
   
   K_A653_EXCEPTION_PGM  = 0x00000700,
   
   K_A653_EXCEPTION_FPU  = 0x00000800,
   
   K_A653_EXCEPTION_DEC  = 0x00000900,
   
   K_A653_EXCEPTION_0A00 = 0x00000A00,
   
   K_A653_EXCEPTION_0B00 = 0x00000B00,
   
   K_A653_EXCEPTION_SC   = 0x00000C00,
   
   K_A653_EXCEPTION_TRC  = 0x00000D00,
   
   K_A653_EXCEPTION_FLOA = 0x00000E00,
   
   K_A653_EXCEPTION_PERF = 0x00000F00,
   
   K_A653_EXCEPTION_ITM  = 0x00001000,
   
   K_A653_EXCEPTION_DLTM = 0x00001100,
   
   K_A653_EXCEPTION_DSTM = 0x00001200,
   
   K_A653_EXCEPTION_IAB  = 0x00001300,
   
   K_A653_EXCEPTION_SMI  = 0x00001400,
   
   K_A653_EXCEPTION_1500 = 0x00001500,
   
   K_A653_EXCEPTION_1600 = 0x00001600,
   
   K_A653_EXCEPTION_THM  = 0x00001700,
   
   K_A653_EXCEPTION_1800 = 0x00001800,
   
   K_A653_EXCEPTION_1900 = 0x00001900,
   
   K_A653_EXCEPTION_1A00 = 0x00001A00,
   
   K_A653_EXCEPTION_1B00 = 0x00001B00,
   
   K_A653_EXCEPTION_1C00 = 0x00001C00,
   
   K_A653_EXCEPTION_1D00 = 0x00001D00,
   
   K_A653_EXCEPTION_1E00 = 0x00001E00,
   
   K_A653_EXCEPTION_1F00 = 0x00001F00,
   
   K_A653_EXCEPTION_2000 = 0x00002000,
   
   K_A653_EXCEPTION_2100 = 0x00002100,
   
   K_A653_EXCEPTION_2200 = 0x00002200,
   
   K_A653_EXCEPTION_2300 = 0x00002300,
   
   K_A653_EXCEPTION_2400 = 0x00002400,
   
   K_A653_EXCEPTION_2500 = 0x00002500,
   
   K_A653_EXCEPTION_2600 = 0x00002600,
   
   K_A653_EXCEPTION_2700 = 0x00002700,
   
   K_A653_EXCEPTION_2800 = 0x00002800,
   
   K_A653_EXCEPTION_2900 = 0x00002900,
   
   K_A653_EXCEPTION_2A00 = 0x00002A00,
   
   K_A653_EXCEPTION_2B00 = 0x00002B00,
   
   K_A653_EXCEPTION_2C00 = 0x00002C00,
   
   K_A653_EXCEPTION_2D00 = 0x00002D00,
   
   K_A653_EXCEPTION_2E00 = 0x00002E00,
   
   K_A653_EXCEPTION_2F00 = 0x00002F00
} T_A653_EXCEPTION_ID;


typedef enum
{
   
   K_A653_CACHE_ON,
   
   K_A653_CACHE_OFF,
   
   K_A653_CACHE_UNCHANGED
} T_A653_CACHE_STATE;







extern void A653_UKER_FLUSH_L1_DATA_CACHE(
     T_A653_CACHE_STATE E_CACHE_STATE,                       
     T_ADDR             P_FLUSH_L1_DCACHE_HANDLER,           
     T_ADDR             P_FLUSH_L1_DCACHE_BEGIN_ADDRESS);    


extern void A653_UKER_INVALIDATE_L1_CACHE(
     T_A653_CACHE_STATE E_CACHE_STATE);        


extern void A653_UKER_INVALIDATE_L2_CACHE(
     T_A653_CACHE_STATE E_CACHE_STATE);        


extern void A653_UKER_INVALIDATE_TLB_750( void );


extern void A653_UKER_FLUSH_DATA_CACHE_750(
      T_ADDR             P_FLUSH_L1_DCACHE_AREA_BEGIN); 




# 15 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/MACS2/A653/LIVRAISON/INC/COD_A653_MAUD_COMMON.h"
































typedef enum
{    
   K_A653_MAUD_NON_LATCHABLE_CONFIRMATION         = 0,
   K_A653_MAUD_LATCHABLE_CONFIRMATION             = 1,
   K_A653_MAUD_LATCHABLE_RESETTABLE_CONFIRMATION  = 2,
   K_A653_MAUD_FLEETING_CONFIRMATION              = 3
} T_A653_MAUD_CONFIRMATION_MECHANISM;




typedef enum
{
   K_A653_MAUD_NOT_FAILED = 0,
   K_A653_MAUD_FAILED = 1,
   K_A653_MAUD_CONFIRMED_FAILED = 2,
   K_A653_MAUD_CONFIRMED_FAILED_AND_LATCHED = 3
} T_A653_MAUD_CONFIRMATION_STATE;




typedef enum
{
   K_A653_MAUD_FLEETING = 0,
   K_A653_MAUD_APPEARED = 1,
   K_A653_MAUD_DISAPPEARED = 2,
   K_A653_MAUD_LATCHED = 3,
   K_A653_MAUD_NO_EVENT = 0x7FFFFFFF
} T_A653_MAUD_BITE_EVENT_STATE;




typedef struct
{
   
   T_UINT32   I_MIN_COUNT;                     
   
   T_UINT32   I_MAX_COUNT;                     
   
   T_UINT32   I_INC_COUNT;                     
   
   T_UINT32   I_DEC_COUNT;                     
} T_A653_MAUD_LATCHABLE_CONFIRMATION_CFG;




typedef struct
{
   
   T_UINT32   I_MIN_COUNT;                    
   
   T_UINT32   I_MAX_COUNT;                    
   
   T_UINT32   I_INC_COUNT;                    
   
   T_UINT32   I_DEC_COUNT;                    
} T_A653_MAUD_LATCHABLE_RESETTABLE_CONFIRMATION_CFG;




typedef struct
{
   
   T_UINT32   I_MIN_COUNT;                    
   
   T_UINT32   I_MAX_COUNT;                    
   
   T_UINT32   I_INC_COUNT;                    
   
   T_UINT32   I_DEC_COUNT;                    
} T_A653_MAUD_NON_LATCHABLE_CONFIRMATION_CFG;





extern void A653_MAUD_RESET_EVENT (
    T_PTR                              P_CONFIRMATION_CB);           

extern T_A653_DRV_RETURN_CODE A653_MAUD_INIT_CONFIRMATION_CB (                  
    T_A653_MAUD_CONFIRMATION_MECHANISM  E_CONFIRMATION_MECHANISM,    
    T_PTR                               P_CONFIRMATION_CFG,          
    T_PTR                               *P_CONFIRMATION_CB);         

extern T_A653_MAUD_BITE_EVENT_STATE A653_MAUD_NOTIFY_EVENT (                     
    T_BOOL                            B_OCCURED,                     
    T_PTR                             P_CONFIRMATION_CB,             
    T_A653_MAUD_CONFIRMATION_STATE    *P_E_STATE);                   

extern void A653_MAUD_REPORT_BITE_EVENT (
    T_A653_DRV_BITE_MESSAGE *P_MESSAGE,             
    T_UINT32                I_LENGTH,               
    T_BOOL                  B_HAS_RECOVERY_ACTION); 


# 16 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"

# 18 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/TYP_R_A653_INTERFACE_TYPES.t"
# 32 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_mng_ifc.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/Lbport_pc/Interface/lbport_record_LR_historix.h"



































extern T_ADDR	*pl_stack_start_area_addr ;

# 39 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/Lbport_pc/Interface/lbport_record_LR_historix.h"
# 33 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_mng_ifc.h"




typedef BITE_MESSAGE_TYPE T_lbfl_r_msg_BFM;

typedef enum
{
	K_LBFL_E_NOT_APPEARED,
	K_LBFL_E_DETECTED,
	K_LBFL_E_CONFIRMED	
} T_lbfl_e_error_state;	



typedef struct
{
	T_uint32						ul_category;
	T_uint32						ul_error_id;
	T_uint32						ul_csu_id;
	T_uint32						ul_line;
} T_lbfl_r_current_error_desc;



typedef struct
{
	T_lbfl_r_current_error_desc		e_current_error_desc;
	T_uint32						ul_occ_min_nb;
	T_uint32						ul_nb_cycl_max;
	T_uint32						ul_occ_index;
	T_boolean						b_current_cycle_detection;
	T_lbfl_e_error_state			e_error_state;
	T_uchar							tuc_tab_cycle[31 + 1];	
} T_lbfl_r_error_confirm;

typedef T_lbfl_r_error_confirm *T_lbfl_pr_error_confirm;

typedef struct
{
	T_lbfl_r_error_confirm		r_error_confirm;
	T_uchar						*puc_fsc_component_file_name;
	T_char						*puc_error_label;
	T_lbfl_r_msg_BFM			r_msg_BFM;
} T_lbfl_r_error_mng;

typedef T_lbfl_r_error_mng *T_lbfl_pr_error_mng;


typedef struct
{
	T_char		tuc_fsc_name[4];
	T_uint32	ul_fsc_id;
} T_lbfl_r_fsc_name_config;

typedef const T_lbfl_r_fsc_name_config T_lbfl_r_cst_fsc_name_config;
typedef T_lbfl_r_cst_fsc_name_config *T_lbfl_pr_fsc_name_config;
 
typedef struct
{
	T_uint32					ul_process_fsc_error_number;
	T_uint32					ul_process_fsc_number;
	T_lbfl_pr_fsc_name_config	pr_process_fsc_name_config;
	T_lbfl_pr_error_mng			pr_level_fsc_error_mng;
	T_lbfl_pr_error_mng			pr_level_process_gnerr_mng;
	T_lbfl_pr_error_mng			pr_level_partition_gnerr_mng;

} T_lbfl_r_process_error_mng;

typedef const T_lbfl_r_process_error_mng T_lbfl_r_cst_process_error_mng;

typedef T_lbfl_r_cst_process_error_mng *T_lbfl_pr_process_error_mng;

typedef struct
{
	T_uint32					ul_process_id;
	T_uint32					ul_level_error_detection_nb;
	T_uint32					tul_fsc_error_detection_nb[50];
	T_boolean					b_current_cycle_error_detection;
	T_lbfl_pr_error_mng			pr_error_mng;
	T_uint32					ul_component_number;
	T_uint32					ul_error_number;
} T_lbfl_r_global_error_mng;


typedef struct
{
	T_uint32					ul_process_id;
	T_lbfl_pr_fsc_name_config	pr_process_fsc_name_config;
	T_lbfl_pr_fsc_error_config	pr_process_gnerr_config;

} T_lbfl_r_process_error_config;

typedef const T_lbfl_r_process_error_config T_lbfl_r_cst_process_error_config;
typedef T_lbfl_r_cst_process_error_config *T_lbfl_pr_process_error_config; 


typedef struct
{
	T_uint32					ul_process_id;
	T_lbfl_pr_process_error_mng pr_process_error_mng;
	T_lbfl_pr_fsc_error_config	pr_process_gnerr_config;

} T_lbfl_r_process_error_desc;


typedef const T_lbfl_r_process_error_desc T_lbfl_r_cst_process_error_desc;
typedef T_lbfl_r_cst_process_error_desc *T_lbfl_pr_process_error_desc; 

typedef struct
{
	T_uchar		*puc_ctxt_data_area;
	T_uint32    ul_ctxt_data_area_size;
	
} T_lbfl_r_ctxt_data_write_error;


typedef struct
{
	T_uint32				ul_error_id;
	T_uint32				ul_fsc_component_id;
	T_uchar					*puc_fsc_component_file_name;
	T_uint32				tuc_fsc_component_line_number;
	T_uint32				ul_ctxt_data_1;
	T_uint32				ul_ctxt_data_2;
	T_uint32				ul_ctxt_data_3;
	T_uchar					*puc_ctxt_data_area;
	T_uint32				ul_ctxt_data_area_size;
	
} T_lbfl_r_lbfl_write_internal_error;

typedef enum
{

	K_LBFL_E_WRITE_BITE,
	K_LBFL_E_WRITE_DEBUG,
	K_LBFL_E_WRITE_OS,
	K_LBFL_E_WRITE_DEBUG_OS,
	K_LBFL_E_WRITE_DEBUG_BITE
	
} T_lbfl_e_destination;	


typedef struct
{	
		T_lbfl_e_destination			e_destination;
		T_uint32						ul_process_id;
		T_lbfl_pr_error_mng				pr_error_mng;
		T_lbfl_pr_error_config			pr_error_config;
		T_uint32						ul_error_localisation_fsc_id;
		T_uint32						ul_error_config_table_fsc_id;
		T_uint32						ul_fsc_error_id;
		T_uint32						ul_fsc_component_id;
		T_uint32						ul_fsc_component_line_number;
		T_uint32						ul_ctxt_data_1;
		T_uint32						ul_ctxt_data_2;
		T_uint32						ul_ctxt_data_3;
		T_uchar							*puc_ctxt_data_area;
		T_uint32						ul_ctxt_data_area_size;
		T_uint32						tul_LR_historix[4];
}	T_lbfl_r_lbfl_write_arg;


# 197 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_mng_ifc.h"
# 32 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_init.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_config_ifc.h"





























typedef struct
{
	T_uint32			ul_functional_block_id;
	T_uint32			ul_vendor_id;	
} T_lbfl_r_bfm_config;

typedef const T_lbfl_r_bfm_config T_lbfl_r_cst_bfm_config;
typedef T_lbfl_r_cst_bfm_config *T_lbfl_pr_bfm_config;

typedef struct
{
	T_uint32			ul_process_nb;
	T_int32				*pl_process_id;
	
} T_lbfl_r_process_config;

typedef const T_lbfl_r_process_config T_lbfl_r_cst_process_config;
typedef T_lbfl_r_cst_process_config *T_lbfl_pr_process_config;

typedef struct
{
	T_lbfl_pr_bfm_config		pr_bfm_config;
	T_lbfl_pr_process_config	pr_process_config;
	T_uint32					ul_partition_gnerr_nb;
} T_lbfl_r_partition_error_config;
typedef const T_lbfl_r_partition_error_config T_lbfl_r_cst_partition_error_config;





# 62 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_config_ifc.h"
# 33 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_init.h"




typedef enum
{
	
	K_LBFL_E_INIT_BEGIN,
	K_LBFL_E_PARTITION_INIT_ENDED,
	K_LBFL_E_INIT_ENDED,
	K_LBFL_E_CLEAR_INIT_ENDED
	
} T_lbfl_e_failure_init_status;	


typedef enum
{
	
	K_LBFL_E_FSC_LEVEL,
	K_LBFL_E_PROCESS_LEVEL,
	K_LBFL_E_PARTITION_LEVEL,
	K_LBFL_E_ERROR_MNG_LEVEL_MAX_NB
} T_lbfl_e_error_mng_level;	
	


extern T_lbfl_e_failure_init_status		e_lbfl_failure_init_status;

extern T_uint32							ul_lbfl_call_number;

extern T_lbfl_r_partition_error_config	r_lbfl_partition_error_config;


extern	T_lbfl_r_process_error_config	tr_process_error_config[5];

extern 	T_lbfl_r_global_error_mng	tr_lbfl_global_error_mng[5][K_LBFL_E_ERROR_MNG_LEVEL_MAX_NB];


extern T_lbfl_r_error_mng	r_lbfl_error_mng;
extern T_lbfl_pr_error_mng	pr_lbfl_error_mng;


# 76 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_init.h"
# 37 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_fsc_error_ifc.h"












































































































































# 38 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_component_id_ifc.h"















































typedef enum
{
	
	K_LBFL_E_LBFL_MAIN_CPT_ID,
	K_LBFL_E_LBFL_FILT_CPT_ID,
	K_LBFL_E_LBFL_INIT_CPT_ID,
	K_LBFL_E_LBFL_MNG_CPT_ID,
	K_LBFL_E_LBFL_WRITE_CPT_ID,
	K_LBFL_E_LBFL_DEBUG_REPORT_IFC_CPT_ID,
	K_LBFL_E_LBFL_FAILURE_REPORT_IFC_CPT_ID,
	K_LBFL_E_LBFL_PARTITION_ERROR_CONFIG_INIT_CPT_ID,
	K_LBFL_E_LBFL_PROCESS_ERROR_CONFIG_INIT_CPT_ID,
	K_LBFL_E_LBFL_WRITE_DEBUG_CPT_ID
	
} T_lbfl_e_component_id;	



























# 91 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_component_id_ifc.h"
# 39 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"

# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_failure_report_ifc.h"










































































































 







 
 
extern QUEUING_PORT_ID_TYPE	l_lbfl_failure_report_qport_id;




# 123 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_failure_report_ifc.h"



# 41 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_mng_ifc.h"




































































































































































































# 42 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_ifc.h"



























































































































typedef enum
{
	

	K_LBFL_E_CATEGORY_NOT_DEFINED,


	

	K_LBFL_E_CATEGORY_SERV_TIMING,
	K_LBFL_E_CATEGORY_SERV_SAMPLING_PORT,
	K_LBFL_E_CATEGORY_SERV_QUEUING_PORT,
	K_LBFL_E_CATEGORY_SERV_PROCESS,
	K_LBFL_E_CATEGORY_SERV_PARTITION,
	K_LBFL_E_CATEGORY_SERV_EVENT,
	K_LBFL_E_CATEGORY_SERV_BUFFER,
	K_LBFL_E_CATEGORY_SERV_BLACKBOARD,
	K_LBFL_E_CATEGORY_SERV_SEMAPHORE,
	K_LBFL_E_CATEGORY_SERV_HEALT_MONITOR
	
} T_lbfl_e_partition_error_category;









typedef enum
{

    

	K_LBFL_E_GNERR_SERV_TIMING_TIMED_WAIT = 0x20000,		
	K_LBFL_E_GNERR_SERV_TIMING_PERIODIC_WAIT,	
	K_LBFL_E_GNERR_SERV_TIMING_GET_TIME,			
	K_LBFL_E_GNERR_SERV_TIMING_REPLENISH,		


	

	K_LBFL_E_GNERR_SERV_SAMPLING_PORT_CREATE,	
	K_LBFL_E_GNERR_SERV_SAMPLING_PORT_WRITE,		
	K_LBFL_E_GNERR_SERV_SAMPLING_PORT_READ,		
	K_LBFL_E_GNERR_SERV_SAMPLING_PORT_ID,		
	K_LBFL_E_GNERR_SERV_SAMPLING_PORT_STATUS,	


	
		
	K_LBFL_E_GNERR_SERV_QUEUING_PORT_CREATE,		
	K_LBFL_E_GNERR_SERV_QUEUING_PORT_SEND,		
	K_LBFL_E_GNERR_SERV_QUEUING_PORT_READ,		
	K_LBFL_E_GNERR_SERV_QUEUING_PORT_ID,			
	K_LBFL_E_GNERR_SERV_QUEUING_PORT_STATUS,		


	

	K_LBFL_E_GNERR_SERV_PROCESS_CREATE,				
	K_LBFL_E_GNERR_SERV_PROCESS_ID,					
	K_LBFL_E_GNERR_SERV_PROCESS_STATUS,				
	K_LBFL_E_GNERR_SERV_PROCESS_SET_PRIORITY,		
	K_LBFL_E_GNERR_SERV_PROCESS_SUSPEND_SELF,		
	K_LBFL_E_GNERR_SERV_PROCESS_SUSPEND,				
	K_LBFL_E_GNERR_SERV_PROCESS_RESUME,				
	K_LBFL_E_GNERR_SERV_PROCESS_STOP_SELF,			
	K_LBFL_E_GNERR_SERV_PROCESS_STOP,				
	K_LBFL_E_GNERR_SERV_PROCESS_START,				
	K_LBFL_E_GNERR_SERV_PROCESS_LOCK_PREEMPTION,		
	K_LBFL_E_GNERR_SERV_PROCESS_UNLOCK_PREEMPTION,	


	

	K_LBFL_E_GNERR_SERV_PARTITION_STATUS,		
	K_LBFL_E_GNERR_SERV_PARTITION_MODE,			


	

	K_LBFL_E_GNERR_SERV_EVENT_CREATE,			
	K_LBFL_E_GNERR_SERV_EVENT_SET,				
	K_LBFL_E_GNERR_SERV_EVENT_RESET,				
	K_LBFL_E_GNERR_SERV_EVENT_WAIT,				
	K_LBFL_E_GNERR_SERV_EVENT_ID,				
	K_LBFL_E_GNERR_SERV_EVENT_STATUS,			


	

	K_LBFL_E_GNERR_SERV_BUFFER_CREATE,			
	K_LBFL_E_GNERR_SERV_BUFFER_SEND,				
	K_LBFL_E_GNERR_SERV_BUFFER_RECEIVE,			
	K_LBFL_E_GNERR_SERV_BUFFER_ID,				
	K_LBFL_E_GNERR_SERV_BUFFER_STATUS,			


	

	K_LBFL_E_GNERR_SERV_BLACKBOARD_CREATE,		
	K_LBFL_E_GNERR_SERV_BLACKBOARD_DISPLAY,		
	K_LBFL_E_GNERR_SERV_BLACKBOARD_READ,			
	K_LBFL_E_GNERR_SERV_BLACKBOARD_CLEAR,		
	K_LBFL_E_GNERR_SERV_BLACKBOARD_ID,			
	K_LBFL_E_GNERR_SERV_BLACKBOARD_STATUS,		


	

	K_LBFL_E_GNERR_SERV_SEMAPHORE_CREATE,		
	K_LBFL_E_GNERR_SERV_SEMAPHORE_WAIT,			
	K_LBFL_E_GNERR_SERV_SEMAPHORE_SIGNAL,		
	K_LBFL_E_GNERR_SERV_SEMAPHORE_ID,			
	K_LBFL_E_GNERR_SERV_SEMAPHORE_STATUS,	
	
	
	
	K_LBFL_E_GNERR_SERV_REPORT_APPLICATION_MESSAGE,		
	K_LBFL_E_GNERR_SERV_CREATE_ERROR_HANDLER,			
	K_LBFL_E_GNERR_SERV_GET_ERROR_STATUS,		
	K_LBFL_E_GNERR_SERV_RAISE_APPLICATION_ERROR,			

	 
	K_LBFL_E_GNERR_SERV_NULL_PT,
	K_LBFL_E_GNERR_SERV_UNEXPECTED_VALUE,
	K_LBFL_E_GNERR_SERV_WARNING_UNEXPECTED_VALUE,
	
	
	K_LBFL_E_NB_GNERR_PLUS_K_LBFL_GNERR_OFFSET	
	
} T_lbfl_e_partition_gnerr_index;





















# 280 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_ifc.h"
# 43 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_desc_config.h"



























# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_ifc.h"























































































































































































































































































# 29 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_desc_config.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_errors_desc_ifc.h"














































































































































# 30 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_desc_config.h"







































extern T_lbfl_r_cst_error_config		TR_LBFL_PARTITION_GNERR_CONFIG [(K_LBFL_E_NB_GNERR_PLUS_K_LBFL_GNERR_OFFSET - 0x20000)];
extern T_lbfl_r_cst_fsc_error_config	R_LBFL_PARTITION_GNERR_CONFIG;


# 74 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_partition_error_desc_config.h"
# 44 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/Lbport_pc/Interface/lbport_record_LR_historix.h"






































# 45 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"


# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_write.p"














































extern	T_lbfl_r_lbfl_write_arg lbfl_write (T_lbfl_r_lbfl_write_arg *par_pr_write_arg);
# 48 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_filt.p"
















































extern T_lbfl_e_return_confirm lbfl_filt(T_lbfl_pr_error_confirm par_pr_error_confirm);						
# 49 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/LBSTR_CMP.p"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"







	typedef	enum 
	{		
		false,
		true
	} boolean;
# 14 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	unsigned char	u_char;
# 19 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	signed char		s_char;
# 24 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	unsigned short	u_short;
# 29 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	signed short	s_short;
# 34 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	unsigned long	u_long;
# 39 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	signed long		s_long;
# 44 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	float			t_float;
# 49 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"



	typedef	double		t_double;
# 54 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"

# 56 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/C_TYPES.t"

# 2 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/../CDS_A400M_PDU_LIBRARY/TARGET/PDUSW/TARGET/LIVRAISON/INCLUDE/LBSTR_CMP.p"

extern	boolean	lbstr_cmp (
const u_char	*par_first,
const u_char	*par_second);
# 50 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_mng_write.p"















































extern	void lbfl_mng_write
	(	T_uint32				par_e_destination_write,
		T_uint32				par_e_destination_write_in_error,
		T_uint32				par_line,
		T_lbfl_r_lbfl_write_arg *par_pr_lbfl_mng_fail_write_arg,
		T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg	);
# 51 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_save_previous_error_arg.p"














































extern	void lbfl_save_previous_error_arg
	(	T_lbfl_r_lbfl_write_arg			*par_pr_previous_error_arg,
		T_lbfl_r_lbfl_write_arg			*par_pr_current_error_arg		);
# 52 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_mng_lbfl_internal_error.p"


















































extern	void	lbfl_mng_lbfl_internal_error		
	(	T_lbfl_e_fsc_err_index		par_ul_error_id,
		T_uint32					par_ul_line,
		T_lbfl_r_lbfl_write_arg		*par_pr_lbfl_mng_fail_write_arg,
		T_lbfl_r_lbfl_write_arg 	*par_pr_lbfl_write_arg,
		T_boolean					par_b_fatal_error_test	);
# 53 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_ctxt_data_to_ctxt_area_copy.p"














































extern void lbfl_ctxt_data_to_ctxt_area_copy (T_lbfl_r_lbfl_write_arg *par_pr_lbfl_write_arg);

# 54 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/Lbport_pc/Interface/lbport_record_LR_historix.p"














































extern void lbport_record_LR_historix (T_uint32	*par_pul_LR_historix);
# 55 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"




# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Interface/lbfl_mng.p"















































extern	void lbfl_mng 
(		T_lbfl_r_cst_fsc_error_config		par_r_fsc_errors_config,
		T_uint32							par_ul_fsc_error_id,
		T_uint32							par_ul_fsc_component_id,
		T_uchar								*par_puc_fsc_component_file_name,
		T_uint32							par_ul_fsc_component_line_number,
		T_uint32							par_ul_ctxt_data_1,
		T_uint32							par_ul_ctxt_data_2,
		T_uint32							par_ul_ctxt_data_3,
		T_uchar								*par_puc_ctxt_data_area,
		T_uint32							par_ul_ctxt_data_area_size
);

# 60 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c"













static	T_boolean					lbfl_fsc_index
	(	T_char						*par_puc_fsc_name,
		T_uint32					par_ul_process_id,
		T_uint32					par_ul_fsc_max_number,
		T_uint32					*par_pul_fsc_index,
		T_uint32					*par_pul_process_and_fsc_id );

static	T_boolean					lbfl_fsc_index_limited
	(	T_char							*par_puc_fsc_name,
		T_lbfl_r_cst_fsc_name_config	*par_pr_fsc_name_config,
		T_uint32						par_ul_fsc_max_number,
		T_uint32						*par_pul_fsc_index	);

static	void					lbfl_mng_lbfl_mng_internal_error
		
	(	T_lbfl_e_fsc_err_index	par_ul_error_id,
		T_uint32				par_ul_line,
		T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_mng_fail_write_arg,
		T_lbfl_r_lbfl_write_arg *par_r_lbfl_write_arg,
		T_boolean				par_b_fatal_error_test	);


static const T_uint32 stc_ul_error_msg = 0xA380DEAD;

static T_boolean lbfl_manage_ctx_data (T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg, 
                                       T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_mng_fail_write_arg, 
                                       T_uchar *par_tuc_ctxt_area,
                                       T_boolean par_b_fatal_error_test);


void		lbfl_mng
	(	T_lbfl_r_cst_fsc_error_config	par_r_fsc_errors_config,
		T_uint32						par_ul_fsc_error_id,
		T_uint32						par_ul_fsc_component_id,
		T_uchar							*par_puc_fsc_component_file_name,
		T_uint32						par_ul_fsc_component_line_number,
		T_uint32						par_ul_ctxt_data_1,
		T_uint32						par_ul_ctxt_data_2,
		T_uint32						par_ul_ctxt_data_3,
		T_uchar							*par_puc_ctxt_data_area,
		T_uint32						par_ul_ctxt_data_area_size	)
{_ATC_DECLARE_COND_ELT(1,80);_ATC_LINK(1);{_ATC_BLOC(1,70);{	
	
	RETURN_CODE_TYPE					loc_e_return_code = NO_ERROR;
	T_lbfl_r_error_confirm				*loc_pr_error_confirm = ((T_ptr)0);
	T_lbfl_pr_fsc_error_config			loc_pr_fsc_error_config;
	T_lbfl_r_lbfl_write_arg				loc_r_lbfl_write_internal_error = {K_LBFL_E_WRITE_BITE, (T_uint32)K_LBFL_E_PARTITION_LEVEL, ((T_ptr)0), ((T_ptr)0), 0UL, 0UL, (T_uint32)K_LBFL_E_FSC_ERR_NONE, K_LBFL_E_LBFL_MNG_CPT_ID, 0UL, 0UL, 0UL, 0UL, ((T_ptr)0), 0UL, {0UL, 0UL, 0UL, 0UL}};
	T_lbfl_e_return_confirm				loc_b_filt = K_LBFL_E_RETURN_NOT_CONFIRM;
	T_uint32							*loc_pul_level_error_detection_nb;
	T_uint32							*loc_pul_fsc_error_detection_nb;
	T_char								*loc_puc_err_fsc_name;
	T_uint32							loc_ul_fsc_max_number;
	T_uint32							loc_ul_fsc_id;
	T_uint32							loc_ul_error_max_number;
	T_boolean							loc_b_return_fsc_index;


	T_lbfl_r_lbfl_write_arg				loc_r_lbfl_write_arg = {K_LBFL_E_WRITE_BITE, 0UL, ((T_ptr)0), ((T_ptr)0), 0UL, 0UL, (T_uint32)K_LBFL_E_FSC_ERR_NONE, K_LBFL_E_LBFL_MNG_CPT_ID, 0UL, 0UL, 0UL, 0UL, ((T_ptr)0), 0UL, {(('L' << 24) + ('R' << 16) + ('A' << 8) + 'D'), (('L' << 24) + ('R' << 16) + ('A' << 8) + 'D'), (('L' << 24) + ('R' << 16) + ('A' << 8) + 'D'), (('L' << 24) + ('R' << 16) + ('A' << 8) + 'D')}};
	T_lbfl_r_lbfl_write_arg				loc_r_lbfl_mng_fail_write_arg = {K_LBFL_E_WRITE_DEBUG_OS, 0UL, ((T_ptr)0), ((T_ptr)0), 0x1F, 0x1F, (T_uint32)K_LBFL_E_FSC_ERR_NONE, K_LBFL_E_LBFL_MNG_CPT_ID, 0UL, 0UL, 0UL, 0UL, ((T_ptr)0), 0UL, {0UL, 0UL, 0UL, 0UL}};
	T_boolean							loc_b_lbfl_mng_fail = 0UL;
	T_uchar								loc_tuc_ctxt_area[84];
	T_lbfl_pr_error_mng					loc_pr_error_mng;
	T_uint32							loc_ul_error_nb_already_found;
	T_uint32							loc_ul_error_mng_index;	
    T_boolean							loc_b_found = 0UL;

	T_uint32							loc_ul_masked_error_id;
	
	(_ATC_CALL(1,0),lbport_record_LR_historix (&loc_r_lbfl_write_arg.tul_LR_historix[0]));

    
	loc_r_lbfl_write_arg.ul_process_id			= *r_lbfl_partition_error_config.pr_process_config->pl_process_id;

    

	loc_r_lbfl_mng_fail_write_arg.ul_process_id = loc_r_lbfl_write_arg.ul_process_id;
	loc_r_lbfl_mng_fail_write_arg.pr_error_mng = pr_lbfl_error_mng;
	loc_r_lbfl_mng_fail_write_arg.pr_error_config = ((T_lbfl_r_error_config	*) TR_LBFL_FSC_ERR_CONFIG);
	loc_r_lbfl_mng_fail_write_arg.puc_ctxt_data_area = loc_tuc_ctxt_area;
	loc_r_lbfl_mng_fail_write_arg.pr_error_mng->puc_fsc_component_file_name = "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/COMMON/Lbfl/Src/lbfl_mng.c";
	loc_r_lbfl_mng_fail_write_arg.ul_error_config_table_fsc_id =	(loc_r_lbfl_write_arg.ul_process_id << 5) + 0x1F;
	loc_r_lbfl_mng_fail_write_arg.ul_error_localisation_fsc_id =	(loc_r_lbfl_write_arg.ul_process_id << 5) + 0x1F;

	


	loc_r_lbfl_write_arg.ul_error_localisation_fsc_id = 
        ((((T_uint32) par_r_fsc_errors_config.tuc_fsc_name[2]) << 8) +
        ((T_uint32) par_r_fsc_errors_config.tuc_fsc_name[3]));
	
	


	loc_r_lbfl_write_arg.ul_error_config_table_fsc_id = loc_r_lbfl_write_arg.ul_error_localisation_fsc_id;

	
	loc_r_lbfl_write_arg.ul_fsc_error_id = par_ul_fsc_error_id;
	loc_r_lbfl_write_arg.ul_fsc_component_id = par_ul_fsc_component_id;
	loc_r_lbfl_write_arg.ul_fsc_component_line_number = par_ul_fsc_component_line_number;
	loc_r_lbfl_write_arg.ul_ctxt_data_1 = par_ul_ctxt_data_1;
	loc_r_lbfl_write_arg.ul_ctxt_data_2 = par_ul_ctxt_data_2;
	loc_r_lbfl_write_arg.ul_ctxt_data_3 = par_ul_ctxt_data_3;

	loc_r_lbfl_write_arg.puc_ctxt_data_area = par_puc_ctxt_data_area;
	loc_r_lbfl_write_arg.ul_ctxt_data_area_size = par_ul_ctxt_data_area_size;

   
	if ( (_ATC_COND_ELEM_1()(e_lbfl_failure_init_status == K_LBFL_E_INIT_ENDED)_ATC_COND_ELEM_2(1,0)))	   
	{_ATC_BLOC(1,68);{		
		
		if	(	(_ATC_COND_END_1(1,8,0,3,0,2)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_r_lbfl_write_arg.ul_process_id == 0)_ATC_COND_ELEM_2(1,2)))_ATC_COND_SYNC_2(1,0+0))) ||
				(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].ul_process_id	==	loc_r_lbfl_write_arg.ul_process_id)_ATC_COND_ELEM_2(1,4)))_ATC_COND_SYNC_2(1,0+1))	) &&
				((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_r_lbfl_write_arg.ul_process_id	<=	5)_ATC_COND_ELEM_2(1,6)))_ATC_COND_SYNC_2(1,0+2))		)))_ATC_COND_END_2(1,8,0,3,0,2))		)
		{_ATC_BLOC(1,66);{			
				

				
				loc_ul_masked_error_id = ( par_ul_fsc_error_id & 0x00020000 );
				if ((_ATC_COND_ELEM_1()(loc_ul_masked_error_id)_ATC_COND_ELEM_2(1,12)))
				{_ATC_BLOC(1,2);{
					loc_r_lbfl_write_arg.ul_error_config_table_fsc_id = 0x1F;

					
					loc_ul_masked_error_id = ( loc_r_lbfl_write_arg.ul_fsc_error_id & 0x00000FFF );
					if ((_ATC_COND_ELEM_1()(loc_ul_masked_error_id < (K_LBFL_E_NB_GNERR_PLUS_K_LBFL_GNERR_OFFSET - 0x20000))_ATC_COND_ELEM_2(1,14)))
					{_ATC_BLOC(1,0);{
						
						;
					}}
					else 
					{_ATC_BLOC(1,1);{

						loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 = ( loc_r_lbfl_write_arg.ul_fsc_error_id & 0x00000FFF );
						(_ATC_CALL(1,1),lbfl_mng_lbfl_mng_internal_error  
							(K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE, 207, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));
					}} 
					


					loc_r_lbfl_write_arg.pr_error_mng = tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PARTITION_LEVEL].pr_error_mng;
					loc_ul_error_max_number =			tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PARTITION_LEVEL].ul_error_number;
					loc_ul_fsc_max_number =				tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PARTITION_LEVEL].ul_component_number;
					tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PARTITION_LEVEL].b_current_cycle_error_detection = 1UL;
					loc_pr_fsc_error_config =			&R_LBFL_PARTITION_GNERR_CONFIG;
					loc_pul_level_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PARTITION_LEVEL].ul_level_error_detection_nb;
					loc_pul_fsc_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PARTITION_LEVEL].tul_fsc_error_detection_nb[0];
				}}
				else 
				{_ATC_BLOC(1,9);{

					loc_ul_masked_error_id = ( par_ul_fsc_error_id & 0x00010000 );
					if ((_ATC_COND_ELEM_1()(loc_ul_masked_error_id)_ATC_COND_ELEM_2(1,16)))
					{_ATC_BLOC(1,5);{
						loc_r_lbfl_write_arg.ul_error_config_table_fsc_id = 0x1F;


						loc_r_lbfl_write_arg.pr_error_mng = tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PROCESS_LEVEL].pr_error_mng;
						loc_ul_error_max_number =			tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PROCESS_LEVEL].ul_error_number;
						loc_ul_fsc_max_number =				tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PROCESS_LEVEL].ul_component_number;
						tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PROCESS_LEVEL].b_current_cycle_error_detection = 1UL;
						loc_pr_fsc_error_config =			tr_process_error_config[loc_r_lbfl_write_arg.ul_process_id].pr_process_gnerr_config;
						loc_pul_level_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PROCESS_LEVEL].ul_level_error_detection_nb;
						loc_pul_fsc_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_PROCESS_LEVEL].tul_fsc_error_detection_nb[0];
						

						if ((_ATC_COND_ELEM_1()(loc_pr_fsc_error_config == ((T_ptr)0))_ATC_COND_ELEM_2(1,18)))
						{_ATC_BLOC(1,3);{

							(_ATC_CALL(1,2),lbfl_mng_lbfl_mng_internal_error  
								(K_LBFL_E_FSC_ERR_PTR_NULL, 242, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));
						}}
						else
						{_ATC_BLOC(1,4);{
						
							;
						}} 
						
					}}
					
					else 
					{_ATC_BLOC(1,8);{

						loc_r_lbfl_write_arg.pr_error_mng = tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].pr_error_mng;			
						loc_ul_error_max_number =			tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].ul_error_number;
						loc_ul_fsc_max_number =				tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].ul_component_number;
						tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].b_current_cycle_error_detection = 1UL;
						loc_pr_fsc_error_config =			&par_r_fsc_errors_config;
						loc_pul_level_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].ul_level_error_detection_nb;
						loc_pul_fsc_error_detection_nb =	&tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].tul_fsc_error_detection_nb[0];

						
						loc_ul_masked_error_id = ( loc_r_lbfl_write_arg.ul_fsc_error_id & 0x00000FFF );
						if ((_ATC_COND_ELEM_1()(loc_ul_masked_error_id > loc_pr_fsc_error_config->ul_nb_errors)_ATC_COND_ELEM_2(1,20)))
						{_ATC_BLOC(1,6);{

							loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 = ( loc_r_lbfl_write_arg.ul_fsc_error_id & 0x00000FFF );
							(_ATC_CALL(1,3),lbfl_mng_lbfl_mng_internal_error  
								(K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE, 270, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));
						}}
						else
						{_ATC_BLOC(1,7);{
							
							;
						}} 
						
					}}
					
				}}
				

			    
				loc_r_lbfl_write_arg.pr_error_config = (T_lbfl_r_error_config *) &loc_pr_fsc_error_config->pr_error_config[(( loc_r_lbfl_write_arg.ul_fsc_error_id & 0x00000FFF ))];

						
				if ((_ATC_COND_ELEM_1()(loc_r_lbfl_write_arg.pr_error_config  == ((T_ptr)0))_ATC_COND_ELEM_2(1,22)))
				{_ATC_BLOC(1,10);{


					(_ATC_CALL(1,4),lbfl_mng_lbfl_mng_internal_error  
						(K_LBFL_E_FSC_ERR_PTR_NULL, 292, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));
					loc_b_lbfl_mng_fail = 1UL;
				}}
				else
				{_ATC_BLOC(1,11);{
					
					;
				}} 
				

            
            (_ATC_CALL(1,5),lbfl_manage_ctx_data (&loc_r_lbfl_write_arg, &loc_r_lbfl_mng_fail_write_arg, &loc_tuc_ctxt_area[0], 1UL));
		
			 
			
			
			(_ATC_CALL(1,6),lbfl_ctxt_data_to_ctxt_area_copy (&loc_r_lbfl_write_arg));
				

				loc_puc_err_fsc_name = (T_char *) loc_pr_fsc_error_config->tuc_fsc_name;


			loc_b_return_fsc_index = (_ATC_CALL(1,7),lbfl_fsc_index (loc_puc_err_fsc_name, 
															loc_r_lbfl_write_arg.ul_process_id,
															loc_ul_fsc_max_number, 
															&loc_ul_fsc_id, 
															&loc_r_lbfl_write_arg.ul_error_config_table_fsc_id));


				if ((_ATC_COND_ELEM_1()(loc_b_return_fsc_index == 0UL)_ATC_COND_ELEM_2(1,24))) 
				{_ATC_BLOC(1,12);{

					
					loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 =	loc_r_lbfl_write_arg.ul_error_localisation_fsc_id; 
					(_ATC_CALL(1,8),lbfl_mng_lbfl_mng_internal_error  
						(K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE, 327, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 1UL));
					loc_b_lbfl_mng_fail = 1UL;
				}}
				else 
				{_ATC_BLOC(1,13);{
				
					;
				}}
				



				if ((_ATC_COND_ELEM_1()(loc_b_lbfl_mng_fail == 0UL)_ATC_COND_ELEM_2(1,26)))
				{_ATC_BLOC(1,16);{

					loc_b_return_fsc_index = (_ATC_CALL(1,9),lbfl_fsc_index (	(T_char *) par_r_fsc_errors_config.tuc_fsc_name, 
																loc_r_lbfl_write_arg.ul_process_id, 
																loc_ul_fsc_max_number, 
																&loc_ul_fsc_id, 
																&loc_r_lbfl_write_arg.ul_error_localisation_fsc_id));

					if ((_ATC_COND_ELEM_1()(loc_b_return_fsc_index == 0UL)_ATC_COND_ELEM_2(1,28))) 
					{_ATC_BLOC(1,14);{

						loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 =	loc_r_lbfl_write_arg.ul_error_localisation_fsc_id; 
						(_ATC_CALL(1,10),lbfl_mng_lbfl_mng_internal_error  
							(K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE, 353, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 1UL));
						loc_b_lbfl_mng_fail = 1UL;
					}}
					else 
					{_ATC_BLOC(1,15);{
						
						;
					}}
						
				}}
				else
				{_ATC_BLOC(1,17);{
				
					;
				}}
				

			
			loc_ul_masked_error_id = ( par_ul_fsc_error_id & 0x00000F000 );
			if (	(_ATC_COND_END_1(1,38,8,4,1,1)((	(_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_r_lbfl_write_arg.ul_process_id	!= 0)_ATC_COND_ELEM_2(1,30)))_ATC_COND_SYNC_2(1,8+0)) )	&&
					(	(_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id				!= 0xE000)_ATC_COND_ELEM_2(1,32)))_ATC_COND_SYNC_2(1,8+1)) )		&&
					(	(_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id				!= 0xF000)_ATC_COND_ELEM_2(1,34)))_ATC_COND_SYNC_2(1,8+2)) )		&&
					(	(_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id				!= 0x7000)_ATC_COND_ELEM_2(1,36)))_ATC_COND_SYNC_2(1,8+3)) ))_ATC_COND_END_2(1,38,8,4,1,1))		)
			{_ATC_BLOC(1,59);{
				
				if	((_ATC_COND_ELEM_1()(loc_b_lbfl_mng_fail == 0UL)_ATC_COND_ELEM_2(1,43)))
				{_ATC_BLOC(1,20);{
					
						if ((_ATC_COND_ELEM_1()(loc_r_lbfl_write_arg.pr_error_mng	== ((T_ptr)0))_ATC_COND_ELEM_2(1,45)))					
						{_ATC_BLOC(1,18);{
						
							(_ATC_CALL(1,11),lbfl_mng_lbfl_mng_internal_error  
								(K_LBFL_E_FSC_ERR_PTR_NULL, 385, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 1UL));
							loc_b_lbfl_mng_fail = 1UL;
						}}
						else
						{_ATC_BLOC(1,19);{
							
							;
						}} 
						
					}}
					else 
					{_ATC_BLOC(1,21);{
						
						;
					}}
					

					
					if ((_ATC_COND_ELEM_1()(loc_b_lbfl_mng_fail == 0UL)_ATC_COND_ELEM_2(1,47)))
					{_ATC_BLOC(1,44);{

						loc_r_lbfl_write_arg.pr_error_mng = loc_r_lbfl_write_arg.pr_error_mng + (loc_ul_error_max_number * loc_ul_fsc_id);
						loc_pr_error_mng = loc_r_lbfl_write_arg.pr_error_mng;


						loc_pul_fsc_error_detection_nb = loc_pul_fsc_error_detection_nb + loc_ul_fsc_id;

						loc_ul_error_nb_already_found = 0;
						loc_ul_error_mng_index = 0;

						

						if ((_ATC_COND_ELEM_1()(*loc_pul_fsc_error_detection_nb != 0)_ATC_COND_ELEM_2(1,49)))
						{_ATC_BLOC(1,31);{






							{_ATC_LOOP_bef1(1,29);do
							{_ATC_LOOP_in1(1,29);{_ATC_BLOC(1,28);{
                            
								loc_pr_error_confirm = &loc_pr_error_mng->r_error_confirm;

								

								if (	(_ATC_COND_END_1(1,55,16,2,2,2)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->b_current_cycle_detection	== 1UL)_ATC_COND_ELEM_2(1,51)))_ATC_COND_SYNC_2(1,16+0))) ||
										((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->ul_occ_index					!= 0)_ATC_COND_ELEM_2(1,53)))_ATC_COND_SYNC_2(1,16+1))))_ATC_COND_END_2(1,55,16,2,2,2))				)
								{_ATC_BLOC(1,26);{
									

									loc_ul_error_nb_already_found++;

									

									loc_ul_masked_error_id = ( loc_r_lbfl_write_arg.ul_fsc_error_id & 0x00000FFF );
									if (	(_ATC_COND_END_1(1,64,24,3,3,1)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->e_current_error_desc.ul_error_id	== loc_ul_masked_error_id)_ATC_COND_ELEM_2(1,58)))_ATC_COND_SYNC_2(1,24+0)))	&&
											((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->e_current_error_desc.ul_csu_id	== loc_r_lbfl_write_arg.ul_fsc_component_id)_ATC_COND_ELEM_2(1,60)))_ATC_COND_SYNC_2(1,24+1))			)	&&
											((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->e_current_error_desc.ul_category	== loc_r_lbfl_write_arg.pr_error_config->ul_category)_ATC_COND_ELEM_2(1,62)))_ATC_COND_SYNC_2(1,24+2))))_ATC_COND_END_2(1,64,24,3,3,1))		)
									{_ATC_BLOC(1,24);{
										
										 
										loc_ul_masked_error_id = loc_r_lbfl_write_arg.ul_error_localisation_fsc_id & 0x00001F;
										if (	(_ATC_COND_END_1(1,80,32,6,4,7)((	(	(	((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id != 0)_ATC_COND_ELEM_2(1,68)))_ATC_COND_SYNC_2(1,32+0))) &&
															((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id != 1)_ATC_COND_ELEM_2(1,70)))_ATC_COND_SYNC_2(1,32+1)))	)	&&
														((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->e_current_error_desc.ul_line == loc_r_lbfl_write_arg.ul_fsc_component_line_number)_ATC_COND_ELEM_2(1,72)))_ATC_COND_SYNC_2(1,32+2)))	)	) ||
												(	(	(	((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id == 0)_ATC_COND_ELEM_2(1,74)))_ATC_COND_SYNC_2(1,32+3))) ||
															((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id == 1)_ATC_COND_ELEM_2(1,76)))_ATC_COND_SYNC_2(1,32+4)))	)	&&
														((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->e_current_error_desc.ul_line == loc_r_lbfl_write_arg.ul_ctxt_data_1)_ATC_COND_ELEM_2(1,78)))_ATC_COND_SYNC_2(1,32+5)))	)	))_ATC_COND_END_2(1,80,32,6,4,7))	)

										{_ATC_BLOC(1,22);{
											

											loc_pr_error_confirm->b_current_cycle_detection = 1UL;
											
											loc_b_found	= 1UL;
										}}
										else
										{_ATC_BLOC(1,23);{
											
											;
										}}
									}}
									else
									{_ATC_BLOC(1,25);{
										
										;
									}}
								}}
								else
								{_ATC_BLOC(1,27);{
									
									;
								}}
				
								loc_ul_error_mng_index++;
								loc_pr_error_mng ++;

							
							}}} while (	(_ATC_COND_END_1(1,102,40,3,5,1)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_b_found == 0UL)_ATC_COND_ELEM_2(1,96)))_ATC_COND_SYNC_2(1,40+0)))									&& 
										((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_error_mng_index < loc_ul_error_max_number)_ATC_COND_ELEM_2(1,98)))_ATC_COND_SYNC_2(1,40+1)))				&& 
										((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_error_nb_already_found < *loc_pul_fsc_error_detection_nb)_ATC_COND_ELEM_2(1,100)))_ATC_COND_SYNC_2(1,40+2))))_ATC_COND_END_2(1,102,40,3,5,1))	);}

						}}
						else
						{_ATC_BLOC(1,32);{
							
							;
						}}



						if ((_ATC_COND_ELEM_1()(loc_b_found == 0UL)_ATC_COND_ELEM_2(1,106)))
						{_ATC_BLOC(1,42);{
							loc_ul_error_mng_index = 0;
							
							(*loc_pul_fsc_error_detection_nb) ++;
							
							(*loc_pul_level_error_detection_nb) ++;

							loc_pr_error_mng = loc_r_lbfl_write_arg.pr_error_mng;


							{_ATC_LOOP_bef1(1,38);do
							{_ATC_LOOP_in1(1,38);{_ATC_BLOC(1,37);{
								
								loc_pr_error_confirm = &loc_pr_error_mng->r_error_confirm;
								
								if (	(_ATC_COND_END_1(1,112,48,2,6,1)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->b_current_cycle_detection	== 0UL)_ATC_COND_ELEM_2(1,108)))_ATC_COND_SYNC_2(1,48+0))) &&
										((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->ul_occ_index					== 0)_ATC_COND_ELEM_2(1,110)))_ATC_COND_SYNC_2(1,48+1))))_ATC_COND_END_2(1,112,48,2,6,1))				)
								{_ATC_BLOC(1,35);{
									

									loc_pr_error_confirm->b_current_cycle_detection = 1UL;
									loc_b_found			= 1UL;

									
									loc_pr_error_confirm->e_current_error_desc.ul_error_id	= ( loc_r_lbfl_write_arg.ul_fsc_error_id & 0x00000FFF );
									loc_pr_error_confirm->e_current_error_desc.ul_csu_id	= loc_r_lbfl_write_arg.ul_fsc_component_id	;
									loc_pr_error_confirm->e_current_error_desc.ul_category	= loc_r_lbfl_write_arg.pr_error_config->ul_category;									
									
									
									
									loc_ul_masked_error_id = loc_r_lbfl_write_arg.ul_error_localisation_fsc_id & 0x00001F;
									if (	(_ATC_COND_END_1(1,119,56,2,7,2)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id == 0)_ATC_COND_ELEM_2(1,115)))_ATC_COND_SYNC_2(1,56+0))) ||
											((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_masked_error_id == 1)_ATC_COND_ELEM_2(1,117)))_ATC_COND_SYNC_2(1,56+1))))_ATC_COND_END_2(1,119,56,2,7,2))	)
									{_ATC_BLOC(1,33);{
										loc_pr_error_confirm->e_current_error_desc.ul_line		= loc_r_lbfl_write_arg.ul_ctxt_data_1;
									}}
									else
									{_ATC_BLOC(1,34);{
										loc_pr_error_confirm->e_current_error_desc.ul_line		= loc_r_lbfl_write_arg.ul_fsc_component_line_number;
									}}
								}}
								else
								{_ATC_BLOC(1,36);{
									
									;
								}}
				

								loc_ul_error_mng_index++;
								loc_pr_error_mng ++;

							}}} while ((_ATC_COND_END_1(1,126,64,2,8,1)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_b_found == 0UL)_ATC_COND_ELEM_2(1,122)))_ATC_COND_SYNC_2(1,64+0))) && ((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_error_mng_index < loc_ul_error_max_number)_ATC_COND_ELEM_2(1,124)))_ATC_COND_SYNC_2(1,64+1))))_ATC_COND_END_2(1,126,64,2,8,1)));}

							
							if ((_ATC_COND_ELEM_1()(loc_b_found == 0UL)_ATC_COND_ELEM_2(1,129)))
							{_ATC_BLOC(1,40);{
							
								(_ATC_CALL(1,12),lbfl_mng_lbfl_mng_internal_error  
								(K_LBFL_E_FSC_ERR_CTXT_SIZE, 557, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 1UL));
								loc_b_lbfl_mng_fail = 1UL;
							}}
							else
							{_ATC_BLOC(1,41);{
								
								;
							}}
						}}
						else
						{_ATC_BLOC(1,43);{
							
							;
						}}
					}}
					else
					{_ATC_BLOC(1,45);{
						
						;
					}}

					
					if ((_ATC_COND_ELEM_1()(loc_b_lbfl_mng_fail == 0UL)_ATC_COND_ELEM_2(1,131)))
					{_ATC_BLOC(1,50);{

						
						loc_r_lbfl_write_arg.pr_error_mng = --loc_pr_error_mng;

						

						loc_r_lbfl_write_arg.pr_error_mng->puc_error_label = (T_char *) &loc_r_lbfl_write_arg.pr_error_config->tuc_error_label[0];			

					
						

						loc_r_lbfl_write_arg.pr_error_mng->puc_fsc_component_file_name = par_puc_fsc_component_file_name;

						
						{_ATC_SWITCH;switch ( loc_pr_error_confirm->e_error_state )
						{
						
						case K_LBFL_E_NOT_APPEARED:{_ATC_COND_CASE(1,133);{_ATC_BLOC(1,46);

							
							loc_pr_error_confirm->e_error_state = K_LBFL_E_DETECTED;}}

							
							loc_pr_error_confirm->ul_occ_min_nb = loc_r_lbfl_write_arg.pr_error_config->r_confirmation.ul_nb_occ;
							loc_pr_error_confirm->ul_nb_cycl_max = loc_r_lbfl_write_arg.pr_error_config->r_confirmation.ul_nb_cycl;

							
							loc_b_filt =  (_ATC_CALL(1,13),lbfl_filt(loc_pr_error_confirm ));
								
						break;

						
						case K_LBFL_E_DETECTED:{_ATC_COND_CASE(1,134);{_ATC_BLOC(1,47);

							
							loc_b_filt = (_ATC_CALL(1,14),lbfl_filt(loc_pr_error_confirm ));}}

						break;

						
						case K_LBFL_E_CONFIRMED:{_ATC_COND_CASE(1,135);{_ATC_BLOC(1,48);
						
							
							loc_b_filt =  (_ATC_CALL(1,15),lbfl_filt(loc_pr_error_confirm ));}}

						break;

						
						default:{_ATC_COND_CASE(1,136);{_ATC_BLOC(1,49);

							loc_b_filt =  K_LBFL_E_RETURN_CONFIRM;}}

							loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 =	loc_pr_error_confirm->e_error_state;
							(_ATC_CALL(1,16),lbfl_mng_lbfl_mng_internal_error  
								(K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE, 635, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 1UL));
							loc_b_lbfl_mng_fail = 1UL;
							break;
						}}
						
					}}
					else
					{_ATC_BLOC(1,51);{
					
						;
					}}
					

					
					if ((_ATC_COND_ELEM_1()(loc_b_lbfl_mng_fail == 0UL)_ATC_COND_ELEM_2(1,137)))
					{_ATC_BLOC(1,57);{
						
						
						
						loc_b_filt = (_ATC_COND_END_1(1,145,72,3,9,2)((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_b_filt)_ATC_COND_ELEM_2(1,139)))_ATC_COND_SYNC_2(1,72+0)) || 
									( ((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_pr_error_confirm->e_error_state == K_LBFL_E_CONFIRMED)_ATC_COND_ELEM_2(1,141)))_ATC_COND_SYNC_2(1,72+1))) &&
									  ((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_r_lbfl_write_arg.pr_error_config->r_confirmation.e_confirm_type == K_LBFL_E_LATCHED)_ATC_COND_ELEM_2(1,143)))_ATC_COND_SYNC_2(1,72+2))) ))_ATC_COND_END_2(1,145,72,3,9,2));


						
						if ( (_ATC_COND_ELEM_1()(loc_b_filt == K_LBFL_E_RETURN_CONFIRM)_ATC_COND_ELEM_2(1,149)) )
						{_ATC_BLOC(1,55);{		
							
							{_ATC_SWITCH;switch ( loc_r_lbfl_write_arg.pr_error_config->e_criticality )							
							{
							case K_LBFL_E_WARNING:{_ATC_COND_CASE(1,151);
							case K_LBFL_E_CRITICALITY_NOT_DEFINED:{_ATC_COND_CASE(1,152);{_ATC_BLOC(1,52);

								
																
								(_ATC_CALL(1,17),lbfl_mng_write
									(K_LBFL_E_WRITE_DEBUG_BITE, K_LBFL_E_WRITE_DEBUG_BITE, 671, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg ));}}}

							break;

							case K_LBFL_E_FATAL:{_ATC_COND_CASE(1,153);{_ATC_BLOC(1,53);
							
								
								(_ATC_CALL(1,18),lbfl_mng_write
									(K_LBFL_E_WRITE_DEBUG_OS, K_LBFL_E_WRITE_DEBUG_OS, 679, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg ));}}

								
								

								(_ATC_CALL(1,19),RAISE_APPLICATION_ERROR (APPLICATION_ERROR, 
														 (MESSAGE_ADDR_TYPE)&stc_ul_error_msg, 
														 sizeof(stc_ul_error_msg), 
														 &loc_e_return_code));

							break;

							default:{_ATC_COND_CASE(1,154);{_ATC_BLOC(1,54);

								
								loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 =	loc_r_lbfl_write_arg.pr_error_config->e_criticality;}}
								(_ATC_CALL(1,20),lbfl_mng_lbfl_mng_internal_error  
									(K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE, 696, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));

							break;
							}}
								
						}}
						
						else
						{_ATC_BLOC(1,56);{
							
							;
						}}
						
					}}
					
					else
					{_ATC_BLOC(1,58);{
						
						;
					}}
					

			
			}}
			else
			{_ATC_BLOC(1,65);{		
                
					

					loc_r_lbfl_write_arg.pr_error_mng = pr_lbfl_error_mng;

                
                loc_r_lbfl_write_arg.pr_error_mng->r_error_confirm.e_current_error_desc.ul_line	= loc_r_lbfl_write_arg.ul_fsc_component_line_number;
                				
				
				if ((_ATC_COND_ELEM_1()(loc_b_lbfl_mng_fail == 0UL)_ATC_COND_ELEM_2(1,155)))
				{_ATC_BLOC(1,63);{
					

					loc_r_lbfl_write_arg.pr_error_mng->puc_error_label = (T_char *) &loc_r_lbfl_write_arg.pr_error_config->tuc_error_label[0];			
					

					loc_r_lbfl_write_arg.pr_error_mng->puc_fsc_component_file_name = par_puc_fsc_component_file_name;

					
					{_ATC_SWITCH;switch ( loc_r_lbfl_write_arg.pr_error_config->e_criticality )							
					{
					case K_LBFL_E_WARNING:{_ATC_COND_CASE(1,157);
					case K_LBFL_E_CRITICALITY_NOT_DEFINED:{_ATC_COND_CASE(1,158);{_ATC_BLOC(1,60);

						
														
						(_ATC_CALL(1,21),lbfl_mng_write
							(K_LBFL_E_WRITE_DEBUG_BITE, K_LBFL_E_WRITE_DEBUG_BITE, 749, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg ));}}}

					break;

					case K_LBFL_E_FATAL:{_ATC_COND_CASE(1,159);{_ATC_BLOC(1,61);
					
						
						(_ATC_CALL(1,22),lbfl_mng_write
							(K_LBFL_E_WRITE_DEBUG_OS, K_LBFL_E_WRITE_DEBUG_OS, 757, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg ));}}

						
						

						(_ATC_CALL(1,23),RAISE_APPLICATION_ERROR (APPLICATION_ERROR, 
												 (MESSAGE_ADDR_TYPE)&stc_ul_error_msg, 
												 sizeof(stc_ul_error_msg), 
												 &loc_e_return_code));

					break;

					default:{_ATC_COND_CASE(1,160);{_ATC_BLOC(1,62);

						
						loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 =	loc_r_lbfl_write_arg.pr_error_config->e_criticality;}}
						(_ATC_CALL(1,24),lbfl_mng_lbfl_mng_internal_error  
							(K_LBFL_E_FSC_ERR_SWDEFAULT_ERR_STATE, 774, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));

					break;
					}}

						
				}}
				
				else
				{_ATC_BLOC(1,64);{
					
					;
				}}
			}}
			

		
		}}
		else 
		{_ATC_BLOC(1,67);{
			
			loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 = loc_r_lbfl_write_arg.ul_process_id;
			loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_2 = tr_lbfl_global_error_mng[loc_r_lbfl_write_arg.ul_process_id][K_LBFL_E_FSC_LEVEL].ul_process_id;
			(_ATC_CALL(1,25),lbfl_mng_lbfl_mng_internal_error  
				(K_LBFL_E_FSC_ERR_PROCESS_ID, 798, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));
		}}
		
   	}}
	
	else
	{_ATC_BLOC(1,69);{
		
		loc_r_lbfl_mng_fail_write_arg.ul_ctxt_data_1 = e_lbfl_failure_init_status;
		(_ATC_CALL(1,26),lbfl_mng_lbfl_mng_internal_error  
			(K_LBFL_E_FSC_ERR_INIT, 808, &loc_r_lbfl_mng_fail_write_arg, &loc_r_lbfl_write_arg, 0UL));
	}}
	

	ul_lbfl_call_number = 0;
	return;
}}}

























 static	T_boolean lbfl_fsc_index
			(T_char	*par_puc_fsc_name,
			T_uint32 par_ul_process_id,
			T_uint32 par_ul_fsc_max_number,
			T_uint32 *par_pul_fsc_index,
			T_uint32 *par_pul_process_and_fsc_id)
{_ATC_DECLARE_COND_ELT(1,8);_ATC_LINK(1);{_ATC_BLOC(1,86);{
	T_uint32	loc_ul_process_id		= 1UL;
	T_boolean	loc_b_found				= 0UL;
	T_uint32	loc_ul_fsc_max_number	= par_ul_fsc_max_number;

	if ((_ATC_CALL(1,27),(_ATC_COND_ELEM_1()(lbstr_cmp ( par_puc_fsc_name, "LBFL"))_ATC_COND_ELEM_2(1,161))) )
	{_ATC_BLOC(1,71);{
		*par_pul_process_and_fsc_id =	(par_ul_process_id << 5) + 0x1F;
		loc_b_found	= 1UL;
	}}
	else
	{_ATC_BLOC(1,85);{
		if ((_ATC_COND_ELEM_1()(par_ul_process_id == 0)_ATC_COND_ELEM_2(1,163)))
		{_ATC_BLOC(1,79);{
			
			{_ATC_LOOP_bef1(1,77);do
			{_ATC_LOOP_in1(1,77);{_ATC_BLOC(1,76);{	
				loc_ul_fsc_max_number = tr_lbfl_global_error_mng[loc_ul_process_id][K_LBFL_E_PARTITION_LEVEL].ul_component_number;

	
				if ((_ATC_COND_ELEM_1()(tr_process_error_config[loc_ul_process_id].ul_process_id != 5 + 1)_ATC_COND_ELEM_2(1,165)))
				{_ATC_BLOC(1,74);{
					if ((_ATC_CALL(1,28),(_ATC_COND_ELEM_1()(lbfl_fsc_index_limited ((T_char *)	par_puc_fsc_name, 
												(T_lbfl_r_cst_fsc_name_config *) tr_process_error_config[loc_ul_process_id].pr_process_fsc_name_config,
												 loc_ul_fsc_max_number,	
												 par_pul_fsc_index))_ATC_COND_ELEM_2(1,167))))
					{_ATC_BLOC(1,72);{
						
						*par_pul_process_and_fsc_id =	(loc_ul_process_id << 5) + *par_pul_fsc_index;
						
						loc_b_found		 = 1UL;
					}}
					else
					{_ATC_BLOC(1,73);{
						
						;
					}}
				}}
				else
				{_ATC_BLOC(1,75);{
					
					;
				}}
				loc_ul_process_id++;

			}}} while ((_ATC_COND_END_1(1,173,0,2,10,1)((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_b_found == 0UL)_ATC_COND_ELEM_2(1,169)))_ATC_COND_SYNC_2(1,0+0)) && (_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_process_id < 5)_ATC_COND_ELEM_2(1,171)))_ATC_COND_SYNC_2(1,0+1)))_ATC_COND_END_2(1,173,0,2,10,1)));}
		}}
		else
		{_ATC_BLOC(1,84);{
			if ((_ATC_COND_ELEM_1()(tr_process_error_config[par_ul_process_id].ul_process_id != 5 + 1)_ATC_COND_ELEM_2(1,176)))
			{_ATC_BLOC(1,82);{
				if ((_ATC_CALL(1,29),(_ATC_COND_ELEM_1()(lbfl_fsc_index_limited ((T_char *)	par_puc_fsc_name, 
											(T_lbfl_r_cst_fsc_name_config	*)	tr_process_error_config[par_ul_process_id].pr_process_fsc_name_config,
											 loc_ul_fsc_max_number,		
											 par_pul_fsc_index))_ATC_COND_ELEM_2(1,178))))
				{_ATC_BLOC(1,80);{
					
					*par_pul_process_and_fsc_id =	(((	par_ul_process_id	)	<< 5) +
													 (	*par_pul_fsc_index			)	);
					loc_b_found		 = 1UL;
				}}
				else
				{_ATC_BLOC(1,81);{
					
					;
				}}
			}}
			else
			{_ATC_BLOC(1,83);{
				
			}}
		}}
	}}

	return (loc_b_found);
}}}
























static	T_boolean lbfl_fsc_index_limited
			(T_char *par_puc_fsc_name,
			T_lbfl_r_cst_fsc_name_config *par_pr_fsc_name_config,
			T_uint32 par_ul_fsc_max_number,
			T_uint32 *par_pul_fsc_index)
{_ATC_DECLARE_COND_ELT(1,8);_ATC_LINK(1);{_ATC_BLOC(1,92);{
	T_uint32	loc_ul_fsc_index	= 0UL;
	T_boolean	loc_b_found			= 0UL;

	
	{_ATC_LOOP_bef1(1,90);do
	{_ATC_LOOP_in1(1,90);{_ATC_BLOC(1,89);{
		if ((_ATC_CALL(1,30),(_ATC_COND_ELEM_1()(lbstr_cmp ( par_puc_fsc_name, par_pr_fsc_name_config[loc_ul_fsc_index].tuc_fsc_name))_ATC_COND_ELEM_2(1,180))) )
		{_ATC_BLOC(1,87);{
			
			*par_pul_fsc_index	= par_pr_fsc_name_config[loc_ul_fsc_index].ul_fsc_id;
			loc_b_found			= 1UL;
		}}
		else
		{_ATC_BLOC(1,88);{
			
			;
		}}
		loc_ul_fsc_index++;
	}}} while ((_ATC_COND_END_1(1,186,0,2,11,1)(((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_b_found == 0UL)_ATC_COND_ELEM_2(1,182)))_ATC_COND_SYNC_2(1,0+0))) && ((_ATC_COND_SYNC_1()((_ATC_COND_ELEM_1()(loc_ul_fsc_index < par_ul_fsc_max_number)_ATC_COND_ELEM_2(1,184)))_ATC_COND_SYNC_2(1,0+1))))_ATC_COND_END_2(1,186,0,2,11,1)));}

	return (loc_b_found);
}}}

























static	void lbfl_mng_lbfl_mng_internal_error
			(T_lbfl_e_fsc_err_index par_e_error_id,
		T_uint32				par_ul_line,
		T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_mng_fail_write_arg,
		T_lbfl_r_lbfl_write_arg *par_pr_lbfl_write_arg,
			T_boolean par_b_fatal_error_test)
{_ATC_LINK(1);{_ATC_BLOC(1,93);{
	(_ATC_CALL(1,31),lbfl_save_previous_error_arg (par_pr_lbfl_write_arg, par_pr_lbfl_mng_fail_write_arg));
	(_ATC_CALL(1,32),lbfl_mng_lbfl_internal_error (par_e_error_id, par_ul_line, par_pr_lbfl_mng_fail_write_arg, par_pr_lbfl_write_arg, par_b_fatal_error_test));
	return;
}}}






















static T_boolean lbfl_manage_ctx_data (T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_write_arg, 
										T_lbfl_r_lbfl_write_arg	*par_pr_lbfl_mng_fail_write_arg,
                                        T_uchar *par_tuc_ctxt_area,
										T_boolean par_b_fatal_error_test)
                                        
{_ATC_LINK(1);{_ATC_BLOC(1,108);{
	T_boolean loc_b_lbfl_mng_fail = 0UL;
	T_uint32 loc_i;
	
	
	if ((_ATC_COND_ELEM_1()(par_pr_lbfl_write_arg->puc_ctxt_data_area == ((T_ptr)0))_ATC_COND_ELEM_2(1,189)))
	{_ATC_BLOC(1,96);{
		if ((_ATC_COND_ELEM_1()(par_pr_lbfl_write_arg->ul_ctxt_data_area_size)_ATC_COND_ELEM_2(1,191)))
		{_ATC_BLOC(1,94);{
			
			par_pr_lbfl_write_arg->ul_ctxt_data_area_size = 0UL;
			
			
			(_ATC_CALL(1,33),lbfl_mng_lbfl_mng_internal_error 
				(K_LBFL_E_FSC_WARNING_ERR_PTR_NULL, 1051, par_pr_lbfl_mng_fail_write_arg, par_pr_lbfl_write_arg, par_b_fatal_error_test));
			
			loc_b_lbfl_mng_fail = 1UL;
		}}
		else
		{_ATC_BLOC(1,95);{
			;
		}} 
		

    }}
	else
	{_ATC_BLOC(1,107);{
		
		if ((_ATC_COND_ELEM_1()(par_pr_lbfl_write_arg->ul_ctxt_data_area_size <= 84)_ATC_COND_ELEM_2(1,193))) 
		{_ATC_BLOC(1,101);{
			
			{_ATC_LOOP_bef(1,98);for (loc_i = 0 ; (_ATC_COND_ELEM_1()(loc_i < par_pr_lbfl_write_arg->ul_ctxt_data_area_size)_ATC_COND_ELEM_2(1,195)) ; loc_i ++)
			{_ATC_LOOP_in(1,98);{_ATC_BLOC(1,97);{
				par_tuc_ctxt_area[loc_i] = *par_pr_lbfl_write_arg->puc_ctxt_data_area;
				par_pr_lbfl_write_arg->puc_ctxt_data_area ++;
				
			}}}}
		}}
		else
		{_ATC_BLOC(1,106);{
			
			par_pr_lbfl_write_arg->ul_ctxt_data_area_size = 84;
			
			{_ATC_LOOP_bef(1,103);for (loc_i = 0 ; (_ATC_COND_ELEM_1()(loc_i < 84)_ATC_COND_ELEM_2(1,197)) ; loc_i ++)
			{_ATC_LOOP_in(1,103);{_ATC_BLOC(1,102);{
				par_tuc_ctxt_area[loc_i] = par_pr_lbfl_write_arg->puc_ctxt_data_area[loc_i];
			}}}}
			
			
			(_ATC_CALL(1,34),lbfl_mng_lbfl_mng_internal_error 
				(K_LBFL_E_FSC_WARNING_ERR_CTXT_SIZE, 1087, par_pr_lbfl_mng_fail_write_arg, par_pr_lbfl_write_arg, par_b_fatal_error_test));
			
			loc_b_lbfl_mng_fail = 1UL;
		}}
	}} 
	
			
    
	par_pr_lbfl_write_arg->puc_ctxt_data_area = par_tuc_ctxt_area;


	return (loc_b_lbfl_mng_fail); 
}}}


