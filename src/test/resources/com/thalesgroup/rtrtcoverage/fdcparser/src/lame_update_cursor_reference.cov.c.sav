/* Rational Test RealTime C Instrumentor 2002.05.21.468.004 */
/* Build Number: 282.001*/
/* Copyright(C) 2002 Rational Software Corporation. All rights reserved. */
/*   Date : 09-Oct-02 19:21 */
/*     OS : ms-dos */

#define ATL_C_INSTRUMENTOR

#define USE_ATC 1

#define ATC_INFORMATION 0

#include "D:\Viewsnap\IC_CDS_A400M\CDS_A400M_DEV\..\build_tools_cds_a400m_L3.1\DESK_CompilationChain/TDP/GNU\lib\TP.h"

#define _ATC_INIT_CONST_COMPOUND_STUFF

_ATC_DECLARE_PROC(1,8)
_ATC_DECLARE_CALL(1,4)
_ATC_DECLARE_BLOC(1,57)
_ATC_DECLARE(1,0x14445655UL,0x3C517703UL,8,_ATC_TAB_PROC(1),4,_ATC_TAB_CALL(1),57,_ATC_TAB_BLOC(1),0,0)

# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_update_cursor_reference.c"













































# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_types.h"




























# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"














 
 




 


typedef char T_CHAR; 
# 26 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"

 


typedef long T_BOOL; 
# 32 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"


# 35 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"








 


typedef float T_FLOAT; 
# 48 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"

 


typedef double T_FLOAT_L; 
# 54 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"

 


typedef long T_INT; 
# 60 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"

 


typedef short T_INT_S;
# 66 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"

 


typedef unsigned long T_UINT;
# 72 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"

 


typedef unsigned short T_UINT_S;
# 78 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"
  

 
 

 


typedef T_FLOAT T_POINT[2]; 
# 88 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"
  
 
 

 



typedef struct { 
  T_INT length; 
  T_CHAR data[32]; 
} T_STRING; 
# 101 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"











typedef struct
{
   char   	 port_name[32];
   T_UINT    port_mode;     
   T_UINT 	 refresh;
   T_UINT  	 size_max ;
   T_UINT    nb_msg; 		
} T_REF_MSG ;


 









# 133 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/THEMIS/Interface/themis_basic_types.h"
# 30 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_types.h"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"
































typedef char				T_char;
# 35 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned char		T_uchar;
# 40 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"







typedef unsigned long		T_boolean;
# 49 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef char				T_int8;
# 55 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"


typedef short				T_int16;
# 59 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"


typedef long				T_int32;
# 63 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef unsigned char		T_uint8;
# 69 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned short		T_uint16;
# 74 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned long		T_uint32;
# 79 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"





typedef unsigned long		T_ubfield;
# 86 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef float				T_float32;
# 92 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef double				T_float64;
# 97 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"




typedef void				*T_ptr;
# 103 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"



typedef unsigned long		T_addr;
# 108 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"





# 114 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/Common/INTERFACE/Cl/apsw_basic_types_c.h"
# 31 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_types.h"



















typedef enum
{
    K_LAME_CURSOR_REF_NO_CURSOR = 0,
    K_LAME_CURSOR_REF_SCREEN = 1,
    K_LAME_CURSOR_REF_AC = 2,
    K_LAME_CURSOR_REF_GND = 3,
    K_LAME_CURSOR_REF_BE = 4
} T_lame_cursor_reference;


typedef T_float32 T_lame_orientation;

typedef struct
{
    T_float32 x;
    T_float32 y;
} T_lame_cartesian_coordinate;

typedef struct
{
    T_lame_orientation bearing_wrt_north;
    T_lame_orientation bearing_wrt_heading;
    T_float32 range;
    T_float32 real_range;
} T_lame_relative_coordinate;

typedef struct
{
    T_float32 latitude;
    T_float32 longitude;
} T_lame_geographic_coordinate;

typedef struct
{
    T_lame_cartesian_coordinate screen;
    T_lame_geographic_coordinate geo;
} T_lame_position;

typedef enum
{
    K_LAME_CURSOR_LOOK_NORMAL,
    K_LAME_CURSOR_LOOK_BORDER
} T_lame_cursor_look;

typedef struct
{
    
    T_boolean displayed;
    
    T_boolean displayed_prev;
    
    
    T_lame_cursor_reference reference;
    
    T_lame_cursor_reference reference_prev;

    T_boolean border_look_forced;
    T_lame_cursor_look look;

    
    T_boolean be_activated;

    
    T_int32 ccd_dx;
    T_int32 ccd_dy;

    
    T_boolean on_prp;

    
    T_boolean position_computable;

       
    T_boolean prev_position_computable;

    
    T_lame_cartesian_coordinate screen_position;
    T_boolean screen_position_validity;
    T_boolean screen_position_validity_prev;
    
    T_lame_cartesian_coordinate screen_correction;  
    
    T_lame_cartesian_coordinate screen_required_correction;  
    
    T_lame_cartesian_coordinate absolute_position;
    
    T_lame_relative_coordinate relative_AC_position;
    
    T_lame_relative_coordinate relative_BE_position;
    
    T_lame_geographic_coordinate geographic_position;

    
    T_uint16 media_x;
    T_uint16 media_y;

    
    T_uint16 cursor_abs_x;
    T_uint16 cursor_abs_y;

    
    T_boolean trackball_moved;

    

    T_boolean force_centering;
    
    T_boolean immobilize;
} T_lame_cursor_configuration;

typedef struct
{
    
    T_boolean DU1_display_ntdi;
    
    T_lame_cursor_reference DU1_ntdi_reference;
    
    T_boolean DU2_display_ntdi;
    
    T_lame_cursor_reference DU2_ntdi_reference;
} T_lame_ntdi_foreign_cursor_reference;

typedef struct
{
    
    T_lame_cursor_reference ntd1_reference;
    
    T_lame_cursor_reference ntd2_reference;

    
    T_boolean initialized;

    
    T_boolean DU1_validity;
    T_boolean DU2_validity;

    
    T_lame_ntdi_foreign_cursor_reference ntd1_foreign_ref;
    T_lame_ntdi_foreign_cursor_reference ntd2_foreign_ref;
} T_lame_memorized_cursor_reference;




typedef enum
{
    K_LAME_FORMAT_NOT_NTD,
    K_LAME_FORMAT_NTD1,
    K_LAME_FORMAT_NTD2
} T_lame_format;

typedef enum
{
    K_LAME_NTD_MODE_NONE = 0,
    K_LAME_NTD_MODE_ROSE = 1,
    K_LAME_NTD_MODE_ARC = 2,
    K_LAME_NTD_MODE_VOR = 3,
    K_LAME_NTD_MODE_VD = 4,
    K_LAME_NTD_MODE_SLEW = 5,
    K_LAME_NTD_MODE_SLEW_FRZ = 6,
    K_LAME_NTD_MODE_PLAN = 7,
    K_LAME_NTD_MODE_PLAN_FRZ = 8,
    K_LAME_NTD_MODE_EXPAND = 9,
    K_LAME_NTD_MODE_EXPAND_FRZ = 10,
    K_LAME_NTD_MODE_SLAVE = 11,
    K_LAME_NTD_MODE_ROSE_FRZ = 12,
    K_LAME_NTD_MODE_ARC_FRZ  = 13,
    K_LAME_NTD_MODE_VOR_FRZ  = 14,
    K_LAME_NTD_MODE_VD_FRZ   = 15
} T_lame_ntd_mode;


typedef enum
{
    K_LAME_6x6_MODE,
    K_LAME_6x8_MODE
} T_lame_size;

typedef struct
{
    
    T_lame_format format;
    
    T_lame_format format_prev;

    
    T_lame_ntd_mode ntd_mode;
    
    T_lame_ntd_mode ntd_mode_prev;

    
    T_uint8 reconf_started_tempo;
    
    T_uint8 ntd_mode_changed_tempo;
    
    T_uint8 ntd_mode_changed_to_slew_tempo;
    
    T_uint8 cursor_animation_tempo;

    
    T_boolean popup_opened;
    
    T_boolean dialog_box_displayed;

    
    T_boolean range_valid;
    
    T_float32 range_factor_x;
    T_float32 range_factor_y;

    
    T_lame_orientation orientation;

    
    T_uint16 screen_x_min;
    T_uint16 screen_x_max;
    T_uint16 screen_y_min;
    T_uint16 screen_y_max;

    
    T_lame_size screen_size;

    
    T_uint16 padding;
    T_uint16 lower_padding;

} T_lame_display_configuration;





typedef enum
{
    K_LAME_FOREIGN_DU1 = 0,
    K_LAME_FOREIGN_DU2,
    K_LAME_NB_FOREIGN_DU
} T_lame_foreign_du_index;

typedef struct
{
    T_boolean validity;
    T_boolean display_ntd;
    T_lame_geographic_coordinate position;
} T_lame_foreign_slew_prp;

typedef struct
{
    
    T_lame_geographic_coordinate position;
    
    T_lame_geographic_coordinate last_position_on_side;
    
    T_lame_format format;
    
    T_boolean initialized;
    
    T_lame_foreign_slew_prp foreign_slew_prp [K_LAME_NB_FOREIGN_DU];
} T_lame_NTDi_slew_prp;

typedef struct
{
    T_lame_NTDi_slew_prp ntd1_slew_prp;
    T_lame_NTDi_slew_prp ntd2_slew_prp;
    T_boolean prp_reset;
    T_boolean prp_reset_prev;
} T_lame_slew_prp_configuration;




typedef struct
{
    T_boolean condition;
    T_lame_geographic_coordinate prp;
    T_float32 *range;
} T_lame_range_gap;



typedef enum
{
    K_LAME_VD_CIVIL = 1,
    K_LAME_VD_TACT = 2
} T_lame_vd_type;

typedef struct
{
    T_uint8 nb_range_gaps;
    T_lame_range_gap range_gaps [4];
} T_lame_ntd_range_gaps;

# 343 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_types.h"

# 47 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_update_cursor_reference.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_next_cursor_reference.p"





















































extern T_lame_cursor_reference
lame_next_cursor_reference (T_lame_cursor_reference par_e_reference,
                            T_lame_ntd_mode par_e_ntd_mode,
                            T_boolean par_b_BE_activated);
# 48 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_update_cursor_reference.c"
# 1 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_update_cursor_reference.p"


























































extern void
lame_update_cursor_reference (T_lame_cursor_configuration *par_tr_cursor_conf,
                              T_lame_display_configuration *par_tr_display_conf,
                              T_boolean par_b_ref_key_pressed,
							  T_lame_memorized_cursor_reference *par_ptr_foreign_cursor_ref);
# 49 "D:/Viewsnap/IC_CDS_A400M/CDS_A400M_DEV/LA/Lame/Src/lame_update_cursor_reference.c"

extern T_INT NTD1_MODE_SELECTED;
extern T_INT NTD2_MODE_SELECTED;




static T_lame_cursor_reference manage_ntd_mode_change (
            T_lame_cursor_configuration *par_ptr_cursor_conf,
            T_lame_display_configuration *par_ptr_display_conf);

static T_lame_cursor_reference manage_abnormal_cursor_reference (
            T_lame_cursor_reference par_ptr_cursor_ref,
            T_lame_cursor_configuration *par_ptr_cursor_conf,
            T_lame_display_configuration *par_ptr_display_conf);

static void synchronize_ntd_cursor_reference (
            T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref,
            T_lame_display_configuration *par_ptr_display_conf);













































void
lame_update_cursor_reference (T_lame_cursor_configuration *par_ptr_cursor_conf,
                              T_lame_display_configuration *par_ptr_display_conf,
                              T_boolean par_b_ref_key_pressed,
                              T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref)
{_ATC_LINK(1);{_ATC_PROC(1,1);{_ATC_BLOC(1,12);{
    T_lame_cursor_reference loc_new_reference;

    (_ATC_CALL(1,0),synchronize_ntd_cursor_reference(
                par_ptr_memorized_cursor_ref,
                par_ptr_display_conf));

    if (par_ptr_cursor_conf->displayed == 0UL)
    {_ATC_BLOC(1,0);{
        
        par_ptr_cursor_conf->reference = K_LAME_CURSOR_REF_NO_CURSOR;
    }}
    else
    {_ATC_BLOC(1,11);{
        
        if (par_ptr_display_conf->format == K_LAME_FORMAT_NOT_NTD)
        {_ATC_BLOC(1,1);{
            
            par_ptr_cursor_conf->reference = K_LAME_CURSOR_REF_SCREEN;
        }}
        else
        {_ATC_BLOC(1,10);{
            
            if ((par_ptr_cursor_conf->displayed_prev == 0UL)
                || (par_ptr_display_conf->format != par_ptr_display_conf->format_prev))
            {_ATC_BLOC(1,4);{
                
                if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD1)
                {_ATC_BLOC(1,2);{
                    loc_new_reference = par_ptr_memorized_cursor_ref->ntd1_reference;
                }}
                else 
                {_ATC_BLOC(1,3);{
                    loc_new_reference = par_ptr_memorized_cursor_ref->ntd2_reference;
                }}
            }}
            else {_ATC_BLOC(1,7);if (par_b_ref_key_pressed == 1UL)
            {_ATC_BLOC(1,5);{
                

                loc_new_reference = (_ATC_CALL(1,1),lame_next_cursor_reference (
                    par_ptr_cursor_conf->reference_prev,
                    par_ptr_display_conf->ntd_mode,
                    par_ptr_cursor_conf->be_activated));
            }}          
            else
            {_ATC_BLOC(1,6);{
                loc_new_reference = (_ATC_CALL(1,2),manage_ntd_mode_change (
                    par_ptr_cursor_conf,
                    par_ptr_display_conf));
            }}}

            par_ptr_cursor_conf->reference = (_ATC_CALL(1,3),manage_abnormal_cursor_reference (
                    loc_new_reference,
                    par_ptr_cursor_conf,
                    par_ptr_display_conf));

            if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD1)
            {_ATC_BLOC(1,8);{
                par_ptr_memorized_cursor_ref->ntd1_reference = par_ptr_cursor_conf->reference;
            }}
            else 
            {_ATC_BLOC(1,9);{
                par_ptr_memorized_cursor_ref->ntd2_reference = par_ptr_cursor_conf->reference;
            }}
        }}
    }}
    {_ATC_PROC(1,0);return;}
}}}}





























static T_lame_cursor_reference manage_ntd_mode_change (
            T_lame_cursor_configuration *par_ptr_cursor_conf,
            T_lame_display_configuration *par_ptr_display_conf)
{_ATC_LINK(1);{_ATC_PROC(1,3);{_ATC_BLOC(1,23);{
    T_lame_cursor_reference loc_new_reference;

    
    if ((par_ptr_display_conf->format == par_ptr_display_conf->format_prev)
        &&
        ((par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ROSE) ||
         (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ARC) ||
         (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VOR) ||
         (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VD))
        &&
        ((par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_SLEW) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_EXPAND) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_PLAN) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_SLAVE) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ROSE_FRZ) ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ARC_FRZ)  ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VOR_FRZ)  ||
         (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VD_FRZ)))
    {_ATC_BLOC(1,13);{
        


        loc_new_reference = K_LAME_CURSOR_REF_GND;
    }}
    else {_ATC_BLOC(1,22);if ((par_ptr_display_conf->format == par_ptr_display_conf->format_prev)
             &&
             ((par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_SLEW) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_SLEW_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_PLAN) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_PLAN_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_EXPAND) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_EXPAND_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_SLAVE) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ROSE_FRZ) ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_ARC_FRZ)  ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VOR_FRZ)  ||
              (par_ptr_display_conf->ntd_mode_prev == K_LAME_NTD_MODE_VD_FRZ))
             &&
             ((par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ROSE) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ARC) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VD) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VOR)))
    {_ATC_BLOC(1,14);{
        



        loc_new_reference = K_LAME_CURSOR_REF_SCREEN;
    }}
    else {_ATC_BLOC(1,21);if ((par_ptr_display_conf->format == par_ptr_display_conf->format_prev)
             &&
             (par_ptr_cursor_conf->reference_prev == K_LAME_CURSOR_REF_BE)
             &&
             ((par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_EXPAND) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_EXPAND_FRZ) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_SLAVE) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ROSE_FRZ) ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_ARC_FRZ)  ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VOR_FRZ)  ||
              (par_ptr_display_conf->ntd_mode == K_LAME_NTD_MODE_VD_FRZ)))
    {_ATC_BLOC(1,15);{
        

        loc_new_reference = K_LAME_CURSOR_REF_GND;
    }}
    else {_ATC_BLOC(1,20);if ((par_ptr_cursor_conf->reference_prev == K_LAME_CURSOR_REF_BE)
             && (par_ptr_cursor_conf->be_activated == 0UL))
    {_ATC_BLOC(1,18);{
        

        switch (par_ptr_display_conf->ntd_mode)
        {
        case K_LAME_NTD_MODE_ROSE:
        case K_LAME_NTD_MODE_ARC:
        case K_LAME_NTD_MODE_VD:
        case K_LAME_NTD_MODE_VOR:{_ATC_BLOC(1,16);
            loc_new_reference = K_LAME_CURSOR_REF_SCREEN;}
            break;
        default:{_ATC_BLOC(1,17);
            loc_new_reference = K_LAME_CURSOR_REF_GND;}
            break;
        }
    }}
    else
    {_ATC_BLOC(1,19);{
        
        loc_new_reference = par_ptr_cursor_conf->reference_prev;
    }}}}}
    {_ATC_PROC(1,2);return loc_new_reference;}
}}}}

























static T_lame_cursor_reference manage_abnormal_cursor_reference (
            T_lame_cursor_reference        par_cursor_ref,
            T_lame_cursor_configuration    *par_ptr_cursor_conf,
            T_lame_display_configuration   *par_ptr_display_conf)
{_ATC_LINK(1);{_ATC_PROC(1,5);{_ATC_BLOC(1,33);{
    T_lame_cursor_reference loc_new_reference;

    loc_new_reference = par_cursor_ref;

    
    switch(par_ptr_display_conf->ntd_mode)
        {
        case K_LAME_NTD_MODE_ROSE:
        case K_LAME_NTD_MODE_ARC:
        case K_LAME_NTD_MODE_VD:
        case K_LAME_NTD_MODE_VOR:{_ATC_BLOC(1,24);
            
            if ((loc_new_reference == K_LAME_CURSOR_REF_NO_CURSOR)
                || ((loc_new_reference == K_LAME_CURSOR_REF_BE)
                    && (par_ptr_cursor_conf->be_activated == 0UL)))
            {_ATC_BLOC(1,25);{
                
                loc_new_reference = K_LAME_CURSOR_REF_SCREEN;
            }}
            else
            {_ATC_BLOC(1,26);{
                
            }}}
            break;
        case K_LAME_NTD_MODE_SLEW:
        case K_LAME_NTD_MODE_PLAN:
        case K_LAME_NTD_MODE_SLEW_FRZ:
        case K_LAME_NTD_MODE_PLAN_FRZ:{_ATC_BLOC(1,27);
            
            if ((loc_new_reference == K_LAME_CURSOR_REF_NO_CURSOR)
                || (loc_new_reference == K_LAME_CURSOR_REF_SCREEN)
                || ((loc_new_reference == K_LAME_CURSOR_REF_BE)
                    && (par_ptr_cursor_conf->be_activated == 0UL)))
            {_ATC_BLOC(1,28);{
                
                loc_new_reference = K_LAME_CURSOR_REF_GND;
            }}
            else
            {_ATC_BLOC(1,29);{
                
            }}}
            break;
        default:{_ATC_BLOC(1,30); 



            
            if ((loc_new_reference == K_LAME_CURSOR_REF_NO_CURSOR)
                || (loc_new_reference == K_LAME_CURSOR_REF_SCREEN)
                || (loc_new_reference == K_LAME_CURSOR_REF_BE))
            {_ATC_BLOC(1,31);{
                
                loc_new_reference = K_LAME_CURSOR_REF_GND;
            }}
            else
            {_ATC_BLOC(1,32);{
                
            }}}
    }
    {_ATC_PROC(1,4);return loc_new_reference;}
}}}}






























static void synchronize_ntd_cursor_reference (
            T_lame_memorized_cursor_reference *par_ptr_memorized_cursor_ref,
            T_lame_display_configuration *par_ptr_display_conf)
{_ATC_LINK(1);{_ATC_PROC(1,7);{_ATC_BLOC(1,56);{
    T_lame_ntdi_foreign_cursor_reference loc_ntdi_cursor_ref;

    if (par_ptr_memorized_cursor_ref->initialized == 0UL)
    {_ATC_BLOC(1,46);{
        par_ptr_memorized_cursor_ref->initialized = 1UL;
        

        if (par_ptr_memorized_cursor_ref->DU1_validity == 1UL)
        {_ATC_BLOC(1,34);{
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd1_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd2_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
        }}
        

        else {_ATC_BLOC(1,45);if (par_ptr_memorized_cursor_ref->DU2_validity == 1UL)
        {_ATC_BLOC(1,35);{
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd1_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
            loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd2_foreign_ref;
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
        }}
        

        else {_ATC_BLOC(1,44);if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD1)
        {_ATC_BLOC(1,38);{
            switch (par_ptr_display_conf->ntd_mode)
                {
                case K_LAME_NTD_MODE_ROSE:
                case K_LAME_NTD_MODE_ARC:
                case K_LAME_NTD_MODE_VOR:
                case K_LAME_NTD_MODE_VD:{_ATC_BLOC(1,36);
                    par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_SCREEN;}
                    break;
                default:{_ATC_BLOC(1,37);
                    par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_GND;}
                }
            par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_NO_CURSOR;
        }}
        else {_ATC_BLOC(1,43);if (par_ptr_display_conf->format == K_LAME_FORMAT_NTD2)
        {_ATC_BLOC(1,41);{
            switch (par_ptr_display_conf->ntd_mode)
                {
                case K_LAME_NTD_MODE_ROSE:
                case K_LAME_NTD_MODE_ARC:
                case K_LAME_NTD_MODE_VOR:
                case K_LAME_NTD_MODE_VD:{_ATC_BLOC(1,39);
                    par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_SCREEN;}
                    break;
                default:{_ATC_BLOC(1,40);
                    par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_GND;}
                }
            par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_NO_CURSOR;
        }}
        else
        {_ATC_BLOC(1,42);{
            par_ptr_memorized_cursor_ref->ntd1_reference = K_LAME_CURSOR_REF_NO_CURSOR;
            par_ptr_memorized_cursor_ref->ntd2_reference = K_LAME_CURSOR_REF_NO_CURSOR;
        }}}}}
    }}
    else
    {_ATC_BLOC(1,55);{
        
        loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd1_foreign_ref;

        

        if ((par_ptr_memorized_cursor_ref->DU1_validity == 1UL)
            && (loc_ntdi_cursor_ref.DU1_display_ntdi == 1UL))
        {_ATC_BLOC(1,47);{
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
        }}
        

        else {_ATC_BLOC(1,50);if ((par_ptr_memorized_cursor_ref->DU2_validity == 1UL)
            && (loc_ntdi_cursor_ref.DU2_display_ntdi == 1UL))
        {_ATC_BLOC(1,48);{
            par_ptr_memorized_cursor_ref->ntd1_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
        }}
        else
        {_ATC_BLOC(1,49);{
            
        }}}

        
        loc_ntdi_cursor_ref = par_ptr_memorized_cursor_ref->ntd2_foreign_ref;

        

        if ((par_ptr_memorized_cursor_ref->DU1_validity == 1UL)
            && (loc_ntdi_cursor_ref.DU1_display_ntdi == 1UL))
        {_ATC_BLOC(1,51);{
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU1_ntdi_reference;
        }}
        

        else {_ATC_BLOC(1,54);if ((par_ptr_memorized_cursor_ref->DU2_validity == 1UL)
            && (loc_ntdi_cursor_ref.DU2_display_ntdi == 1UL))
        {_ATC_BLOC(1,52);{
            par_ptr_memorized_cursor_ref->ntd2_reference = loc_ntdi_cursor_ref.DU2_ntdi_reference;
        }}
        else
        {_ATC_BLOC(1,53);{
            
        }}}
    }}
    {_ATC_PROC(1,6);return;}
}}}}
